From 7655e04fca6a7b79a43515327e875e41cc95c018 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 16 Feb 2023 14:24:07 +0100
Subject: [PATCH 108/176] fix(minidrbdcluster): robustify to unmount correctly
 LINSTOR DB

There is a small delay during which the database may not be unmounted
because there are still processes using it. So must retry in this case.
It's caused by the termination of the LINSTOR controller.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 Makefile                                   |  1 +
 etc/systemd/system/var-lib-linstor.service |  2 +-
 scripts/safe-umount                        | 39 ++++++++++++++++++++++
 3 files changed, 41 insertions(+), 1 deletion(-)
 create mode 100755 scripts/safe-umount

diff --git a/Makefile b/Makefile
index 42058c8..72d7be3 100755
--- a/Makefile
+++ b/Makefile
@@ -241,6 +241,7 @@ install: precheck
 	mkdir -p $(SM_STAGING)$(LIBEXEC)
 	install -m 755 scripts/fork-log-daemon $(SM_STAGING)$(LIBEXEC)
 	install -m 755 scripts/linstor-kv-tool $(SM_STAGING)$(BIN_DEST)
+	install -m 755 scripts/safe-umount $(SM_STAGING)$(LIBEXEC)
 	install -m 755 scripts/local-device-change $(SM_STAGING)$(LIBEXEC)
 	install -m 755 scripts/check-device-sharing $(SM_STAGING)$(LIBEXEC)
 	install -m 755 scripts/usb_change $(SM_STAGING)$(LIBEXEC)
diff --git a/etc/systemd/system/var-lib-linstor.service b/etc/systemd/system/var-lib-linstor.service
index d230d04..e9deb90 100644
--- a/etc/systemd/system/var-lib-linstor.service
+++ b/etc/systemd/system/var-lib-linstor.service
@@ -17,5 +17,5 @@ Description=Mount filesystem for the LINSTOR controller
 [Service]
 Type=oneshot
 ExecStart=/bin/mount -w /dev/drbd/by-res/xcp-persistent-database/0 /var/lib/linstor
-ExecStop=/bin/umount /var/lib/linstor
+ExecStop=/opt/xensource/libexec/safe-umount /var/lib/linstor
 RemainAfterExit=true
diff --git a/scripts/safe-umount b/scripts/safe-umount
new file mode 100755
index 0000000..9c1dcc4
--- /dev/null
+++ b/scripts/safe-umount
@@ -0,0 +1,39 @@
+#!/usr/bin/env python2
+
+import argparse
+import subprocess
+import sys
+import time
+
+
+def safe_umount(path):
+    retry_count = 10
+    not_mounted_str = 'umount: {}: not mounted'.format(path)
+
+    last_code = 0
+    while retry_count:
+        proc = subprocess.Popen(['mountpoint', '-q', path])
+        proc.wait()
+        if proc.returncode:
+            return 0
+
+        proc = subprocess.Popen(['umount', path], stderr=subprocess.PIPE)
+        (stdout, stderr) = proc.communicate()
+        if not proc.returncode:
+            return 0
+
+        error = stderr.strip()
+        if error == not_mounted_str:
+            return 0
+
+        retry_count -= 1
+        last_code = proc.returncode
+        time.sleep(0.500)
+    return last_code
+
+
+if __name__ == '__main__':
+    parser = argparse.ArgumentParser()
+    parser.add_argument('path')
+    args = parser.parse_args()
+    sys.exit(safe_umount(args.path))
-- 
2.45.2

