From 0ab24af4e6a2cd9075fda7f7e02658acf7169d06 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Wed, 5 Jul 2023 11:41:41 +0200
Subject: [PATCH 20/24] Fix blktap error mapping in python3

```
    def _errmsg(self):
        output = map(str.rstrip, self._p.stderr)
        return "; ".join(output)
```

rstrip is only compatible with str but stderr field uses bytes type
instead of str in python3, so we use `universal_newlines` on subprocess.Popen
to fix this problem.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/blktap2.py    | 10 ++---
 tests/test_blktap2.py | 94 ++++++++++++++++++++++++-------------------
 2 files changed, 58 insertions(+), 46 deletions(-)

diff --git a/drivers/blktap2.py b/drivers/blktap2.py
index 8696a2d..3a419aa 100755
--- a/drivers/blktap2.py
+++ b/drivers/blktap2.py
@@ -201,7 +201,8 @@ class TapCtl(object):
                                  stdin=subprocess.PIPE,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE,
-                                 close_fds=True)
+                                 close_fds=True,
+                                 universal_newlines=True)
             if input:
                 p.stdin.write(input)
                 p.stdin.close()
@@ -246,7 +247,7 @@ class TapCtl(object):
         output = tapctl.stdout.readline().rstrip()
 
         tapctl._wait(quiet)
-        return output.decode()
+        return output
 
     @staticmethod
     def _maybe(opt, parm):
@@ -265,16 +266,15 @@ class TapCtl(object):
         tapctl = cls._call(args, True)
 
         for stdout_line in tapctl.stdout:
-            decoded_line = stdout_line.decode()
             # FIXME: tap-ctl writes error messages to stdout and
             # confuses this parser
-            if decoded_line == "blktap kernel module not installed\n":
+            if stdout_line == "blktap kernel module not installed\n":
                 # This isn't pretty but (a) neither is confusing stdout/stderr
                 # and at least causes the error to describe the fix
                 raise Exception("blktap kernel module not installed: try 'modprobe blktap'")
             row = {}
 
-            for field in decoded_line.rstrip().split(' ', 3):
+            for field in stdout_line.rstrip().split(' ', 3):
                 bits = field.split('=')
                 if len(bits) == 2:
                     key, val = field.split('=')
diff --git a/tests/test_blktap2.py b/tests/test_blktap2.py
index 4cec0c5..e3e2f80 100644
--- a/tests/test_blktap2.py
+++ b/tests/test_blktap2.py
@@ -1,6 +1,6 @@
 import errno
 import json
-from io import BytesIO
+from io import StringIO
 import unittest
 import unittest.mock as mock
 import os
@@ -77,8 +77,8 @@ class TestTapdisk(unittest.TestCase):
 
     def test_list(self):
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(
-            b"pid=705 minor=0 state=0 args=vhd:/dev/VG_XenStorage-2eeb9fd5-6545-8f0b-cf72-0378e413a31c/VHD-a7c0f37e-b7fb-4a44-a6fe-05067fb84c09")
+        mock_process.stdout = StringIO(
+            "pid=705 minor=0 state=0 args=vhd:/dev/VG_XenStorage-2eeb9fd5-6545-8f0b-cf72-0378e413a31c/VHD-a7c0f37e-b7fb-4a44-a6fe-05067fb84c09")
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.return_value = mock_process
 
@@ -87,7 +87,9 @@ class TestTapdisk(unittest.TestCase):
         self.mock_subprocess.Popen.assert_called_with(
             ['/usr/sbin/tap-ctl', 'list'],
             close_fds=True, stdin=mock.ANY,
-            stdout=mock.ANY, stderr=mock.ANY)
+            stdout=mock.ANY, stderr=mock.ANY,
+            universal_newlines=True
+        )
         self.assertEqual(1, len(results))
         print(f"Results are {results[0]}")
         self.assertEqual(705, results[0].pid)
@@ -345,8 +347,8 @@ class TestTapCtl(unittest.TestCase):
         TapCtl list no args
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(
-            b"pid=705 minor=0 state=0 args=vhd:/dev/VG_XenStorage-2eeb9fd5-6545-8f0b-cf72-0378e413a31c/VHD-a7c0f37e-b7fb-4a44-a6fe-05067fb84c09")
+        mock_process.stdout = StringIO(
+            "pid=705 minor=0 state=0 args=vhd:/dev/VG_XenStorage-2eeb9fd5-6545-8f0b-cf72-0378e413a31c/VHD-a7c0f37e-b7fb-4a44-a6fe-05067fb84c09")
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.return_value = mock_process
 
@@ -355,7 +357,9 @@ class TestTapCtl(unittest.TestCase):
         self.mock_subprocess.Popen.assert_called_with(
             ['/usr/sbin/tap-ctl', 'list'],
             close_fds=True, stdin=mock.ANY,
-            stdout=mock.ANY, stderr=mock.ANY)
+            stdout=mock.ANY, stderr=mock.ANY,
+            universal_newlines=True
+        )
         self.assertEqual(1, len(results))
         self.assertEqual(705, results[0]['pid'])
         self.assertEqual(0, results[0]['minor'])
@@ -368,7 +372,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl list pid arg
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b"")
+        mock_process.stdout = StringIO("")
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.return_value = mock_process
 
@@ -386,10 +390,10 @@ class TestTapCtl(unittest.TestCase):
         TapCtl list retry on eproto
         """
         mock_process1 = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process1.stdout = BytesIO(b"")
+        mock_process1.stdout = StringIO("")
         mock_process1.wait.return_value = errno.EPROTO
         mock_process2 = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process2.stdout = BytesIO(b"")
+        mock_process2.stdout = StringIO("")
         mock_process2.wait.return_value = 0
 
         self.mock_subprocess.Popen.side_effect = [
@@ -405,7 +409,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl list failure on eperm
         """
         mock_process1 = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process1.stdout = BytesIO(b"")
+        mock_process1.stdout = StringIO("")
         mock_process1.wait.return_value = errno.EPERM
 
         self.mock_subprocess.Popen.side_effect = [
@@ -421,7 +425,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl list, exited signalled
         """
         mock_process1 = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process1.stdout = BytesIO(b"")
+        mock_process1.stdout = StringIO("")
         mock_process1.wait.return_value = -11
 
         self.mock_subprocess.Popen.side_effect = [
@@ -437,7 +441,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl allocate
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'/dev/xen/blktap-2/tapdev1')
+        mock_process.stdout = StringIO('/dev/xen/blktap-2/tapdev1')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -446,7 +450,9 @@ class TestTapCtl(unittest.TestCase):
         self.mock_subprocess.Popen.assert_called_with(
             ['/usr/sbin/tap-ctl', 'allocate'],
             close_fds=True, stdin=mock.ANY,
-            stdout=mock.ANY, stderr=mock.ANY)
+            stdout=mock.ANY, stderr=mock.ANY,
+            universal_newlines=True
+        )
         self.assertEqual('/dev/xen/blktap-2/tapdev1',
                          results)
 
@@ -455,7 +461,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl free
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -464,14 +470,16 @@ class TestTapCtl(unittest.TestCase):
         self.mock_subprocess.Popen.assert_called_with(
             ['/usr/sbin/tap-ctl', 'free', '-m', '1'],
             close_fds=True, stdin=mock.ANY,
-            stdout=mock.ANY, stderr=mock.ANY)
+            stdout=mock.ANY, stderr=mock.ANY,
+            universal_newlines=True
+        )
 
     def test_spawn(self):
         """
         TapCtl spawn
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'22127')
+        mock_process.stdout = StringIO('22127')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -480,7 +488,9 @@ class TestTapCtl(unittest.TestCase):
         self.mock_subprocess.Popen.assert_called_with(
             ['/usr/sbin/tap-ctl', 'spawn'],
             close_fds=True, stdin=mock.ANY,
-            stdout=mock.ANY, stderr=mock.ANY)
+            stdout=mock.ANY, stderr=mock.ANY,
+            universal_newlines=True
+        )
 
         self.assertEqual(22127, pid)
 
@@ -489,10 +499,10 @@ class TestTapCtl(unittest.TestCase):
         TapCtl spawn, retry (CA-292268)
         """
         mock_process1 = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process1.stdout = BytesIO(b'')
+        mock_process1.stdout = StringIO('')
         mock_process1.wait.return_value = errno.EPERM
         mock_process2 = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process2.stdout = BytesIO(b'22127')
+        mock_process2.stdout = StringIO('22127')
         mock_process2.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [
             mock_process1, mock_process2]
@@ -502,7 +512,9 @@ class TestTapCtl(unittest.TestCase):
         self.mock_subprocess.Popen.assert_called_with(
             ['/usr/sbin/tap-ctl', 'spawn'],
             close_fds=True, stdin=mock.ANY,
-            stdout=mock.ANY, stderr=mock.ANY)
+            stdout=mock.ANY, stderr=mock.ANY,
+            universal_newlines=True
+        )
 
         self.assertEqual(22127, pid)
 
@@ -511,7 +523,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl spawn, command failure
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = errno.EIO
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -525,7 +537,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl attach
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -542,7 +554,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl detach
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -559,7 +571,7 @@ class TestTapCtl(unittest.TestCase):
         Tapctl close
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -580,7 +592,7 @@ class TestTapCtl(unittest.TestCase):
         Tapctl close, forced
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -601,7 +613,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl pause
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -618,7 +630,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl unpause
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -642,7 +654,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl unpause, mirroring
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -660,7 +672,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl unpause, CBT logging
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -684,7 +696,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -709,7 +721,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open, readonly
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -729,7 +741,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open, readonly
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -749,7 +761,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open, read cache
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -769,7 +781,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open, intellicache leaf
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -795,7 +807,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open, intellicache leaf, non-persistent
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -822,7 +834,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open, intellicache parent
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -845,7 +857,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open, CBT logging
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -873,7 +885,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl open, with encryption key
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'')
+        mock_process.stdout = StringIO('')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -925,7 +937,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl stats
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'{ "name": "vhd:/dev/VG_XenStorage-2eeb9fd5-6545-8f0b-cf72-0378e413a31c/VHD-a7c0f37e-b7fb-4a44-a6fe-05067fb84c09", "secs": [ 688, 0 ], "images": [ { "name": "/dev/VG_XenStorage-2eeb9fd5-6545-8f0b-cf72-0378e413a31c/VHD-a7c0f37e-b7fb-4a44-a6fe-05067fb84c09", "hits": [ 688, 0 ], "fail": [ 0, 0 ], "driver": { "type": 4, "name": "vhd", "status": null } } ], "tap": { "minor": 0, "reqs": [ 35, 35 ], "kicks": [ 33, 28 ] }, "FIXME_enospc_redirect_count": 0, "nbd_mirror_failed": 0, "reqs_outstanding": 0, "read_caching": "false" }')
+        mock_process.stdout = StringIO('{ "name": "vhd:/dev/VG_XenStorage-2eeb9fd5-6545-8f0b-cf72-0378e413a31c/VHD-a7c0f37e-b7fb-4a44-a6fe-05067fb84c09", "secs": [ 688, 0 ], "images": [ { "name": "/dev/VG_XenStorage-2eeb9fd5-6545-8f0b-cf72-0378e413a31c/VHD-a7c0f37e-b7fb-4a44-a6fe-05067fb84c09", "hits": [ 688, 0 ], "fail": [ 0, 0 ], "driver": { "type": 4, "name": "vhd", "status": null } } ], "tap": { "minor": 0, "reqs": [ 35, 35 ], "kicks": [ 33, 28 ] }, "FIXME_enospc_redirect_count": 0, "nbd_mirror_failed": 0, "reqs_outstanding": 0, "read_caching": "false" }')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
@@ -944,7 +956,7 @@ class TestTapCtl(unittest.TestCase):
         TapCtl major
         """
         mock_process = mock.MagicMock(autospec='subprocess.Popen')
-        mock_process.stdout = BytesIO(b'254')
+        mock_process.stdout = StringIO('254')
         mock_process.wait.return_value = 0
         self.mock_subprocess.Popen.side_effect = [mock_process]
 
-- 
2.41.0

