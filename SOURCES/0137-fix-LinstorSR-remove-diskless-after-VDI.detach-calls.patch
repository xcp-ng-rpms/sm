From e543a48ebf3139d6423b5273777592bfe172a58c Mon Sep 17 00:00:00 2001
From: Rene Peinthor <rene.peinthor@linbit.com>
Date: Tue, 25 Jul 2023 11:19:39 +0200
Subject: [PATCH 137/180] fix(LinstorSR): remove diskless after VDI.detach
 calls

Signed-off-by: Rene Peinthor <rene.peinthor@linbit.com>
Co-authored-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py            | 20 ++++++++++++++++++++
 drivers/linstorvolumemanager.py | 26 +++++++++++++++++++++++---
 2 files changed, 43 insertions(+), 3 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index ed5998e..7b9a8e5 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -1943,6 +1943,26 @@ class LinstorVDI(VDI.VDI):
                     .format(e)
                 )
 
+        # We remove only on slaves because the volume can be used by the GC.
+        if self.sr._is_master:
+            return
+
+        while vdi_uuid:
+            try:
+                path = self._linstor.build_device_path(self._linstor.get_volume_name(vdi_uuid))
+                parent_vdi_uuid = self.sr._vhdutil.get_vhd_info(vdi_uuid).parentUuid
+            except Exception:
+                break
+
+            if util.pathexists(path):
+                try:
+                    self._linstor.remove_volume_if_diskless(vdi_uuid)
+                except Exception as e:
+                    # Ensure we can always detach properly.
+                    # I don't want to corrupt the XAPI info.
+                    util.SMlog('Failed to clean VDI {} during detach: {}'.format(vdi_uuid, e))
+            vdi_uuid = parent_vdi_uuid
+
     def resize(self, sr_uuid, vdi_uuid, size):
         util.SMlog('LinstorVDI.resize for {}'.format(self.uuid))
         if not self.sr._is_master:
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 49ca83c..0f6fbcf 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -781,6 +781,28 @@ class LinstorVolumeManager(object):
         if waiting:
             self._logger('No volume locked now!')
 
+    def remove_volume_if_diskless(self, volume_uuid):
+        """
+        Remove disless path from local node.
+        :param str volume_uuid: The volume uuid to remove.
+        """
+
+        self._ensure_volume_exists(volume_uuid)
+
+        volume_properties = self._get_volume_properties(volume_uuid)
+        volume_name = volume_properties.get(self.PROP_VOLUME_NAME)
+
+        node_name = socket.gethostname()
+        result = self._linstor.resource_delete_if_diskless(
+            node_name=node_name, rsc_name=volume_name
+        )
+        if not linstor.Linstor.all_api_responses_no_error(result):
+            raise LinstorVolumeManagerError(
+                'Unable to delete diskless path of `{}` on node `{}`: {}'
+                .format(volume_name, node_name, ', '.join(
+                    [str(x) for x in result]))
+                )
+
     def introduce_volume(self, volume_uuid):
         pass  # TODO: Implement me.
 
@@ -2459,9 +2481,7 @@ class LinstorVolumeManager(object):
 
     @classmethod
     def _activate_device_path(cls, lin, node_name, volume_name):
-        result = lin.resource_create([
-            linstor.ResourceData(node_name, volume_name, diskless=True)
-        ])
+        result = lin.resource_make_available(node_name, volume_name, diskful=False)
         if linstor.Linstor.all_api_responses_no_error(result):
             return
         errors = linstor.Linstor.filter_api_call_response_errors(result)
-- 
2.46.0

