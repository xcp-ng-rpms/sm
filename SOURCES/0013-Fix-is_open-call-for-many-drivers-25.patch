From 58c1e5a82d1b943a94a1524e52fd8bf43e916e3e Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@gmail.com>
Date: Thu, 23 Jun 2022 10:36:36 +0200
Subject: [PATCH 13/23] Fix is_open call for many drivers (#25)

Ensure all shared drivers are imported in `_is_open` definition to register
them in the driver list. Otherwise this function always fails with a SRUnknownType exception.

Also, we must add two fake mandatory parameters to make MooseFS happy: `masterhost` and `rootpath`.
Same for CephFS with: `serverpath`. (NFS driver is directly patched to ensure there is no usage of
the `serverpath` param because its value is equal to None.)

`location` param is required to use ZFS, to be more precise, in the parent class: `FileSR`.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/GlusterFSSR.py |  3 ++-
 drivers/NFSSR.py       | 12 ++++++++----
 drivers/on_slave.py    | 22 ++++++++++++++++++++--
 3 files changed, 30 insertions(+), 7 deletions(-)

diff --git a/drivers/GlusterFSSR.py b/drivers/GlusterFSSR.py
index a2f7484f..323718d9 100644
--- a/drivers/GlusterFSSR.py
+++ b/drivers/GlusterFSSR.py
@@ -96,7 +96,8 @@ class GlusterFSSR(FileSR.FileSR):
         self.driver_config = DRIVER_CONFIG
         if 'server' not in self.dconf:
             raise xs_errors.XenError('ConfigServerMissing')
-        self.remoteserver = self.dconf['server']
+        # Can be None => on-slave plugin hack (is_open function).
+        self.remoteserver = self.dconf['server'] or ''
         if self.sr_ref and self.session is not None:
             self.sm_config = self.session.xenapi.SR.get_sm_config(self.sr_ref)
         else:
diff --git a/drivers/NFSSR.py b/drivers/NFSSR.py
index e876b6bd..207e45c4 100755
--- a/drivers/NFSSR.py
+++ b/drivers/NFSSR.py
@@ -83,9 +83,12 @@ class NFSSR(FileSR.SharedFileSR):
             self.sm_config = self.srcmd.params.get('sr_sm_config') or {}
             self.other_config = self.srcmd.params.get('sr_other_config') or {}
         self.nosubdir = self.sm_config.get('nosubdir') == "true"
-        if self.dconf.has_key('serverpath'):
-            self.remotepath = os.path.join(self.dconf['serverpath'],
-                    not self.nosubdir and sr_uuid or "").encode('utf-8')
+        serverpath = self.dconf.get('serverpath')
+        if serverpath is not None:
+            self.remotepath = os.path.join(
+                serverpath,
+                not self.nosubdir and sr_uuid or ""
+            ).encode('utf-8')
         self.path = os.path.join(SR.MOUNT_BASE, sr_uuid)
 
         # Handle optional dconf attributes
@@ -100,7 +103,8 @@ class NFSSR(FileSR.SharedFileSR):
 
 
     def validate_remotepath(self, scan):
-        if not self.dconf.has_key('serverpath'):
+        serverpath = self.dconf.get('serverpath')
+        if serverpath is None:
             if scan:
                 try:
                     self.scan_exports(self.dconf['server'])
diff --git a/drivers/on_slave.py b/drivers/on_slave.py
index 0d60d969..534e6c90 100755
--- a/drivers/on_slave.py
+++ b/drivers/on_slave.py
@@ -72,7 +72,17 @@ def multi(session, args):
 
 def _is_open(session, args):
     """Check if VDI <args["vdiUuid"]> is open by a tapdisk on this host"""
-    import SRCommand, SR, NFSSR, EXTSR, LVHDSR, blktap2
+    import SRCommand
+    import SR
+    import CephFSSR
+    import EXTSR
+    import GlusterFSSR
+    import LVHDSR
+    import MooseFSSR
+    import NFSSR
+    import XFSSR
+    import ZFSSR
+    import blktap2
 
     util.SMlog("on-slave.is_open: %s" % args)
     vdiUuid = args["vdiUuid"]
@@ -86,7 +96,15 @@ def _is_open(session, args):
         srType = "lvhd"
     cmd = SRCommand.SRCommand(None)
     cmd.driver_info = {"capabilities": None}
-    cmd.dconf = {"server": None, "device": "/HACK"}
+    cmd.dconf = {
+        "server": None,
+        "device": "/HACK",
+        # Hack for custom XCP-ng drivers.
+        "masterhost": None,  # MooseFS
+        "rootpath": None,    # MooseFS
+        "serverpath": None,  # CephFS
+        "location": "/HACK"  # ZFS
+    }
     cmd.params = {"command": None}
 
     driver = SR.driver(srType)
