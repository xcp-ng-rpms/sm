From 6b9512386d1d54f2915749c58f66380f62145c3d Mon Sep 17 00:00:00 2001
From: Yann Dirson <yann.dirson@vates.fr>
Date: Wed, 8 Mar 2023 10:13:18 +0100
Subject: [PATCH 13/22] py3: simple changes from futurize on XCP-ng drivers

* `except` syntax fixes
* drop `has_key()` usage
* drop `filter()` usage (but drop their silly `list(x.keys())` wrappings)
* drop `map()` usage
* use `int` not `long`
* use `items()` not `iteritems()`

Signed-off-by: Yann Dirson <yann.dirson@vates.fr>
---
 drivers/CephFSSR.py             | 18 +++++++++---------
 drivers/GlusterFSSR.py          | 16 ++++++++--------
 drivers/LinstorSR.py            | 11 ++++-------
 drivers/MooseFSSR.py            | 16 ++++++++--------
 drivers/cleanup.py              |  6 +++---
 drivers/linstorvolumemanager.py |  2 +-
 6 files changed, 33 insertions(+), 36 deletions(-)

diff --git a/drivers/CephFSSR.py b/drivers/CephFSSR.py
index 09c928b..528cd3b 100644
--- a/drivers/CephFSSR.py
+++ b/drivers/CephFSSR.py
@@ -132,18 +132,18 @@ class CephFSSR(FileSR.FileSR):
         try:
             if not util.ioretry(lambda: util.isdir(mountpoint)):
                 util.ioretry(lambda: util.makedirs(mountpoint))
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             raise CephFSException("Failed to make directory: code is %d" % inst.code)
 
         try:
             options = []
-            if self.dconf.has_key('options'):
+            if 'options' in self.dconf:
                 options.append(self.dconf['options'])
             if options:
                 options = ['-o', ','.join(options)]
             command = ["mount", '-t', 'ceph', self.remoteserver+":"+self.remoteport+":"+self.remotepath, mountpoint] + options
             util.ioretry(lambda: util.pread(command), errlist=[errno.EPIPE, errno.EIO], maxretry=2, nofail=True)
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             syslog(_syslog.LOG_ERR, 'CephFS mount failed ' + inst.__str__())
             raise CephFSException("mount failed with return code %d" % inst.code)
 
@@ -161,12 +161,12 @@ class CephFSSR(FileSR.FileSR):
     def unmount(self, mountpoint, rmmountpoint):
         try:
             util.pread(["umount", mountpoint])
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             raise CephFSException("umount failed with return code %d" % inst.code)
         if rmmountpoint:
             try:
                 os.rmdir(mountpoint)
-            except OSError, inst:
+            except OSError as inst:
                 raise CephFSException("rmdir failed with error '%s'" % inst.strerror)
 
     def attach(self, sr_uuid):
@@ -174,7 +174,7 @@ class CephFSSR(FileSR.FileSR):
             try:
                 self.mount()
                 os.symlink(self.linkpath, self.path)
-            except CephFSException, exc:
+            except CephFSException as exc:
                 raise SR.SROSError(12, exc.errstr)
         self.attached = True
 
@@ -206,7 +206,7 @@ class CephFSSR(FileSR.FileSR):
 
         try:
             self.mount()
-        except CephFSException, exc:
+        except CephFSException as exc:
             # noinspection PyBroadException
             try:
                 os.rmdir(self.mountpoint)
@@ -223,7 +223,7 @@ class CephFSSR(FileSR.FileSR):
             try:
                 util.ioretry(lambda: util.makedirs(self.linkpath))
                 os.symlink(self.linkpath, self.path)
-            except util.CommandException, inst:
+            except util.CommandException as inst:
                 if inst.code != errno.EEXIST:
                     try:
                         self.unmount(self.mountpoint, True)
@@ -244,7 +244,7 @@ class CephFSSR(FileSR.FileSR):
             if util.ioretry(lambda: util.pathexists(self.linkpath)):
                 util.ioretry(lambda: os.rmdir(self.linkpath))
             util.SMlog(str(self.unmount(self.mountpoint, True)))
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             self.detach(sr_uuid)
             if inst.code != errno.ENOENT:
                 raise SR.SROSError(114, "Failed to remove CephFS mount point")
diff --git a/drivers/GlusterFSSR.py b/drivers/GlusterFSSR.py
index 61a7d40..0d9d4e1 100644
--- a/drivers/GlusterFSSR.py
+++ b/drivers/GlusterFSSR.py
@@ -122,7 +122,7 @@ class GlusterFSSR(FileSR.FileSR):
         try:
             if not util.ioretry(lambda: util.isdir(mountpoint)):
                 util.ioretry(lambda: util.makedirs(mountpoint))
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             raise GlusterFSException("Failed to make directory: code is %d" % inst.code)
         try:
             options = []
@@ -134,7 +134,7 @@ class GlusterFSSR(FileSR.FileSR):
                 options = ['-o', ','.join(options)]
             command = ["mount", '-t', 'glusterfs', self.remoteserver, mountpoint] + options
             util.ioretry(lambda: util.pread(command), errlist=[errno.EPIPE, errno.EIO], maxretry=2, nofail=True)
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             syslog(_syslog.LOG_ERR, 'GlusterFS mount failed ' + inst.__str__())
             raise GlusterFSException("mount failed with return code %d" % inst.code)
 
@@ -152,12 +152,12 @@ class GlusterFSSR(FileSR.FileSR):
     def unmount(self, mountpoint, rmmountpoint):
         try:
             util.pread(["umount", mountpoint])
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             raise GlusterFSException("umount failed with return code %d" % inst.code)
         if rmmountpoint:
             try:
                 os.rmdir(mountpoint)
-            except OSError, inst:
+            except OSError as inst:
                 raise GlusterFSException("rmdir failed with error '%s'" % inst.strerror)
 
     def attach(self, sr_uuid):
@@ -165,7 +165,7 @@ class GlusterFSSR(FileSR.FileSR):
             try:
                 self.mount()
                 os.symlink(self.linkpath, self.path)
-            except GlusterFSException, exc:
+            except GlusterFSException as exc:
                 raise SR.SROSError(12, exc.errstr)
         self.attached = True
 
@@ -197,7 +197,7 @@ class GlusterFSSR(FileSR.FileSR):
 
         try:
             self.mount()
-        except GlusterFSException, exc:
+        except GlusterFSException as exc:
             # noinspection PyBroadException
             try:
                 os.rmdir(self.mountpoint)
@@ -214,7 +214,7 @@ class GlusterFSSR(FileSR.FileSR):
             try:
                 util.ioretry(lambda: util.makedirs(self.linkpath))
                 os.symlink(self.linkpath, self.path)
-            except util.CommandException, inst:
+            except util.CommandException as inst:
                 if inst.code != errno.EEXIST:
                     try:
                         self.unmount(self.mountpoint, True)
@@ -235,7 +235,7 @@ class GlusterFSSR(FileSR.FileSR):
             if util.ioretry(lambda: util.pathexists(self.linkpath)):
                 util.ioretry(lambda: os.rmdir(self.linkpath))
             self.unmount(self.mountpoint, True)
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             self.detach(sr_uuid)
             if inst.code != errno.ENOENT:
                 raise SR.SROSError(114, "Failed to remove GlusterFS mount point")
diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index 8be1836..ab1b958 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -460,7 +460,7 @@ class LinstorSR(SR.SR):
         srs = xenapi.SR.get_all_records_where(
             'field "type" = "{}"'.format(self.DRIVER_TYPE)
         )
-        srs = dict(filter(lambda e: e[1]['uuid'] != self.uuid, srs.items()))
+        srs = dict([e for e in srs.items() if e[1]['uuid'] != self.uuid])
 
         for sr in srs.values():
             for pbd in sr['PBDs']:
@@ -1296,7 +1296,7 @@ class LinstorVDI(VDI.VDI):
         assert self.vdi_type
 
         # 2. Compute size and check space available.
-        size = vhdutil.validate_and_round_vhd_size(long(size))
+        size = vhdutil.validate_and_round_vhd_size(int(size))
         util.SMlog('LinstorVDI.create: type={}, size={}'.format(
             self.vdi_type, size
         ))
@@ -1514,7 +1514,7 @@ class LinstorVDI(VDI.VDI):
             raise xs_errors.XenError('VDISize', opterr='shrinking not allowed')
 
         # Compute the virtual VHD size.
-        size = vhdutil.validate_and_round_vhd_size(long(size))
+        size = vhdutil.validate_and_round_vhd_size(int(size))
 
         if size == self.size:
             return VDI.VDI.get_params(self)
@@ -1985,10 +1985,7 @@ class LinstorVDI(VDI.VDI):
             # See: `tap_unpause` in `blktap2.py`.
             vdi_ref = self.session.xenapi.VDI.get_by_uuid(active_uuid)
             sm_config = self.session.xenapi.VDI.get_sm_config(vdi_ref)
-            for key in filter(
-                lambda x: x == 'paused' or x.startswith('host_'),
-                sm_config.keys()
-            ):
+            for key in [x for x in sm_config.keys() if x == 'paused' or x.startswith('host_')]:
                 active_vdi.sm_config[key] = sm_config[key]
 
             # 7. Verify parent locator field of both children and
diff --git a/drivers/MooseFSSR.py b/drivers/MooseFSSR.py
index 212f1ad..8860fdf 100755
--- a/drivers/MooseFSSR.py
+++ b/drivers/MooseFSSR.py
@@ -139,12 +139,12 @@ class MooseFSSR(FileSR.FileSR):
         try:
             if not util.ioretry(lambda: util.isdir(mountpoint)):
                 util.ioretry(lambda: util.makedirs(mountpoint))
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             raise MooseFSException("Failed to make directory: code is %d" % inst.code)
 
         try:
             options = []
-            if self.dconf.has_key('options'):
+            if 'options' in self.dconf:
                 options.append(self.dconf['options'])
             if options:
                 options = ['-o', ','.join(options)]
@@ -153,7 +153,7 @@ class MooseFSSR(FileSR.FileSR):
             )
             command = ["mount", '-t', 'moosefs', remote, mountpoint] + options
             util.ioretry(lambda: util.pread(command), errlist=[errno.EPIPE, errno.EIO], maxretry=2, nofail=True)
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             syslog(_syslog.LOG_ERR, 'MooseFS mount failed ' + inst.__str__())
             raise MooseFSException("Mount failed with return code %d" % inst.code)
 
@@ -171,19 +171,19 @@ class MooseFSSR(FileSR.FileSR):
     def unmount(self, mountpoint, rmmountpoint):
         try:
             util.pread(["umount", mountpoint])
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             raise MooseFSException("Command umount failed with return code %d" % inst.code)
         if rmmountpoint:
             try:
                 os.rmdir(mountpoint)
-            except OSError, inst:
+            except OSError as inst:
                 raise MooseFSException("Command rmdir failed with error '%s'" % inst.strerror)
 
     def attach(self, sr_uuid):
         if not self.checkmount():
             try:
                 self.mount()
-            except MooseFSException, exc:
+            except MooseFSException as exc:
                 raise SR.SROSError(12, exc.errstr)
         self.attached = True
 
@@ -215,7 +215,7 @@ class MooseFSSR(FileSR.FileSR):
         assert self.remotepath == self.rootpath
         try:
             self.mount()
-        except MooseFSException, exc:
+        except MooseFSException as exc:
             # noinspection PyBroadException
             try:
                 os.rmdir(self.mountpoint)
@@ -267,7 +267,7 @@ class MooseFSSR(FileSR.FileSR):
                 if util.ioretry(lambda: util.pathexists(subdir)):
                     util.ioretry(lambda: os.rmdir(subdir))
                 self.detach(sr_uuid)
-        except util.CommandException, inst:
+        except util.CommandException as inst:
             self.detach(sr_uuid)
             if inst.code != errno.ENOENT:
                 raise SR.SROSError(114, "Failed to remove MooseFS mount point")
diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index e32ea63..f190b1b 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -2968,7 +2968,7 @@ class LinstorSR(SR):
 
     def scan(self, force=False):
         all_vdi_info = self._scan(force)
-        for uuid, vdiInfo in all_vdi_info.iteritems():
+        for uuid, vdiInfo in all_vdi_info.items():
             # When vdiInfo is None, the VDI is RAW.
             vdi = self.getVDI(uuid)
             if not vdi:
@@ -3012,7 +3012,7 @@ class LinstorSR(SR):
             error = False
             try:
                 all_vdi_info = self._load_vdi_info()
-                for uuid, vdiInfo in all_vdi_info.iteritems():
+                for uuid, vdiInfo in all_vdi_info.items():
                     if vdiInfo and vdiInfo.error:
                         error = True
                         break
@@ -3077,7 +3077,7 @@ class LinstorSR(SR):
 
     def _handleInterruptedCoalesceLeaf(self):
         entries = self.journaler.get_all(VDI.JRN_LEAF)
-        for uuid, parentUuid in entries.iteritems():
+        for uuid, parentUuid in entries.items():
             if self._hasValidDevicePath(parentUuid) or \
                     self._hasValidDevicePath(self.TMP_RENAME_PREFIX + uuid):
                 self._undoInterruptedCoalesceLeaf(uuid, parentUuid)
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index d400421..dca9645 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -1053,7 +1053,7 @@ class LinstorVolumeManager(object):
         # we can try to use it directly.
         pools = pools.storage_pools
         if pools:
-            existing_node_names = map(lambda pool: pool.node_name, pools)
+            existing_node_names = [pool.node_name for pool in pools]
             raise LinstorVolumeManagerError(
                 'Unable to create SR `{}`. It already exists on node(s): {}'
                 .format(group_name, existing_node_names)
-- 
2.41.0

