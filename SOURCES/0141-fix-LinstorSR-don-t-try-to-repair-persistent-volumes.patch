From 3be63d299ba706e86f1fbcac59d5173967860a2e Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Tue, 24 Oct 2023 11:57:40 +0200
Subject: [PATCH 141/179] fix(LinstorSR): don't try to repair persistent
 volumes in GC

Use constants to simplify maintenance.
---
 drivers/LinstorSR.py            | 21 ++++++++-----
 drivers/cleanup.py              | 54 ++++++++++++++++-----------------
 drivers/linstorvolumemanager.py |  4 ++-
 3 files changed, 43 insertions(+), 36 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index d0fc421..d0ce079 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -23,6 +23,7 @@ try:
     from linstorvolumemanager import get_controller_node_name
     from linstorvolumemanager import LinstorVolumeManager
     from linstorvolumemanager import LinstorVolumeManagerError
+    from linstorvolumemanager import PERSISTENT_PREFIX
 
     LINSTOR_AVAILABLE = True
 except ImportError:
@@ -76,6 +77,10 @@ TRACE_PERFS = False
 # Enable/Disable VHD key hash support.
 USE_KEY_HASH = False
 
+# Special volumes.
+HA_VOLUME_NAME = PERSISTENT_PREFIX + 'ha-statefile'
+REDO_LOG_VOLUME_NAME = PERSISTENT_PREFIX + 'redo-log'
+
 # ==============================================================================
 
 # TODO: Supports 'VDI_INTRODUCE', 'VDI_RESET_ON_BOOT/2', 'SR_TRIM',
@@ -1727,9 +1732,9 @@ class LinstorVDI(VDI.VDI):
         try:
             volume_name = None
             if self.ty == 'ha_statefile':
-                volume_name = 'xcp-persistent-ha-statefile'
+                volume_name = HA_VOLUME_NAME
             elif self.ty == 'redo_log':
-                volume_name = 'xcp-persistent-redo-log'
+                volume_name = REDO_LOG_VOLUME_NAME
 
             self._linstor.create_volume(
                 self.uuid, volume_size, persistent=False,
@@ -2085,7 +2090,7 @@ class LinstorVDI(VDI.VDI):
         # instead.
         volume_name = self._linstor.get_volume_name(self.uuid)
         if not USE_HTTP_NBD_SERVERS or volume_name not in [
-            'xcp-persistent-ha-statefile', 'xcp-persistent-redo-log'
+            HA_VOLUME_NAME, REDO_LOG_VOLUME_NAME
         ]:
             if not self.path or not util.pathexists(self.path):
                 available = False
@@ -2587,7 +2592,7 @@ class LinstorVDI(VDI.VDI):
         http_server = None
 
         try:
-            if volume_name == 'xcp-persistent-ha-statefile':
+            if volume_name == HA_VOLUME_NAME:
                 port = '8076'
             else:
                 port = '8077'
@@ -2669,7 +2674,7 @@ class LinstorVDI(VDI.VDI):
         try:
             # We use a precomputed device size.
             # So if the XAPI is modified, we must update these values!
-            if volume_name == 'xcp-persistent-ha-statefile':
+            if volume_name == HA_VOLUME_NAME:
                 # See: https://github.com/xapi-project/xen-api/blob/703479fa448a8d7141954bb6e8964d8e25c4ac2e/ocaml/xapi/xha_statefile.ml#L32-L37
                 port = '8076'
                 device_size = 4 * 1024 * 1024
@@ -2793,7 +2798,7 @@ class LinstorVDI(VDI.VDI):
     def _check_http_nbd_volume_name(self):
         volume_name = self.path[14:]
         if volume_name not in [
-            'xcp-persistent-ha-statefile', 'xcp-persistent-redo-log'
+            HA_VOLUME_NAME, REDO_LOG_VOLUME_NAME
         ]:
             raise xs_errors.XenError(
                 'VDIUnavailable',
@@ -2862,8 +2867,8 @@ class LinstorVDI(VDI.VDI):
         http_service = None
         if drbd_path:
             assert(drbd_path in (
-                '/dev/drbd/by-res/xcp-persistent-ha-statefile/0',
-                '/dev/drbd/by-res/xcp-persistent-redo-log/0'
+                '/dev/drbd/by-res/{}/0'.format(HA_VOLUME_NAME),
+                '/dev/drbd/by-res/{}/0'.format(REDO_LOG_VOLUME_NAME)
             ))
             self._start_persistent_http_server(volume_name)
 
diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index 4e4620f..1f89822 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -55,6 +55,7 @@ try:
     from linstorvolumemanager import get_controller_uri
     from linstorvolumemanager import LinstorVolumeManager
     from linstorvolumemanager import LinstorVolumeManagerError
+    from linstorvolumemanager import PERSISTENT_PREFIX as LINSTOR_PERSISTENT_PREFIX
 
     LINSTOR_AVAILABLE = True
 except ImportError:
@@ -3004,16 +3005,36 @@ class LinstorSR(SR):
         all_volume_info = self._linstor.get_volumes_with_info()
         volumes_metadata = self._linstor.get_volumes_with_metadata()
         for vdi_uuid, volume_info in all_volume_info.items():
-            deleted = False
             try:
-                if not volume_info.name and \
-                        not list(volumes_metadata[vdi_uuid].items()):
+                volume_metadata = volumes_metadata[vdi_uuid]
+                if not volume_info.name and not list(volume_metadata.items()):
                     continue  # Ignore it, probably deleted.
 
-                vdi_type = volumes_metadata[vdi_uuid].get(VDI_TYPE_TAG)
                 if vdi_uuid.startswith('DELETED_'):
                     # Assume it's really a RAW volume of a failed snap without VHD header/footer.
-                    deleted = True
+                    # We must remove this VDI now without adding it in the VDI list.
+                    # Otherwise `Relinking` calls and other actions can be launched on it.
+                    # We don't want that...
+                    Util.log('Deleting bad VDI {}'.format(vdi_uuid))
+
+                    self.lock()
+                    try:
+                        self._linstor.destroy_volume(vdi_uuid)
+                        try:
+                            self.forgetVDI(vdi_uuid)
+                        except:
+                            pass
+                    except Exception as e:
+                        Util.log('Cannot delete bad VDI: {}'.format(e))
+                    finally:
+                        self.unlock()
+                    continue
+
+                vdi_type = volume_metadata.get(VDI_TYPE_TAG)
+                volume_name = self._linstor.get_volume_name(vdi_uuid)
+                if volume_name.startswith(LINSTOR_PERSISTENT_PREFIX):
+                    # Always RAW!
+                    info = None
                 elif vdi_type == vhdutil.VDI_TYPE_VHD:
                     info = self._vhdutil.get_vhd_info(vdi_uuid)
                 else:
@@ -3037,28 +3058,7 @@ class LinstorSR(SR):
                 info = vhdutil.VHDInfo(vdi_uuid)
                 info.error = 1
 
-            if not deleted:
-                all_vdi_info[vdi_uuid] = info
-                continue
-
-            # We must remove this VDI now without adding it in the VDI list.
-            # Otherwise `Relinking` calls and other actions can be launched on it.
-            # We don't want that...
-            assert deleted
-            assert vdi_uuid.startswith('DELETED_')
-            Util.log('Deleting bad VDI {}'.format(vdi_uuid))
-
-            self.lock()
-            try:
-                self._linstor.destroy_volume(vdi_uuid)
-                try:
-                    self.forgetVDI(vdi_uuid)
-                except:
-                    pass
-            except Exception as e:
-                Util.log('Cannot delete bad VDI: {}'.format(e))
-            finally:
-                self.unlock()
+            all_vdi_info[vdi_uuid] = info
 
         return all_vdi_info
 
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 0f6fbcf..47ca4e8 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -30,9 +30,11 @@ import time
 import util
 import uuid
 
+# Persistent prefix to add to RAW persistent volumes.
+PERSISTENT_PREFIX = 'xcp-persistent-'
 
 # Contains the data of the "/var/lib/linstor" directory.
-DATABASE_VOLUME_NAME = 'xcp-persistent-database'
+DATABASE_VOLUME_NAME = PERSISTENT_PREFIX + 'database'
 DATABASE_SIZE = 1 << 30  # 1GB.
 DATABASE_PATH = '/var/lib/linstor'
 DATABASE_MKFS = 'mkfs.ext4'
-- 
2.46.0

