CP-383791 Fix handling of UTF-8 in srmetadata.py

From: Robin Newton <robin.newton@cloud.com>

* file_write_wrapper and file_read_wrapper now work in bytes, necessitating
  fixing up calls to them in journaler.py.
* unictrunc can now take unicode or byte strings as input, and returns numbers
  of characters or bytes as appropriate.
* In srmetadata.py there is now a stronger demarcation between strings that
  are for storage in a metadata file, which are now all bytes instances, and
  strings that might pass through MetadataHandler's 'public' methods, which
  remain str instances.
* More specifically, when strings from VDI or SR fields need to be truncated
  to avoid XML fragments exceeding a sector, this is handled in terms of UTF-8
  encoded byte strings, rather than unicode strings, so avoiding being
  confused by multibyte encodings.
* Removed expected failure annotations from test_srmetadata.py.

Signed-off-by: Robin Newton <robin.newton@cloud.com>

diff --git a/drivers/journaler.py b/drivers/journaler.py
index 5d4c10a..45b8fe4 100644
--- a/drivers/journaler.py
+++ b/drivers/journaler.py
@@ -63,7 +63,7 @@ class Journaler:
             try:
                 e = None
                 try:
-                    data = "%d %s" % (len(val), val)
+                    data = ("%d %s" % (len(val), val)).encode()
                     file_write_wrapper(journal_file, 0, data)
                     if util.fistpoint.is_active("LVM_journaler_writefail"):
                         raise ValueError("LVM_journaler_writefail FistPoint active")
@@ -150,7 +150,7 @@ class Journaler:
                     try:
                         try:
                             data = file_read_wrapper(journal_file, 0)
-                            length, val = data.split(" ", 1)
+                            length, val = data.decode().split(" ", 1)
                             val = val[:int(length)]
                             if util.fistpoint.is_active("LVM_journaler_readfail"):
                                 raise ValueError("LVM_journaler_readfail FistPoint active")
diff --git a/drivers/srmetadata.py b/drivers/srmetadata.py
index 7518b0e..a1a85ad 100755
--- a/drivers/srmetadata.py
+++ b/drivers/srmetadata.py
@@ -35,8 +35,17 @@ import xml.sax.saxutils
 # having been deleted, in which case the sectors used to contain this info can
 # potentially be reused when a new VDI is subsequently added.
 
+# String data in this module takes the form of normal Python unicode `str`
+# instances, or UTF-8 encoded `bytes`, depending on circumstance. In `dict`
+# instances such as are used to represent SR and VDI info, `str` is used (as
+# these may be returned to, or have been supplied by, this module's callers).
+# Data going into or taken from a metadata file is `bytes`. XML and XML
+# fragments come under this category, so are `bytes`. XML tag names are `str`
+# instances, as these are also used as `dict` keys.
+
+
 SECTOR_SIZE = 512
-XML_HEADER = "<?xml version=\"1.0\" ?>"
+XML_HEADER = b"<?xml version=\"1.0\" ?>"
 MAX_METADATA_LENGTH_SIZE = 10
 OFFSET_TAG = 'offset'
 
@@ -102,13 +111,12 @@ def file_write_wrapper(fd, offset, data):
         if length % blocksize:
             newlength = length + (blocksize - length % blocksize)
         fd.seek(offset, SEEK_SET)
-        to_write = data + ' ' * (newlength - length)
-        result = fd.write(to_write.encode())
+        to_write = data + b' ' * (newlength - length)
+        return fd.write(to_write)
     except OSError as e:
         raise OSError(
             "Failed to write file with params %s. Error: %s" %
             ([fd, offset, blocksize, data], e.errno))
-    return result
 
 
 def file_read_wrapper(fd, offset, bytesToRead=METADATA_BLK_SIZE):
@@ -118,12 +126,19 @@ def file_read_wrapper(fd, offset, bytesToRead=METADATA_BLK_SIZE):
     """
     try:
         fd.seek(offset, SEEK_SET)
-        result = fd.read(bytesToRead)
+        return fd.read(bytesToRead)
     except OSError as e:
         raise OSError(
             "Failed to read file with params %s. Error: %s" %
             ([fd, offset, bytesToRead], e.errno))
-    return result.decode()
+
+
+def to_utf8(s):
+    return s.encode("utf-8")
+
+
+def from_utf8(bs):
+    return bs.decode("utf-8")
 
 
 # get a range which is block aligned, contains 'offset' and allows
@@ -153,17 +168,17 @@ def getBlockAlignedRange(offset, length):
 
 def buildHeader(length, major=metadata.MD_MAJOR, minor=metadata.MD_MINOR):
     len_fmt = "%%-%ds" % MAX_METADATA_LENGTH_SIZE
-    return (metadata.HDR_STRING
-            + HEADER_SEP
-            + (len_fmt % length)
-            + HEADER_SEP
-            + str(major)
-            + HEADER_SEP
-            + str(minor))
+    return to_utf8(metadata.HDR_STRING
+                   + HEADER_SEP
+                   + (len_fmt % length)
+                   + HEADER_SEP
+                   + str(major)
+                   + HEADER_SEP
+                   + str(minor))
 
 
 def unpackHeader(header):
-    vals = header.split(HEADER_SEP)
+    vals = from_utf8(header).split(HEADER_SEP)
     if len(vals) != 4 or vals[0] != metadata.HDR_STRING:
         util.SMlog("Exception unpacking metadata header: "
                    "Error: Bad header '%s'" % (header))
@@ -173,36 +188,40 @@ def unpackHeader(header):
 
 
 def getSector(s):
-    sector_fmt = "%%-%ds" % SECTOR_SIZE
+    sector_fmt = b"%%-%ds" % SECTOR_SIZE
     return sector_fmt % s
 
 
 def buildXMLSector(tagName, value):
     # truncate data if we breach the 512 limit
-    if len("<%s>%s</%s>" % (tagName, value, tagName)) > SECTOR_SIZE:
-        length = util.unictrunc(value, SECTOR_SIZE - 2 * len(tagName) - 5)
-        util.SMlog('warning: SR ' + tagName + ' truncated from ' \
-                + str(len(value)) + ' to ' + str(length) + ' bytes')
-        value = value[:length]
+    tag_bytes = to_utf8(tagName)
+    value_bytes = to_utf8(value)
+
+    elt = b"<%s>%s</%s>" % (tag_bytes, value_bytes, tag_bytes)
+    if len(elt) > SECTOR_SIZE:
+        length = util.unictrunc(value_bytes, SECTOR_SIZE - 2 * len(tag_bytes) - 5)
+        util.SMlog('warning: SR %s truncated from %d to %d bytes'
+                   % (tagName, len(value_bytes), length))
+        elt = b"<%s>%s</%s>" % (tag_bytes, value_bytes[:length], tag_bytes)
 
-    return getSector("<%s>%s</%s>" % (tagName, value, tagName))
+    return getSector(elt)
 
 
 def buildXMLElement(tag, value_dict):
-    return "<%s>%s</%s>" % (tag, value_dict[tag], tag)
+    return to_utf8("<%s>%s</%s>" % (tag, value_dict[tag], tag))
 
 
 def openingTag(tag):
-    return "<%s>" % tag
+    return b"<%s>" % to_utf8(tag)
 
 
 def closingTag(tag):
-    return "</%s>" % tag
+    return b"</%s>" % to_utf8(tag)
 
 
 def buildParsableMetadataXML(info):
-    tag = metadata.XML_TAG
-    return "%s<%s>%s</%s>" % (XML_HEADER, tag, info, tag)
+    tag = to_utf8(metadata.XML_TAG)
+    return b"%s<%s>%s</%s>" % (XML_HEADER, tag, info, tag)
 
 
 def updateLengthInHeader(fd, length, major=metadata.MD_MAJOR, \
@@ -225,8 +244,7 @@ def getMetadataLength(fd):
         sector1 = \
             file_read_wrapper(fd, 0, SECTOR_SIZE).strip()
         hdr = unpackHeader(sector1)
-        len = int(hdr[1])
-        return len
+        return int(hdr[1])
     except Exception as e:
         util.SMlog("Exception getting metadata length: "
                    "Error: %s" % str(e))
@@ -393,10 +411,10 @@ class MetadataHandler:
     # common functions with some details derived from the child class
     def generateVDIsForRange(self, vdi_info, lower, upper, update_map={}, \
                              offset=0):
-        value = ''
         if not len(vdi_info.keys()) or offset not in vdi_info:
             return self.getVdiInfo(update_map)
 
+        value = b""
         for vdi_offset in vdi_info.keys():
             if vdi_offset < lower:
                 continue
@@ -474,7 +492,7 @@ class MetadataHandler:
             offset = SECTOR_SIZE + len(XML_HEADER)
             sr_info = metadataxml[offset: SECTOR_SIZE * 4]
             offset = SECTOR_SIZE * 4
-            sr_info = sr_info.replace('\x00', '')
+            sr_info = sr_info.replace(b'\x00', b'')
 
             parsable_metadata = buildParsableMetadataXML(sr_info)
             retmap['sr_info'] = metadata._parseXML(parsable_metadata)
@@ -488,7 +506,7 @@ class MetadataHandler:
             # Now look at the VDI objects
             while offset < upper:
                 vdi_info = metadataxml[offset:offset + self.vdi_info_size]
-                vdi_info = vdi_info.replace('\x00', '')
+                vdi_info = vdi_info.replace(b'\x00', b'')
                 parsable_metadata = buildParsableMetadataXML(vdi_info)
                 vdi_info_map = metadata._parseXML(parsable_metadata)[VDI_TAG]
                 vdi_info_map[OFFSET_TAG] = offset
@@ -532,7 +550,7 @@ class MetadataHandler:
     def updateSR(self, Dict):
         util.SMlog('entering updateSR')
 
-        value = ''
+        value = b""
 
         # Find the offset depending on what we are updating
         diff = set(Dict.keys()) - set(ATOMIC_UPDATE_PARAMS_AND_OFFSET.keys())
@@ -614,7 +632,7 @@ class MetadataHandler:
                            offset):
         util.SMlog("Entering getMetadataToWrite")
         try:
-            value = ''
+            value = b""
             vdi_map = {}
 
             # if lower is less than SR info
@@ -640,10 +658,10 @@ class MetadataHandler:
 
     # specific functions, to be implement by the child classes
     def getVdiInfo(self, Dict, generateSector=0):
-        return ''
+        return b""
 
     def getSRInfoForSectors(self, sr_info, range):
-        return ''
+        return b""
 
 
 class LVMMetadataHandler(MetadataHandler):
@@ -690,40 +708,32 @@ class LVMMetadataHandler(MetadataHandler):
     def getVdiInfo(self, Dict, generateSector=0):
         util.SMlog("Entering VDI info")
         try:
-            vdi_info = ''
+            vdi_info = b""
             # HP split into 2 functions, 1 for generating the first 2 sectors,
             # which will be called by all classes
             # and one specific to this class
             if generateSector == 1 or generateSector == 0:
-                Dict[NAME_LABEL_TAG] = \
-                        xml.sax.saxutils.escape(Dict[NAME_LABEL_TAG])
-                Dict[NAME_DESCRIPTION_TAG] = \
-                        xml.sax.saxutils.escape(Dict[NAME_DESCRIPTION_TAG])
-                if len(Dict[NAME_LABEL_TAG]) + len(Dict[NAME_DESCRIPTION_TAG]) > \
-                        MAX_VDI_NAME_LABEL_DESC_LENGTH:
-                    if len(Dict[NAME_LABEL_TAG]) > MAX_VDI_NAME_LABEL_DESC_LENGTH // 2:
-                        length = util.unictrunc(
-                            Dict[NAME_LABEL_TAG],
-                            MAX_VDI_NAME_LABEL_DESC_LENGTH // 2)
-
-                        util.SMlog('warning: name-label truncated from ' +
-                                   str(len(Dict[NAME_LABEL_TAG])) + ' to ' +
-                                   str(length) + ' bytes')
-
-                        Dict[NAME_LABEL_TAG] = Dict[NAME_LABEL_TAG][:length]
-
-                    if (len(Dict[NAME_DESCRIPTION_TAG]) >
-                            MAX_VDI_NAME_LABEL_DESC_LENGTH // 2):
-                        length = util.unictrunc(
-                            Dict[NAME_DESCRIPTION_TAG],
-                            MAX_VDI_NAME_LABEL_DESC_LENGTH // 2)
-
-                        util.SMlog('warning: description truncated from ' +
-                                   str(len(Dict[NAME_DESCRIPTION_TAG])) +
-                                   ' to ' + str(length) + ' bytes')
-
-                        Dict[NAME_DESCRIPTION_TAG] = \
-                                Dict[NAME_DESCRIPTION_TAG][:length]
+                label = xml.sax.saxutils.escape(Dict[NAME_LABEL_TAG])
+                desc = xml.sax.saxutils.escape(Dict[NAME_DESCRIPTION_TAG])
+                label_length = len(to_utf8(label))
+                desc_length = len(to_utf8(desc))
+
+                if label_length + desc_length > MAX_VDI_NAME_LABEL_DESC_LENGTH:
+                    limit = MAX_VDI_NAME_LABEL_DESC_LENGTH // 2
+                    if label_length > limit:
+                        label = label[:util.unictrunc(label, limit)]
+                        util.SMlog('warning: name-label truncated from '
+                                   '%d to %d bytes'
+                                   % (label_length, len(to_utf8(label))))
+
+                    if desc_length > limit:
+                        desc = desc[:util.unictrunc(desc, limit)]
+                        util.SMlog('warning: description truncated from '
+                                   '%d to %d bytes'
+                                   % (desc_length, len(to_utf8(desc))))
+
+                Dict[NAME_LABEL_TAG] = label
+                Dict[NAME_DESCRIPTION_TAG] = desc
 
                 # Fill the open struct and write it
                 vdi_info += getSector(openingTag(VDI_TAG)
@@ -732,7 +742,7 @@ class LVMMetadataHandler(MetadataHandler):
                                                         Dict))
 
             if generateSector == 2 or generateSector == 0:
-                sector2 = ''
+                sector2 = b""
 
                 if VDI_DELETED_TAG not in Dict:
                     Dict.update({VDI_DELETED_TAG: '0'})
@@ -752,7 +762,7 @@ class LVMMetadataHandler(MetadataHandler):
             raise
 
     def getSRInfoForSectors(self, sr_info, range):
-        srinfo = ''
+        srinfo = b""
 
         try:
             # write header, name_labael and description in that function
diff --git a/drivers/util.py b/drivers/util.py
index a067be1..ea5f89d 100755
--- a/drivers/util.py
+++ b/drivers/util.py
@@ -1722,20 +1722,35 @@ def isLegalXMLString(s):
 
 def unictrunc(string, max_bytes):
     """
-    Returns the number of bytes that is smaller than, or equal to, the number
-    of bytes specified, such that the UTF-8 encoded string can be correctly
-    truncated.
+    Given a string, returns the largest number of elements for a prefix
+    substring of it, such that the UTF-8 encoding of this substring takes no
+    more than the given number of bytes.
+
+    The string may be given as a unicode string or a UTF-8 encoded byte
+    string, and the number returned will be in characters or bytes
+    accordingly.  Note that in the latter case, the substring will still be a
+    valid UTF-8 encoded string (which is to say, it won't have been truncated
+    part way through a multibyte sequence for a unicode character).
+
     string: the string to truncate
     max_bytes: the maximum number of bytes the truncated string can be
     """
+    if isinstance(string, str):
+        return_chars = True
+    else:
+        return_chars = False
+        string = string.decode('UTF-8')
+
+    cur_chars = 0
     cur_bytes = 0
     for char in string:
         charsize = len(char.encode('UTF-8'))
         if cur_bytes + charsize > max_bytes:
             break
         else:
-            cur_bytes = cur_bytes + charsize
-    return cur_bytes
+            cur_chars += 1
+            cur_bytes += charsize
+    return cur_chars if return_chars else cur_bytes
 
 
 def hideValuesInPropMap(propmap, propnames):
diff --git a/tests/test_srmetadata.py b/tests/test_srmetadata.py
index 7944108..ed91915 100644
--- a/tests/test_srmetadata.py
+++ b/tests/test_srmetadata.py
@@ -14,7 +14,7 @@ from srmetadata import (LVMMetadataHandler, buildHeader, buildXMLSector,
 class TestSRMetadataFunctions(unittest.TestCase):
     def test_unpackHeader(self):
         # Given
-        header = "XSSM:4096      :1:2" + (' ' * 493)
+        header = b"XSSM:4096      :1:2" + (b' ' * 493)
 
         # When
         hdr_string, length, major, minor = unpackHeader(header)
@@ -54,9 +54,9 @@ class TestSRMetadataFunctions(unittest.TestCase):
         xml3 = buildXMLSector(tag_name, value3)
 
         # Then
-        self.assertEqual(xml1, "<blah>%s</blah>" % value1)
+        self.assertEqual(xml1.decode("utf8"), "<blah>%s</blah>" % value1)
         self.assertEqual(xml2, xml1)
-        self.assertEqual(xml3,
+        self.assertEqual(xml3.decode("utf8"),
                          "<blah>%s</blah>" % value3 + " " * value3_deficit)
 
     def test_getMetadataLength(self):
@@ -310,9 +310,8 @@ class TestLVMMetadataHandler(unittest.TestCase):
         self.assertEqual(set(retrieved_description), set(vdi3_description))
         self.assertLess(len(retrieved_description), len(vdi3_description))
 
-    @unittest.expectedFailure
     @with_lvm_test_context
-    def test_long_non_ascii_names_truncated(self): # pragma: no cover
+    def test_long_non_ascii_names_truncated(self):
         # Given
         self.make_handler().writeMetadata(self.make_sr_info(), {})
 
@@ -354,7 +353,6 @@ class TestLVMMetadataHandler(unittest.TestCase):
         self.assertEqual(set(retrieved_description), set(vdi2_description))
         self.assertLess(len(retrieved_description), len(vdi2_description))
 
-    @unittest.expectedFailure
     @with_lvm_test_context
     def test_CA383791(self):
         # Given
@@ -369,7 +367,7 @@ class TestLVMMetadataHandler(unittest.TestCase):
         caught = None
         try:
             self.make_handler().ensureSpaceIsAvailableForVdis(1)
-        except Exception as e:
+        except Exception as e: # pragma: no cover
             caught = e
 
         # Then
@@ -466,7 +464,7 @@ class LVMMetadataTestContext(testlib.TestContext):
         yield self.METADATA_PATH
 
     def fake_open(self, fname, mode='r'):
-        if fname != self.METADATA_PATH:
+        if fname != self.METADATA_PATH: # pragma: no cover
             return super().fake_open(fname, mode)
         else:
             return LVMMetadataFile.open(self, mode)
diff --git a/tests/test_util.py b/tests/test_util.py
index 875a074..4bfb688 100644
--- a/tests/test_util.py
+++ b/tests/test_util.py
@@ -687,7 +687,8 @@ class TestUtil(unittest.TestCase):
         # Successive chars in this string have 1, 2, 3, and 4 byte encodings.
         # So the number of bytes required to encode some prefix of it will be
         # a triangle number.
-        s = "X\u00f6\u732b\U0001f3f9"
+        t = "X\u00f6\u732b\U0001f3f9"
+        s = "X\u00f6\u732b\U0001f3f9".encode("utf-8")
 
         self.assertEqual(util.unictrunc(s, 10), 10)
         self.assertEqual(util.unictrunc(s, 9), 6)
@@ -700,3 +701,15 @@ class TestUtil(unittest.TestCase):
         self.assertEqual(util.unictrunc(s, 2), 1)
         self.assertEqual(util.unictrunc(s, 1), 1)
         self.assertEqual(util.unictrunc(s, 0), 0)
+
+        self.assertEqual(util.unictrunc(t, 10), 4)
+        self.assertEqual(util.unictrunc(t, 9), 3)
+        self.assertEqual(util.unictrunc(t, 8), 3)
+        self.assertEqual(util.unictrunc(t, 7), 3)
+        self.assertEqual(util.unictrunc(t, 6), 3)
+        self.assertEqual(util.unictrunc(t, 5), 2)
+        self.assertEqual(util.unictrunc(t, 4), 2)
+        self.assertEqual(util.unictrunc(t, 3), 2)
+        self.assertEqual(util.unictrunc(t, 2), 1)
+        self.assertEqual(util.unictrunc(t, 1), 1)
+        self.assertEqual(util.unictrunc(t, 0), 0)
