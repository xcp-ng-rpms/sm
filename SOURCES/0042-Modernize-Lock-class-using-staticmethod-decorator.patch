From c5ddfc7a86d9eff5d5622c6bb66b3cc10182d955 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Tue, 15 Oct 2024 15:15:02 +0200
Subject: [PATCH] Modernize Lock class using `staticmethod` decorator

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/lock.py | 13 ++++++-------
 1 file changed, 6 insertions(+), 7 deletions(-)

diff --git a/drivers/lock.py b/drivers/lock.py
index ceb48fe1..56bf9fcc 100755
--- a/drivers/lock.py
+++ b/drivers/lock.py
@@ -64,6 +64,7 @@ class Lock(object):
     def held(self):
         raise NotImplementedError("Lock methods implemented in LockImplementation")
 
+    @staticmethod
     def _mknamespace(ns):
 
         if ns is None:
@@ -72,7 +73,6 @@ class Lock(object):
         assert not ns.startswith(".")
         assert ns.find(os.path.sep) < 0
         return ns
-    _mknamespace = staticmethod(_mknamespace)
 
     @staticmethod
     def clearAll():
@@ -82,6 +82,7 @@ class Lock(object):
         Lock.INSTANCES = {}
         Lock.BASE_INSTANCES = {}
 
+    @staticmethod
     def cleanup(name, ns=None):
         if ns:
             if ns in Lock.INSTANCES:
@@ -97,8 +98,7 @@ class Lock(object):
         if os.path.exists(path):
             Lock._unlink(path)
 
-    cleanup = staticmethod(cleanup)
-
+    @staticmethod
     def cleanupAll(ns=None):
         ns = Lock._mknamespace(ns)
         nspath = os.path.join(Lock.BASE_DIR, ns)
@@ -112,11 +112,11 @@ class Lock(object):
 
         Lock._rmdir(nspath)
 
-    cleanupAll = staticmethod(cleanupAll)
     #
     # Lock and attribute file management
     #
 
+    @staticmethod
     def _mkdirs(path):
         """Concurrent makedirs() catching EEXIST."""
         if os.path.exists(path):
@@ -126,8 +126,8 @@ class Lock(object):
         except OSError as e:
             if e.errno != errno.EEXIST:
                 raise LockException("Failed to makedirs(%s)" % path)
-    _mkdirs = staticmethod(_mkdirs)
 
+    @staticmethod
     def _unlink(path):
         """Non-raising unlink()."""
         util.SMlog("lock: unlinking lock file %s" % path)
@@ -135,8 +135,8 @@ class Lock(object):
             os.unlink(path)
         except Exception as e:
             util.SMlog("Failed to unlink(%s): %s" % (path, e))
-    _unlink = staticmethod(_unlink)
 
+    @staticmethod
     def _rmdir(path):
         """Non-raising rmdir()."""
         util.SMlog("lock: removing lock dir %s" % path)
@@ -144,7 +144,6 @@ class Lock(object):
             os.rmdir(path)
         except Exception as e:
             util.SMlog("Failed to rmdir(%s): %s" % (path, e))
-    _rmdir = staticmethod(_rmdir)
 
 
 class LockImplementation(object):
