From 36830da8767f0fa96b8759b7c60318def42c3d77 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@gmail.com>
Date: Thu, 23 Jun 2022 10:36:36 +0200
Subject: [PATCH] Fix is_open call for many drivers (#25)

Ensure all shared drivers are imported in `_is_open` definition to register
them in the driver list. Otherwise this function always fails with a SRUnknownType exception.

Also, we must add two fake mandatory parameters to make MooseFS happy: `masterhost` and `rootpath`.
Same for CephFS with: `serverpath`. (NFS driver is directly patched to ensure there is no usage of
the `serverpath` param because its value is equal to None.)

`location` param is required to use ZFS, to be more precise, in the parent class: `FileSR`.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/GlusterFSSR.py |  3 ++-
 drivers/NFSSR.py       | 12 ++++++++----
 drivers/on_slave.py    | 17 +++++++++++++++--
 3 files changed, 25 insertions(+), 7 deletions(-)

Index: sm-3.2.12/drivers/GlusterFSSR.py
===================================================================
--- sm-3.2.12.orig/drivers/GlusterFSSR.py
+++ sm-3.2.12/drivers/GlusterFSSR.py
@@ -96,7 +96,8 @@ class GlusterFSSR(FileSR.FileSR):
         self.driver_config = DRIVER_CONFIG
         if 'server' not in self.dconf:
             raise xs_errors.XenError('ConfigServerMissing')
-        self.remoteserver = self.dconf['server']
+        # Can be None => on-slave plugin hack (is_open function).
+        self.remoteserver = self.dconf['server'] or ''
         if self.sr_ref and self.session is not None:
             self.sm_config = self.session.xenapi.SR.get_sm_config(self.sr_ref)
         else:
Index: sm-3.2.12/drivers/NFSSR.py
===================================================================
--- sm-3.2.12.orig/drivers/NFSSR.py
+++ sm-3.2.12/drivers/NFSSR.py
@@ -88,9 +88,12 @@ class NFSSR(FileSR.SharedFileSR):
             self.sm_config = self.srcmd.params.get('sr_sm_config') or {}
             self.other_config = self.srcmd.params.get('sr_other_config') or {}
         self.nosubdir = self.sm_config.get('nosubdir') == "true"
-        if 'serverpath' in self.dconf:
-            self.remotepath = os.path.join(self.dconf['serverpath'],
-                    not self.nosubdir and sr_uuid or "")
+        serverpath = self.dconf.get('serverpath')
+        if serverpath is not None:
+            self.remotepath = os.path.join(
+                serverpath,
+                not self.nosubdir and sr_uuid or ""
+            )
         self.path = os.path.join(SR.MOUNT_BASE, sr_uuid)
 
         # Handle optional dconf attributes
@@ -102,7 +105,8 @@ class NFSSR(FileSR.SharedFileSR):
             self.options = ''
 
     def validate_remotepath(self, scan):
-        if 'serverpath' not in self.dconf:
+        serverpath = self.dconf.get('serverpath')
+        if serverpath is None:
             if scan:
                 try:
                     self.scan_exports(self.dconf['server'])
Index: sm-3.2.12/drivers/on_slave.py
===================================================================
--- sm-3.2.12.orig/drivers/on_slave.py
+++ sm-3.2.12/drivers/on_slave.py
@@ -76,9 +76,14 @@ def _is_open(session, args):
     """Check if VDI <args["vdiUuid"]> is open by a tapdisk on this host"""
     import SRCommand
     import SR
-    import NFSSR
+    import CephFSSR
     import EXTSR
+    import GlusterFSSR
     import LVHDSR
+    import MooseFSSR
+    import NFSSR
+    import XFSSR
+    import ZFSSR
     import blktap2
 
     util.SMlog("on-slave.is_open: %s" % args)
@@ -93,7 +98,15 @@ def _is_open(session, args):
         srType = "lvhd"
     cmd = SRCommand.SRCommand(None)
     cmd.driver_info = {"capabilities": None}
-    cmd.dconf = {"server": None, "device": "/HACK"}
+    cmd.dconf = {
+        "server": None,
+        "device": "/HACK",
+        # Hack for custom XCP-ng drivers.
+        "masterhost": None,  # MooseFS
+        "rootpath": None,    # MooseFS
+        "serverpath": None,  # CephFS
+        "location": "/HACK"  # ZFS
+    }
     cmd.params = {"command": None}
 
     driver = SR.driver(srType)
