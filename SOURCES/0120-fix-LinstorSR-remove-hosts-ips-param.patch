From ce7503b8489735c12b3bb5eb48c4e8937c1c4765 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Tue, 30 May 2023 11:19:13 +0200
Subject: [PATCH 120/178] fix(LinstorSR): remove hosts/ips param

---
 drivers/LinstorSR.py            | 47 +++++----------------------------
 drivers/linstorvolumemanager.py | 11 +++-----
 2 files changed, 11 insertions(+), 47 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index 8c0b007..7a9cbac 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -100,8 +100,6 @@ CAPABILITIES = [
 
 CONFIGURATION = [
     ['group-name', 'LVM group name'],
-    ['hosts', 'host names to use'],
-    ['ips', 'ips to use (optional, defaults to management networks)'],
     ['redundancy', 'replication count'],
     ['provisioning', '"thin" or "thick" are accepted (optional, defaults to thin)'],
     ['monitor-db-quorum', 'disable controller when only one host is online (optional, defaults to true)']
@@ -353,7 +351,6 @@ def activate_lvm_group(group_name):
 # Usage example:
 # xe sr-create type=linstor name-label=linstor-sr
 # host-uuid=d2deba7a-c5ad-4de1-9a20-5c8df3343e93
-# device-config:hosts=node-linstor1,node-linstor2,node-linstor3
 # device-config:group-name=vg_loop device-config:redundancy=2
 
 
@@ -385,8 +382,6 @@ class LinstorSR(SR.SR):
             )
 
         # Check parameters.
-        if 'hosts' not in self.dconf or not self.dconf['hosts']:
-            raise xs_errors.XenError('LinstorConfigHostsMissing')
         if 'group-name' not in self.dconf or not self.dconf['group-name']:
             raise xs_errors.XenError('LinstorConfigGroupNameMissing')
         if 'redundancy' not in self.dconf or not self.dconf['redundancy']:
@@ -431,12 +426,6 @@ class LinstorSR(SR.SR):
         self.lock = Lock(vhdutil.LOCK_TYPE_SR, self.uuid)
         self.sr_vditype = SR.DEFAULT_TAP
 
-        self._hosts = list(set(self.dconf['hosts'].split(',')))
-        if 'ips' not in self.dconf or not self.dconf['ips']:
-            self._ips = None
-        else:
-            self._ips = self.dconf['ips'].split(',')
-
         if self.cmd == 'sr_create':
             self._redundancy = int(self.dconf['redundancy']) or 1
         self._linstor = None  # Ensure that LINSTOR attribute exists.
@@ -647,7 +636,8 @@ class LinstorSR(SR.SR):
     def create(self, uuid, size):
         util.SMlog('LinstorSR.create for {}'.format(self.uuid))
 
-        if self._redundancy > len(self._hosts):
+        host_adresses = util.get_host_addresses(self.session)
+        if self._redundancy > len(host_adresses):
             raise xs_errors.XenError(
                 'LinstorSRCreate',
                 opterr='Redundancy greater than host count'
@@ -676,39 +666,17 @@ class LinstorSR(SR.SR):
             )
 
         online_hosts = util.get_online_hosts(self.session)
-        if len(online_hosts) < len(self._hosts):
+        if len(online_hosts) < len(host_adresses):
             raise xs_errors.XenError(
                 'LinstorSRCreate',
                 opterr='Not enough online hosts'
             )
 
         ips = {}
-        if not self._ips:
-            for host in online_hosts:
-                record = self.session.xenapi.host.get_record(host)
-                hostname = record['hostname']
-                if hostname in self._hosts:
-                    ips[hostname] = record['address']
-        elif len(self._ips) != len(self._hosts):
-            raise xs_errors.XenError(
-                'LinstorSRCreate',
-                opterr='ips must be equal to host count'
-            )
-        else:
-            for host in online_hosts:
-                record = self.session.xenapi.host.get_record(host)
-                hostname = record['hostname']
-                try:
-                    index = self._hosts.index(hostname)
-                    ips[hostname] = self._ips[index]
-                except ValueError as e:
-                    pass
-
-        if len(ips) != len(self._hosts):
-            raise xs_errors.XenError(
-                'LinstorSRCreate',
-                opterr='Not enough online hosts'
-            )
+        for host_ref in online_hosts:
+            record = self.session.xenapi.host.get_record(host_ref)
+            hostname = record['hostname']
+            ips[hostname] = record['address']
 
         # Ensure ports are opened and LINSTOR satellites
         # are activated. In the same time the drbd-reactor instances
@@ -720,7 +688,6 @@ class LinstorSR(SR.SR):
         try:
             self._linstor = LinstorVolumeManager.create_sr(
                 self._group_name,
-                self._hosts,
                 ips,
                 self._redundancy,
                 thin_provisioning=self._provisioning == 'thin',
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 6f20c02..464ab2c 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -1588,14 +1588,13 @@ class LinstorVolumeManager(object):
 
     @classmethod
     def create_sr(
-        cls, group_name, node_names, ips, redundancy,
+        cls, group_name, ips, redundancy,
         thin_provisioning, auto_quorum,
         logger=default_logger.__func__
     ):
         """
         Create a new SR on the given nodes.
         :param str group_name: The SR group_name to use.
-        :param list[str] node_names: String list of nodes.
         :param set(str) ips: Node ips.
         :param int redundancy: How many copy of volumes should we store?
         :param bool thin_provisioning: Use thin or thick provisioning.
@@ -1609,7 +1608,6 @@ class LinstorVolumeManager(object):
             cls._start_controller(start=True)
             sr = cls._create_sr(
                 group_name,
-                node_names,
                 ips,
                 redundancy,
                 thin_provisioning,
@@ -1630,7 +1628,7 @@ class LinstorVolumeManager(object):
 
     @classmethod
     def _create_sr(
-        cls, group_name, node_names, ips, redundancy,
+        cls, group_name, ips, redundancy,
         thin_provisioning, auto_quorum,
         logger=default_logger.__func__
     ):
@@ -1639,9 +1637,8 @@ class LinstorVolumeManager(object):
 
         lin = cls._create_linstor_instance(uri, keep_uri_unmodified=True)
 
-        for node_name in node_names:
-            ip = ips[node_name]
-
+        node_names = ips.keys()
+        for node_name, ip in ips.iteritems():
             while True:
                 # Try to create node.
                 result = lin.node_create(
-- 
2.45.2

