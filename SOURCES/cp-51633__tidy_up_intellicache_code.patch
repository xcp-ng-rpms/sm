CP-51633: tidy up Intellicache code

From: Mark Syms <mark.syms@cloud.com>

Use the existing instantiated objects for VDI and SR rather than
creating new ones with explicit class calls.

Tidy up some of the module imports.

Remove unnecessary line end breaks and realign indentation.

Signed-off-by: Mark Syms <mark.syms@cloud.com>

diff --git a/drivers/blktap2.py b/drivers/blktap2.py
index e9887c8..a2adfe9 100755
--- a/drivers/blktap2.py
+++ b/drivers/blktap2.py
@@ -38,7 +38,6 @@ import XenAPI # pylint: disable=import-error
 import scsiutil
 from syslog import openlog, syslog
 from stat import *  # S_ISBLK(), ...
-import nfs
 
 import resetvdis
 import vhdutil
@@ -1025,8 +1024,6 @@ class VDI(object):
 
     @classmethod
     def from_cli(cls, uuid):
-        import VDI as sm
-
         session = XenAPI.xapi_local()
         session.xenapi.login_with_password('root', '', '', 'SM')
 
@@ -1744,8 +1741,6 @@ class VDI(object):
             pass  # nothing to do
 
     def _deactivate(self, sr_uuid, vdi_uuid, caching_params):
-        import VDI as sm
-
         # Shutdown tapdisk
         back_link = self.BackendLink.from_uuid(sr_uuid, vdi_uuid)
 
@@ -1876,20 +1871,14 @@ class VDI(object):
             scratch_mode, options):
         import SR
         import EXTSR
-        import NFSSR
-        from lock import Lock
-        from FileSR import FileVDI
-
-        parent_uuid = vhdutil.getParent(self.target.vdi.path,
-                FileVDI.extractUuid)
-        if not parent_uuid:
-            util.SMlog("ERROR: VDI %s has no parent, not enabling" % \
-                    self.target.vdi.uuid)
+
+        if self._no_parent(self.target.vdi):
+            util.SMlog("ERROR: VDI %s has no parent, not enabling" %
+                       self.target.vdi.uuid)
             return
 
         util.SMlog("Setting up cache")
-        parent_uuid = parent_uuid.strip()
-        shared_target = NFSSR.NFSFileVDI(self.target.vdi.sr, parent_uuid)
+        shared_target = self.target.vdi.sr.vdi(self.target.vdi.parent)
 
         if shared_target.parent:
             util.SMlog("ERROR: Parent VDI %s has parent, not enabling" %
@@ -1899,14 +1888,14 @@ class VDI(object):
         SR.registerSR(EXTSR.EXTSR)
         local_sr = SR.SR.from_uuid(session, local_sr_uuid)
 
-        lock = Lock(self.LOCK_CACHE_SETUP, parent_uuid)
+        lock = Lock(self.LOCK_CACHE_SETUP, shared_target.uuid)
         lock.acquire()
 
         # read cache
         read_cache_path = "%s/%s.vhdcache" % (local_sr.path, shared_target.uuid)
         if util.pathexists(read_cache_path):
-            util.SMlog("Read cache node (%s) already exists, not creating" % \
-                    read_cache_path)
+            util.SMlog("Read cache node (%s) already exists, not creating" %
+                       read_cache_path)
         else:
             try:
                 vhdutil.snapshot(read_cache_path, shared_target.path, False)
@@ -1920,8 +1909,8 @@ class VDI(object):
         local_leaf_path = "%s/%s.vhdcache" % \
                 (local_sr.path, self.target.vdi.uuid)
         if util.pathexists(local_leaf_path):
-            util.SMlog("Local leaf node (%s) already exists, deleting" % \
-                    local_leaf_path)
+            util.SMlog("Local leaf node (%s) already exists, deleting" %
+                       local_leaf_path)
             os.unlink(local_leaf_path)
         try:
             vhdutil.snapshot(local_leaf_path, read_cache_path, False,
@@ -1934,11 +1923,9 @@ class VDI(object):
         local_leaf_size = vhdutil.getSizeVirt(local_leaf_path)
         if leaf_size > local_leaf_size:
             util.SMlog("Leaf size %d > local leaf cache size %d, resizing" %
-                    (leaf_size, local_leaf_size))
+                       (leaf_size, local_leaf_size))
             vhdutil.setSizeVirtFast(local_leaf_path, leaf_size)
 
-        vdi_type = self.target.get_vdi_type()
-
         prt_tapdisk = Tapdisk.find_by_path(read_cache_path)
         if not prt_tapdisk:
             parent_options = copy.deepcopy(options)
@@ -1980,8 +1967,8 @@ class VDI(object):
 
         lock.release()
 
-        util.SMlog("Local read cache: %s, local leaf: %s" % \
-                (read_cache_path, local_leaf_path))
+        util.SMlog("Local read cache: %s, local leaf: %s" %
+                   (read_cache_path, local_leaf_path))
 
         self.tap = leaf_tapdisk
         return leaf_tapdisk.get_devpath()
@@ -2023,26 +2010,20 @@ class VDI(object):
     def _remove_cache(self, session, local_sr_uuid):
         import SR
         import EXTSR
-        import NFSSR
-        from lock import Lock
-        from FileSR import FileVDI
-
-        parent_uuid = vhdutil.getParent(self.target.vdi.path,
-                FileVDI.extractUuid)
-        if not parent_uuid:
-            util.SMlog("ERROR: No parent for VDI %s, ignore" % \
-                    self.target.vdi.uuid)
+
+        if self._no_parent(self.target.vdi):
+            util.SMlog("ERROR: No parent for VDI %s, ignore" %
+                       self.target.vdi.uuid)
             return
 
         util.SMlog("Tearing down the cache")
 
-        parent_uuid = parent_uuid.strip()
-        shared_target = NFSSR.NFSFileVDI(self.target.vdi.sr, parent_uuid)
+        shared_target = self.target.vdi.sr.vdi(self.target.vdi.parent)
 
         SR.registerSR(EXTSR.EXTSR)
         local_sr = SR.SR.from_uuid(session, local_sr_uuid)
 
-        lock = Lock(self.LOCK_CACHE_SETUP, parent_uuid)
+        lock = Lock(self.LOCK_CACHE_SETUP, shared_target.uuid)
         lock.acquire()
 
         # local write node
@@ -2057,8 +2038,8 @@ class VDI(object):
         if not prt_tapdisk:
             util.SMlog("Parent tapdisk not found")
         elif not self._is_tapdisk_in_use(prt_tapdisk.minor):
-            util.SMlog("Parent tapdisk not in use: shutting down %s" % \
-                    read_cache_path)
+            util.SMlog("Parent tapdisk not in use: shutting down %s" %
+                       read_cache_path)
             try:
                 prt_tapdisk.shutdown()
             except:
@@ -2070,6 +2051,11 @@ class VDI(object):
 
         lock.release()
 
+    @staticmethod
+    def _no_parent(vdi):
+        return vdi.parent is None or vdi.parent == ''
+
+
 PythonKeyError = KeyError
 
 
