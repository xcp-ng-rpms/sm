From 2bf415703e247e502c8e036ce9a3216888ceab37 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 25 Aug 2022 12:11:18 +0200
Subject: [PATCH 072/179] feat(LinstorSR): support cProfile to trace calls when
 a command is executed

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py | 11 ++++++++++-
 drivers/util.py      | 42 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 52 insertions(+), 1 deletion(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index e5f6f85..00554d7 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -69,6 +69,9 @@ FORK_LOG_DAEMON = '/opt/xensource/libexec/fork-log-daemon'
 # - The other hearbeat volumes must be diskful and limited to a maximum of 3.
 USE_HTTP_NBD_SERVERS = True
 
+# Useful flag to trace calls using cProfile.
+TRACE_PERFS = False
+
 # ==============================================================================
 
 # TODO: Supports 'VDI_INTRODUCE', 'VDI_RESET_ON_BOOT/2', 'SR_TRIM',
@@ -2779,6 +2782,12 @@ class LinstorVDI(VDI.VDI):
 
 
 if __name__ == '__main__':
-    SRCommand.run(LinstorSR, DRIVER_INFO)
+    def run():
+        SRCommand.run(LinstorSR, DRIVER_INFO)
+
+    if not TRACE_PERFS:
+        run()
+    else:
+        util.make_profile('LinstorSR', run)
 else:
     SR.registerSR(LinstorSR)
diff --git a/drivers/util.py b/drivers/util.py
index 7c52703..fe8e13d 100755
--- a/drivers/util.py
+++ b/drivers/util.py
@@ -1862,3 +1862,45 @@ def check_pid_exists(pid):
         return False
     else:
         return True
+
+
+def make_profile(name, function):
+    """
+    Helper to execute cProfile using unique log file.
+    """
+
+    import cProfile
+    import itertools
+    import os.path
+    import time
+
+    assert name
+    assert function
+
+    FOLDER = '/tmp/sm-perfs/'
+    makedirs(FOLDER)
+
+    filename = time.strftime('{}_%Y%m%d_%H%M%S.prof'.format(name))
+
+    def gen_path(path):
+        yield path
+        root, ext = os.path.splitext(path)
+        for i in itertools.count(start=1, step=1):
+            yield root + '.{}.'.format(i) + ext
+
+    for profile_path in gen_path(FOLDER + filename):
+        try:
+            file = open_atomic(profile_path, 'w')
+            file.close()
+            break
+        except OSError as e:
+            if e.errno == errno.EEXIST:
+                pass
+            else:
+                raise
+
+    try:
+        SMlog('* Start profiling of {} ({}) *'.format(name, filename))
+        cProfile.runctx('function()', None, locals(), profile_path)
+    finally:
+        SMlog('* End profiling of {} ({}) *'.format(name, filename))
-- 
2.46.0

