From 3495f3d60f545f57c0bdd7736bd1e202c74cd786 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Mon, 22 Mar 2021 17:32:26 +0100
Subject: [PATCH 037/177] feat(LinstorSR): add an option to disable auto-quorum
 on volume DB + fix doc

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py            |  9 ++++++++-
 drivers/linstorvolumemanager.py | 36 +++++++++++++++++++--------------
 2 files changed, 29 insertions(+), 16 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index 092f5e8e..9f2be58c 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -31,6 +31,7 @@ except ImportError:
 from lock import Lock
 import blktap2
 import cleanup
+import distutils
 import errno
 import functools
 import scsiutil
@@ -77,7 +78,8 @@ CONFIGURATION = [
     ['group-name', 'LVM group name'],
     ['hosts', 'host names to use'],
     ['redundancy', 'replication count'],
-    ['provisioning', '"thin" or "thick" are accepted']
+    ['provisioning', '"thin" or "thick" are accepted (optional, defaults to thin)'],
+    ['monitor-db-quorum', 'disable controller when only one host is online (optional, defaults to true)']
 ]
 
 DRIVER_INFO = {
@@ -300,6 +302,10 @@ class LinstorSR(SR.SR):
         else:
             self._provisioning = self.PROVISIONING_DEFAULT
 
+        monitor_db_quorum = self.dconf.get('monitor-db-quorum')
+        self._monitor_db_quorum = (monitor_db_quorum is None) or \
+            distutils.util.strtobool(monitor_db_quorum)
+
         # Note: We don't have access to the session field if the
         # 'vdi_attach_from_config' command is executed.
         self._has_session = self.sr_ref and self.session is not None
@@ -553,6 +559,7 @@ class LinstorSR(SR.SR):
                 ips,
                 self._redundancy,
                 thin_provisioning=self._provisioning == 'thin',
+                auto_quorum=self._monitor_db_quorum,
                 logger=util.SMlog
             )
             self._vhdutil = LinstorVhdUtil(self.session, self._linstor)
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index d8d64b4a..27c8df5d 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -1261,15 +1261,17 @@ class LinstorVolumeManager(object):
     @classmethod
     def create_sr(
         cls, group_name, node_names, ips, redundancy,
-        thin_provisioning=False,
+        thin_provisioning, auto_quorum,
         logger=default_logger.__func__
     ):
         """
         Create a new SR on the given nodes.
         :param str group_name: The SR group_name to use.
         :param list[str] node_names: String list of nodes.
+        :param set(str) ips: Node ips.
         :param int redundancy: How many copy of volumes should we store?
-        :param set(str) ips: Node ips
+        :param bool thin_provisioning: Use thin or thick provisioning.
+        :param bool auto_quorum: DB quorum is monitored by LINSTOR.
         :param function logger: Function to log messages.
         :return: A new LinstorSr instance.
         :rtype: LinstorSr
@@ -1283,6 +1285,7 @@ class LinstorVolumeManager(object):
                 ips,
                 redundancy,
                 thin_provisioning,
+                auto_quorum,
                 logger
             )
         finally:
@@ -1300,7 +1303,7 @@ class LinstorVolumeManager(object):
     @classmethod
     def _create_sr(
         cls, group_name, node_names, ips, redundancy,
-        thin_provisioning=False,
+        thin_provisioning, auto_quorum,
         logger=default_logger.__func__
     ):
         # 1. Check if SR already exists.
@@ -1406,7 +1409,9 @@ class LinstorVolumeManager(object):
             # 3. Create the LINSTOR database volume and mount it.
             try:
                 logger('Creating database volume...')
-                volume_path = cls._create_database_volume(lin, group_name)
+                volume_path = cls._create_database_volume(
+                    lin, group_name, auto_quorum
+                )
             except LinstorVolumeManagerError as e:
                 if e.code != LinstorVolumeManagerError.ERR_VOLUME_EXISTS:
                     logger('Destroying database volume after creation fail...')
@@ -2113,7 +2118,7 @@ class LinstorVolumeManager(object):
         return resources[0].volumes[0].device_path
 
     @classmethod
-    def _create_database_volume(cls, lin, group_name):
+    def _create_database_volume(cls, lin, group_name, auto_quorum):
         try:
             dfns = lin.resource_dfn_list_raise().resource_definitions
         except Exception as e:
@@ -2139,16 +2144,17 @@ class LinstorVolumeManager(object):
 
         # We must modify the quorum. Otherwise we can't use correctly the
         # minidrbdcluster daemon.
-        result = lin.resource_dfn_modify(DATABASE_VOLUME_NAME, {
-            'DrbdOptions/auto-quorum': 'disabled',
-            'DrbdOptions/Resource/quorum': 'majority'
-        })
-        error_str = cls._get_error_str(result)
-        if error_str:
-            raise LinstorVolumeManagerError(
-                'Could not activate quorum on database volume: {}'
-                .format(error_str)
-            )
+        if auto_quorum:
+            result = lin.resource_dfn_modify(DATABASE_VOLUME_NAME, {
+                'DrbdOptions/auto-quorum': 'disabled',
+                'DrbdOptions/Resource/quorum': 'majority'
+            })
+            error_str = cls._get_error_str(result)
+            if error_str:
+                raise LinstorVolumeManagerError(
+                    'Could not activate quorum on database volume: {}'
+                    .format(error_str)
+                )
 
         current_device_path = cls._request_database_path(lin, activate=True)
 
