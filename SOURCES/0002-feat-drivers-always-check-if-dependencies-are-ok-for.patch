From 60dad6419e5eec0428360e8fa597c66cfd66fa95 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Tue, 21 Jul 2020 14:50:49 +0200
Subject: [PATCH 2/6] feat(drivers): always check if dependencies are ok for
 CephFS, GlusterFS and XFS drivers

---
 drivers/CephFSSR.py    | 10 ++++++++++
 drivers/GlusterFSSR.py | 11 +++++++++++
 drivers/XFSSR.py       | 11 +++++++++++
 3 files changed, 32 insertions(+)

diff --git a/drivers/CephFSSR.py b/drivers/CephFSSR.py
index 58ea68f..d797490 100644
--- a/drivers/CephFSSR.py
+++ b/drivers/CephFSSR.py
@@ -89,6 +89,12 @@ class CephFSSR(FileSR.FileSR):
     handles = staticmethod(handles)
 
     def load(self, sr_uuid):
+        if not self._is_ceph_available():
+            raise xs_errors.XenError(
+                'SRUnavailable',
+                opterr='ceph is not installed'
+            )
+
         self.ops_exclusive = FileSR.OPS_EXCLUSIVE
         self.lock = Lock(vhdutil.LOCK_TYPE_SR, self.uuid)
         self.sr_vditype = SR.DEFAULT_TAP
@@ -246,6 +252,10 @@ class CephFSSR(FileSR.FileSR):
     def vdi(self, uuid, loadLocked=False):
         return CephFSFileVDI(self, uuid)
 
+    @staticmethod
+    def _is_ceph_available():
+        import distutils.spawn
+        return distutils.spawn.find_executable('ceph')
 
 class CephFSFileVDI(FileSR.FileVDI):
     def attach(self, sr_uuid, vdi_uuid):
diff --git a/drivers/GlusterFSSR.py b/drivers/GlusterFSSR.py
index b0eec75..a2f7484 100644
--- a/drivers/GlusterFSSR.py
+++ b/drivers/GlusterFSSR.py
@@ -84,6 +84,12 @@ class GlusterFSSR(FileSR.FileSR):
     handles = staticmethod(handles)
 
     def load(self, sr_uuid):
+        if not self._is_glusterfs_available():
+            raise xs_errors.XenError(
+                'SRUnavailable',
+                opterr='glusterfs is not installed'
+            )
+
         self.ops_exclusive = FileSR.OPS_EXCLUSIVE
         self.lock = Lock(vhdutil.LOCK_TYPE_SR, self.uuid)
         self.sr_vditype = SR.DEFAULT_TAP
@@ -236,6 +242,11 @@ class GlusterFSSR(FileSR.FileSR):
     def vdi(self, uuid, loadLocked=False):
         return GlusterFSFileVDI(self, uuid)
 
+    @staticmethod
+    def _is_glusterfs_available():
+        import distutils.spawn
+        return distutils.spawn.find_executable('glusterfs')
+
 
 class GlusterFSFileVDI(FileSR.FileVDI):
     def attach(self, sr_uuid, vdi_uuid):
diff --git a/drivers/XFSSR.py b/drivers/XFSSR.py
index 44d2dc2..15dbe44 100644
--- a/drivers/XFSSR.py
+++ b/drivers/XFSSR.py
@@ -58,6 +58,12 @@ class XFSSR(FileSR.FileSR):
     handles = staticmethod(handles)
 
     def load(self, sr_uuid):
+        if not self._is_xfs_available():
+            raise xs_errors.XenError(
+                'SRUnavailable',
+                opterr='xfsprogs is not installed'
+            )
+
         self.ops_exclusive = FileSR.OPS_EXCLUSIVE
         self.lock = Lock(vhdutil.LOCK_TYPE_SR, self.uuid)
         self.sr_vditype = SR.DEFAULT_TAP
@@ -218,6 +224,11 @@ class XFSSR(FileSR.FileSR):
     def vdi(self, uuid, loadLocked=False):
         return XFSFileVDI(self, uuid)
 
+    @staticmethod
+    def _is_xfs_available():
+        import distutils.spawn
+        return distutils.spawn.find_executable('mkfs.xfs')
+
 
 class XFSFileVDI(FileSR.FileVDI):
     def attach(self, sr_uuid, vdi_uuid):
-- 
2.13.7

