From 6d61c34f334684920d6138ef7a56b8a1dcf00c15 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 25 Aug 2022 10:54:56 +0200
Subject: [PATCH 073/175] fix(linstorvhdutil): fix coalesce with VM running
 under specific scenario:

When a VM is running, we can't coalesce without this patch with a long chain
of VHDs because a parent can be in use on another host, and so a EROFS
can be emitted by vhd-util.

So to fix this problem we run vhd-util on the remote host instead of the master
in case of failure in the cleanup algorithm.

Impacted vhd-util functions: coalesce, getParent, repair.
---
 drivers/LinstorSR.py      |  12 +-
 drivers/cleanup.py        |  22 +++-
 drivers/linstor-manager   |  37 ++++++
 drivers/linstorvhdutil.py | 269 ++++++++++++++++++++++++++------------
 drivers/vhdutil.py        |   5 +-
 5 files changed, 251 insertions(+), 94 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index 00554d7..47ac3c8 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -163,7 +163,9 @@ def attach_thin(session, journaler, linstor, sr_uuid, vdi_uuid):
         # If the virtual VHD size is lower than the LINSTOR volume size,
         # there is nothing to do.
         vhd_size = compute_volume_size(
-            LinstorVhdUtil(session, linstor).get_size_virt(vdi_uuid),
+            # TODO: Replace pylint comment with this feature when possible:
+            # https://github.com/PyCQA/pylint/pull/2926
+            LinstorVhdUtil(session, linstor).get_size_virt(vdi_uuid),  # pylint: disable = E1120
             image_type
         )
 
@@ -207,7 +209,9 @@ def detach_thin(session, linstor, sr_uuid, vdi_uuid):
 
         device_path = linstor.get_device_path(vdi_uuid)
         new_volume_size = LinstorVolumeManager.round_up_volume_size(
-            LinstorVhdUtil(session, linstor).get_size_phys(device_path)
+            # TODO: Replace pylint comment with this feature when possible:
+            # https://github.com/PyCQA/pylint/pull/2926
+            LinstorVhdUtil(session, linstor).get_size_phys(device_path)  # pylint: disable = E1120
         )
 
         volume_info = linstor.get_volume_info(vdi_uuid)
@@ -1231,8 +1235,10 @@ class LinstorSR(SR.SR):
             self.vdis[vdi_uuid] = vdi
 
             if vdi.vdi_type == vhdutil.VDI_TYPE_VHD:
+                # TODO: Replace pylint comment with this feature when possible:
+                # https://github.com/PyCQA/pylint/pull/2926
                 vdi.sm_config_override['key_hash'] = \
-                    self._vhdutil.get_key_hash(vdi_uuid)
+                    self._vhdutil.get_key_hash(vdi_uuid)  # pylint: disable = E1120
 
             # 4.c. Update CBT status of disks either just added
             # or already in XAPI.
diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index 0a586a6..7329363 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -840,12 +840,14 @@ class VDI(object):
             xapi.message.create(msg_name, "3", "SR", vdi.sr.uuid, msg_body)
     _reportCoalesceError = staticmethod(_reportCoalesceError)
 
+    def coalesce(self):
+        vhdutil.coalesce(self.path)
+
     def _doCoalesceVHD(vdi):
         try:
-
             startTime = time.time()
             vhdSize = vdi.getSizeVHD()
-            vhdutil.coalesce(vdi.path)
+            vdi.coalesce()
             endTime = time.time()
             vdi.sr.recordStorageSpeed(startTime, endTime, vhdSize)
         except util.CommandException, ce:
@@ -1437,6 +1439,9 @@ class LinstorVDI(VDI):
         )
         return super(LinstorVDI, self).pause(failfast)
 
+    def coalesce(self):
+        self.sr._vhdutil.force_coalesce(self.path)
+
     def _relinkSkip(self):
         abortFlag = IPCFlag(self.sr.uuid)
         for child in self.children:
@@ -1461,6 +1466,19 @@ class LinstorVDI(VDI):
                 blktap2.VDI.tap_unpause(session, sr_uuid, vdi_uuid)
         self.children = []
 
+    def _setParent(self, parent):
+        self.sr._vhdutil.force_parent(self.path, parent.path)
+        self.parent = parent
+        self.parentUuid = parent.uuid
+        parent.children.append(self)
+        try:
+            self.setConfig(self.DB_VHD_PARENT, self.parentUuid)
+            Util.log("Updated the vhd-parent field for child %s with %s" % \
+                     (self.uuid, self.parentUuid))
+        except:
+            Util.log("Failed to update %s with vhd-parent field %s" % \
+                     (self.uuid, self.parentUuid))
+
     def _setHidden(self, hidden=True):
         HIDDEN_TAG = 'hidden'
 
diff --git a/drivers/linstor-manager b/drivers/linstor-manager
index 4d0ba29..5485b90 100755
--- a/drivers/linstor-manager
+++ b/drivers/linstor-manager
@@ -416,6 +416,37 @@ def get_block_bitmap(session, args):
         raise
 
 
+def set_parent(session, args):
+    try:
+        device_path = args['devicePath']
+        parent_path = args['parentPath']
+        vhdutil.setParent(device_path, parent_path, False)
+        return ''
+    except Exception as e:
+        util.SMlog('linstor-manager:set_parent error: {}'.format(e))
+        raise
+
+
+def coalesce(session, args):
+    try:
+        device_path = args['devicePath']
+        vhdutil.coalesce(device_path)
+        return ''
+    except Exception as e:
+        util.SMlog('linstor-manager:coalesce error: {}'.format(e))
+        raise
+
+
+def repair(session, args):
+    try:
+        device_path = args['devicePath']
+        vhdutil.repair(device_path)
+        return ''
+    except Exception as e:
+        util.SMlog('linstor-manager:repair error: {}'.format(e))
+        raise
+
+
 def lock_vdi(session, args):
     lock = None
     try:
@@ -842,6 +873,12 @@ if __name__ == '__main__':
         'getKeyHash': get_key_hash,
         'getBlockBitmap': get_block_bitmap,
 
+        # Called by cleanup.py to coalesce when a primary
+        # is opened on a non-local host.
+        'setParent': set_parent,
+        'coalesce': coalesce,
+        'repair': repair,
+
         'lockVdi': lock_vdi,
         'hasControllerRunning': has_controller_running,
         'addHost': add_host,
diff --git a/drivers/linstorvhdutil.py b/drivers/linstorvhdutil.py
index d6a21c2..4d031e1 100644
--- a/drivers/linstorvhdutil.py
+++ b/drivers/linstorvhdutil.py
@@ -25,39 +25,30 @@ import xs_errors
 
 MANAGER_PLUGIN = 'linstor-manager'
 
+# EMEDIUMTYPE constant (124) is not available in python2.
+EMEDIUMTYPE = 124
 
-def call_vhd_util(linstor, func, device_path, *args, **kwargs):
-    try:
-        return func(device_path, *args, **kwargs)
-    except util.CommandException as e:
-        # Raise if we don't have a lock on the volume on another host.
-        if e.code != errno.EROFS:
-            raise
-
-    # Volume is locked on a host, find openers.
-    e_with_openers = None
+
+def call_vhd_util_on_host(session, host_ref, method, device_path, args):
     try:
-        volume_uuid = linstor.get_volume_uuid_from_device_path(
-            device_path
+        response = session.xenapi.host.call_plugin(
+            host_ref, MANAGER_PLUGIN, method, args
         )
-        e_with_openers = util.CommandException(
-            e.code,
-            e.cmd,
-            e.reason + ' (openers: {})'.format(
-                linstor.get_volume_openers(volume_uuid)
-            )
-        )
-    except Exception as illformed_e:
-        raise util.CommandException(
-            e.code,
-            e.cmd,
-            e.reason + ' (unable to get openers: {})'.format(illformed_e)
-        )
-    raise e_with_openers  # pylint: disable = E0702
+    except Exception as e:
+        util.SMlog('call-plugin ({} with {}) exception: {}'.format(
+            method, args, e
+        ))
+        raise
+
+    util.SMlog('call-plugin ({} with {}) returned: {}'.format(
+        method, args, response
+    ))
+
+    return response
 
 
 def linstorhostcall(local_method, remote_method):
-    def decorated(func):
+    def decorated(response_parser):
         def wrapper(*args, **kwargs):
             self = args[0]
             vdi_uuid = args[1]
@@ -76,45 +67,27 @@ def linstorhostcall(local_method, remote_method):
 
             try:
                 if not in_use or socket.gethostname() in node_names:
-                    return call_vhd_util(self._linstor, local_method, device_path, *args[2:], **kwargs)
+                    return self._call_local_vhd_util(local_method, device_path, *args[2:], **kwargs)
             except util.CommandException as e:
-                # EMEDIUMTYPE constant (124) is not available in python2.
-                if e.code != errno.EROFS and e.code != 124:
+                if e.code != errno.EROFS and e.code != EMEDIUMTYPE:
                     raise
 
             # B. Execute the plugin on master or slave.
-            def exec_remote_method():
+            remote_args = {
+                'devicePath': device_path,
+                'groupName': self._linstor.group_name
+            }
+            remote_args.update(**kwargs)
+            remote_args = {str(key): str(value) for key, value in remote_args.iteritems()}
+
+            def remote_call():
                 host_ref = self._get_readonly_host(
                     vdi_uuid, device_path, node_names
                 )
-                args = {
-                    'devicePath': device_path,
-                    'groupName': self._linstor.group_name
-                }
-                args.update(**kwargs)
-
-                try:
-                    response = self._session.xenapi.host.call_plugin(
-                        host_ref, MANAGER_PLUGIN, remote_method, args
-                    )
-                except Exception as e:
-                    util.SMlog('call-plugin ({} with {}) exception: {}'.format(
-                        remote_method, args, e
-                    ))
-                    raise
+                return call_vhd_util_on_host(self._session, host_ref, remote_method, device_path, remote_args)
+            response = util.retry(remote_call, 5, 2)
 
-                util.SMlog('call-plugin ({} with {}) returned: {}'.format(
-                    remote_method, args, response
-                ))
-                if response == 'False':
-                    raise xs_errors.XenError(
-                        'VDIUnavailable',
-                        opterr='Plugin {} failed'.format(MANAGER_PLUGIN)
-                    )
-                kwargs['response'] = response
-
-            util.retry(exec_remote_method, 5, 3)
-            return func(*args, **kwargs)
+            return response_parser(self, vdi_uuid, response)
         return wrapper
     return decorated
 
@@ -137,7 +110,7 @@ class LinstorVhdUtil:
         self._linstor = linstor
 
     # --------------------------------------------------------------------------
-    # Getters.
+    # Getters: read locally and try on another host in case of failure.
     # --------------------------------------------------------------------------
 
     def check(self, vdi_uuid, ignore_missing_footer=False, fast=False):
@@ -153,11 +126,13 @@ class LinstorVhdUtil:
 
     def get_vhd_info(self, vdi_uuid, include_parent=True):
         kwargs = {'includeParent': str(include_parent)}
-        return self._get_vhd_info(vdi_uuid, self._extract_uuid, **kwargs)
+        # TODO: Replace pylint comment with this feature when possible:
+        # https://github.com/PyCQA/pylint/pull/2926
+        return self._get_vhd_info(vdi_uuid, self._extract_uuid, **kwargs)  # pylint: disable = E1123
 
     @linstorhostcall(vhdutil.getVHDInfo, 'getVHDInfo')
-    def _get_vhd_info(self, vdi_uuid, *args, **kwargs):
-        obj = json.loads(kwargs['response'])
+    def _get_vhd_info(self, vdi_uuid, response):
+        obj = json.loads(response)
 
         vhd_info = vhdutil.VHDInfo(vdi_uuid)
         vhd_info.sizeVirt = obj['sizeVirt']
@@ -171,71 +146,91 @@ class LinstorVhdUtil:
         return vhd_info
 
     @linstorhostcall(vhdutil.hasParent, 'hasParent')
-    def has_parent(self, vdi_uuid, **kwargs):
-        return distutils.util.strtobool(kwargs['response'])
+    def has_parent(self, vdi_uuid, response):
+        return distutils.util.strtobool(response)
 
     def get_parent(self, vdi_uuid):
         return self._get_parent(vdi_uuid, self._extract_uuid)
 
     @linstorhostcall(vhdutil.getParent, 'getParent')
-    def _get_parent(self, vdi_uuid, *args, **kwargs):
-        return kwargs['response']
+    def _get_parent(self, vdi_uuid, response):
+        return response
 
     @linstorhostcall(vhdutil.getSizeVirt, 'getSizeVirt')
-    def get_size_virt(self, vdi_uuid, **kwargs):
-        return int(kwargs['response'])
+    def get_size_virt(self, vdi_uuid, response):
+        return int(response)
 
     @linstorhostcall(vhdutil.getSizePhys, 'getSizePhys')
-    def get_size_phys(self, vdi_uuid, **kwargs):
-        return int(kwargs['response'])
+    def get_size_phys(self, vdi_uuid, response):
+        return int(response)
 
     @linstorhostcall(vhdutil.getDepth, 'getDepth')
-    def get_depth(self, vdi_uuid, **kwargs):
-        return int(kwargs['response'])
+    def get_depth(self, vdi_uuid, response):
+        return int(response)
 
     @linstorhostcall(vhdutil.getKeyHash, 'getKeyHash')
-    def get_key_hash(self, vdi_uuid, **kwargs):
-        return kwargs['response'] or None
+    def get_key_hash(self, vdi_uuid, response):
+        return response or None
 
     @linstorhostcall(vhdutil.getBlockBitmap, 'getBlockBitmap')
-    def get_block_bitmap(self, vdi_uuid, **kwargs):
-        return base64.b64decode(kwargs['response'])
+    def get_block_bitmap(self, vdi_uuid, response):
+        return base64.b64decode(response)
 
     # --------------------------------------------------------------------------
-    # Setters.
+    # Setters: only used locally.
     # --------------------------------------------------------------------------
 
     @linstormodifier()
     def create(self, path, size, static, msize=0):
-        return call_vhd_util(self._linstor, vhdutil.create, path, size, static, msize)
+        return self._call_local_vhd_util(vhdutil.create, path, size, static, msize)
 
     @linstormodifier()
     def set_size_virt_fast(self, path, size):
-        return call_vhd_util(self._linstor, vhdutil.setSizeVirtFast, path, size)
+        return self._call_local_vhd_util(vhdutil.setSizeVirtFast, path, size)
 
     @linstormodifier()
     def set_size_phys(self, path, size, debug=True):
-        return call_vhd_util(self._linstor, vhdutil.setSizePhys, path, size, debug)
+        return self._call_local_vhd_util(vhdutil.setSizePhys, path, size, debug)
 
     @linstormodifier()
-    def set_parent(self, path, parentPath, parentRaw):
-        return call_vhd_util(self._linstor, vhdutil.setParent, path, parentPath, parentRaw)
+    def set_parent(self, path, parentPath, parentRaw=False):
+        return self._call_local_vhd_util(vhdutil.setParent, path, parentPath, parentRaw)
 
     @linstormodifier()
     def set_hidden(self, path, hidden=True):
-        return call_vhd_util(self._linstor, vhdutil.setHidden, path, hidden)
+        return self._call_local_vhd_util(vhdutil.setHidden, path, hidden)
 
     @linstormodifier()
     def set_key(self, path, key_hash):
-        return call_vhd_util(self._linstor, vhdutil.setKey, path, key_hash)
+        return self._call_local_vhd_util(vhdutil.setKey, path, key_hash)
 
     @linstormodifier()
     def kill_data(self, path):
-        return call_vhd_util(self._linstor, vhdutil.killData, path)
+        return self._call_local_vhd_util(vhdutil.killData, path)
 
     @linstormodifier()
     def snapshot(self, path, parent, parentRaw, msize=0, checkEmpty=True):
-        return call_vhd_util(self._linstor, vhdutil.snapshot, path, parent, parentRaw, msize, checkEmpty)
+        return self._call_local_vhd_util(vhdutil.snapshot, path, parent, parentRaw, msize, checkEmpty)
+
+    # --------------------------------------------------------------------------
+    # Remote setters: write locally and try on another host in case of failure.
+    # --------------------------------------------------------------------------
+
+    @linstormodifier()
+    def force_parent(self, path, parentPath, parentRaw=False):
+        kwargs = {
+            'parentPath': str(parentPath),
+            'parentRaw': parentRaw
+        }
+        return self._call_vhd_util(vhdutil.setParent, 'setParent', path, **kwargs)
+
+    @linstormodifier()
+    def force_coalesce(self, path):
+        return self._call_vhd_util(vhdutil.coalesce, 'coalesce', path)
+
+    @linstormodifier()
+    def force_repair(self, path):
+        return self._call_vhd_util(vhdutil.repair, 'repair', path)
 
     # --------------------------------------------------------------------------
     # Helpers.
@@ -273,3 +268,105 @@ class LinstorVhdUtil:
             opterr='Unable to find a valid host from VDI: {} (path={})'
             .format(vdi_uuid, device_path)
         )
+
+    # --------------------------------------------------------------------------
+
+    def _call_local_vhd_util(self, local_method, device_path, *args, **kwargs):
+        try:
+            def local_call():
+                return local_method(device_path, *args, **kwargs)
+            return util.retry(local_call, 5, 2)
+        except util.CommandException as e:
+            if e.code != errno.EROFS and e.code != EMEDIUMTYPE:
+                raise
+
+        # Volume is locked on a host, find openers.
+        e_with_openers = None
+        try:
+            volume_uuid = self._linstor.get_volume_uuid_from_device_path(
+                device_path
+            )
+            e_with_openers = util.CommandException(
+                e.code,
+                e.cmd,
+                e.reason + ' (openers: {})'.format(
+                    self._linstor.get_volume_openers(volume_uuid)
+                )
+            )
+        except Exception as illformed_e:
+            raise util.CommandException(
+                e.code,
+                e.cmd,
+                e.reason + ' (unable to get openers: {})'.format(illformed_e)
+            )
+        raise e_with_openers  # pylint: disable = E0702
+
+    def _call_vhd_util(self, local_method, remote_method, device_path, *args, **kwargs):
+        # A. Try to write locally...
+        try:
+            def local_call():
+                return local_method(device_path, *args, **kwargs)
+            return util.retry(local_call, 5, 2)
+        except util.CommandException as e:
+            if e.code != errno.EROFS and e.code != EMEDIUMTYPE:
+                raise
+
+        # B. Execute the command on another host.
+        # B.1. Get host list.
+        try:
+            hosts = self._session.xenapi.host.get_all_records()
+        except Exception as e:
+            raise xs_errors.XenError(
+                'VDIUnavailable',
+                opterr='Unable to get host list to run vhd-util command `{}` (path={}): {}'
+                .format(remote_method, device_path, e)
+            )
+
+        # B.2. Prepare remote args.
+        remote_args = {
+            'devicePath': device_path,
+            'groupName': self._linstor.group_name
+        }
+        remote_args.update(**kwargs)
+        remote_args = {str(key): str(value) for key, value in remote_args.iteritems()}
+
+        volume_uuid = self._linstor.get_volume_uuid_from_device_path(
+            device_path
+        )
+
+        # B.3. Call!
+        def remote_call():
+            try:
+                all_openers = self._linstor.get_volume_openers(volume_uuid)
+            except Exception as e:
+                raise xs_errors.XenError(
+                    'VDIUnavailable',
+                    opterr='Unable to get DRBD openers to run vhd-util command `{}` (path={}): {}'
+                    .format(remote_method, device_path, e)
+                )
+
+            no_host_found = True
+            for hostname, openers in all_openers.iteritems():
+                if not openers:
+                    continue
+
+                try:
+                    host_ref = next(ref for ref, rec in hosts.iteritems() if rec['hostname'] == hostname)
+                except StopIteration:
+                    continue
+
+                no_host_found = False
+                try:
+                    return call_vhd_util_on_host(self._session, host_ref, remote_method, device_path, remote_args)
+                except Exception:
+                    pass
+
+            if no_host_found:
+                return local_method(device_path, *args, **kwargs)
+
+            raise xs_errors.XenError(
+                'VDIUnavailable',
+                opterr='No valid host found to run vhd-util command `{}` (path={}): {}'
+                .format(remote_method, device_path, e)
+            )
+        return util.retry(remote_call, 5, 2)
diff --git a/drivers/vhdutil.py b/drivers/vhdutil.py
index 0a8fe91..d75edb1 100755
--- a/drivers/vhdutil.py
+++ b/drivers/vhdutil.py
@@ -97,9 +97,8 @@ def calcOverheadFull(virtual_size):
 def fullSizeVHD(virtual_size):
     return virtual_size + calcOverheadFull(virtual_size)
 
-def ioretry(cmd):
-    return util.ioretry(lambda: util.pread2(cmd),
-            errlist = [errno.EIO, errno.EROFS, errno.EAGAIN])
+def ioretry(cmd, errlist=[errno.EIO, errno.EAGAIN]):
+    return util.ioretry(lambda: util.pread2(cmd), errlist)
 
 def getVHDInfo(path, extractUuidFunction, includeParent = True):
     """Get the VHD info. The parent info may optionally be omitted: vhd-util
-- 
2.45.2

