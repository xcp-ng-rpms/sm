From 5f8a99eff7f2f137b7afac5738d45c1c56a8846b Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 15 Sep 2022 11:49:34 +0200
Subject: [PATCH 079/180] feat(minidrbdcluster): stop resource services at
 startup

- Ensure all services are stopped when minidrbcluster is started.
- Clean code to parse only once the systemd unit string.
- Log unhandled exceptions.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 scripts/minidrbdcluster | 50 ++++++++++++++++++++++++++---------------
 1 file changed, 32 insertions(+), 18 deletions(-)

diff --git a/scripts/minidrbdcluster b/scripts/minidrbdcluster
index 4cdc59e6..eae7cbfe 100755
--- a/scripts/minidrbdcluster
+++ b/scripts/minidrbdcluster
@@ -83,8 +83,7 @@ def show_status(services, status):
         print('%s is %s' % (res_name, status[res_name]))
 
 
-def clean_up(services):
-    print('exiting:')
+def stop_services(services):
     for systemd_unit in reversed(services):
         call_systemd('stop', systemd_unit)
 
@@ -98,18 +97,17 @@ def get_systemd_units(systemd_units_str):
     return systemd_units
 
 
-def process(events2, resources, services, status):
+def process(events2, resources, running_services, status):
     line = events2.stdout.readline()
     m = MAY_PROMOT_RE.match(line)
     if m:
         res_name, may_promote, promotion_score = m.groups()
         if res_name in resources and may_promote == 'yes':
-            systemd_units_str = resources[res_name]['systemd-units']
-            for systemd_unit in get_systemd_units(systemd_units_str):
+            for systemd_unit in resources[res_name]['systemd-units']:
                 if not ensure_systemd_started(systemd_unit):
                     break
-                if systemd_unit not in services:
-                    services.append(systemd_unit)
+                if systemd_unit not in running_services:
+                    running_services.append(systemd_unit)
     m = PEER_ROLE_RE.match(line)
     if m:
         res_name, conn_name, role = m.groups()
@@ -119,15 +117,14 @@ def process(events2, resources, services, status):
     if m:
         res_name, have_quorum = m.groups()
         if res_name in resources and have_quorum == 'no':
-            systemd_units_str = resources[res_name]['systemd-units']
-            systemd_units = get_systemd_units(systemd_units_str)
-            to_stop = [x for x in systemd_units if x in services]
+            systemd_units = resources[res_name]['systemd-units']
+            to_stop = [x for x in systemd_units if x in running_services]
             if to_stop:
                 print('Lost quorum on %s' % (res_name))
             for systemd_unit in reversed(to_stop):
                 r = call_systemd('stop', systemd_unit)
                 if r:
-                    services.remove(systemd_unit)
+                    running_services.remove(systemd_unit)
 
 
 def active_drbd_volume(res_name):
@@ -152,8 +149,7 @@ def active_drbd_volume(res_name):
 
 
 def main():
-    services = []
-    status = dict()
+    # 1. Load minidrbdcluster config.
     config = configparser.ConfigParser()
     config.read('/etc/minidrbdcluster.ini')
     resources = config._sections
@@ -162,12 +158,28 @@ def main():
             'No resources to watch, maybe /etc/minidrbdcluster.ini missing'
         )
     print('Managing DRBD resources: %s' % (' '.join(resources)))
-    for res_name in resources:
+
+    # 2. Prepare resources.
+    status = dict()
+    all_services = []  # Contains common services between each DRBD volumes.
+    for res_name, resource in resources.iteritems():
         status[res_name] = dict()
         active_drbd_volume(res_name)
+        systemd_units = get_systemd_units(resource['systemd-units'])
+        resource['systemd-units'] = systemd_units
+
+        for systemd_unit in systemd_units:
+            if systemd_unit not in all_services:
+                all_services.append(systemd_unit)
 
+    # 3. Ensure all services are stopped.
+    stop_services(all_services)
+
+    # 4. Run!
     signal.signal(signal.SIGHUP, sig_handler)
 
+    running_services = []
+
     print('Starting process...')
     events2 = subprocess.Popen(
         ['drbdsetup', 'events2'], stdout=subprocess.PIPE
@@ -175,14 +187,16 @@ def main():
     run = True
     while run:
         try:
-            process(events2, resources, services, status)
+            process(events2, resources, running_services, status)
         except KeyboardInterrupt:
             run = False
         except SigHupException:
-            show_status(services, status)
-
-    clean_up(services)
+            show_status(running_services, status)
+        except Exception:
+            print('Unhandled exception: %s' % str(e))
 
+    print('Exiting...')
+    stop_services(running_services)
 
 if __name__ == '__main__':
     main()
