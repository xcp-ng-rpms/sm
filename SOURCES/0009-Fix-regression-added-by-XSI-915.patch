From 82dd74dc98d17058c188d4888432d3d268c722f1 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 29 Apr 2021 13:55:41 +0200
Subject: [PATCH 09/10] Fix regression added by XSI-915:

If device is missing during LVM/EXT SR creation we have this error:
```
Error code: SR_BACKEND_FAILURE_1200
Error parameters: , 'LVHDSR' object has no attribute 'root',
```

With this fix we retrieve a more explicit message:
```
Error code: SR_BACKEND_FAILURE_90
Error parameters: , The request is missing the device parameter,
```

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/EXTSR.py  |  5 +++++
 drivers/LVHDSR.py | 18 +++++++++++-------
 2 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/drivers/EXTSR.py b/drivers/EXTSR.py
index 9160075..987b89c 100755
--- a/drivers/EXTSR.py
+++ b/drivers/EXTSR.py
@@ -57,6 +57,11 @@ class EXTSR(FileSR.FileSR):
         self.ops_exclusive = FileSR.OPS_EXCLUSIVE
         self.lock = Lock(vhdutil.LOCK_TYPE_SR, self.uuid)
         self.sr_vditype = SR.DEFAULT_TAP
+        if type(self) == EXTSR and (
+            'device' not in self.dconf or not self.dconf['device']
+        ):
+            raise xs_errors.XenError('ConfigDeviceMissing')
+
         self.path = os.path.join(SR.MOUNT_BASE, sr_uuid)
         self.vgname = EXT_PREFIX + sr_uuid
         self.remotepath = os.path.join("/dev",self.vgname,sr_uuid)
diff --git a/drivers/LVHDSR.py b/drivers/LVHDSR.py
index 3abb404..5995de0 100755
--- a/drivers/LVHDSR.py
+++ b/drivers/LVHDSR.py
@@ -148,6 +148,10 @@ class LVHDSR(SR.SR):
 
     def load(self, sr_uuid):
         self.ops_exclusive = OPS_EXCLUSIVE
+        if type(self) == LVHDSR and (
+            'device' not in self.dconf or not self.dconf['device']
+        ):
+            raise xs_errors.XenError('ConfigDeviceMissing')
 
         self.isMaster = False
         if self.dconf.has_key('SRmaster') and self.dconf['SRmaster'] == 'true':
@@ -206,19 +210,19 @@ class LVHDSR(SR.SR):
 
         for key in self.lvmCache.lvs.keys():
             # if the lvname has a uuid in it
-            type = None
+            vdi_type = None
             if contains_uuid_regex.search(key) != None:
                 if key.startswith(lvhdutil.LV_PREFIX[vhdutil.VDI_TYPE_VHD]):
-                    type = vhdutil.VDI_TYPE_VHD
-                    vdi = key[len(lvhdutil.LV_PREFIX[type]):]
+                    vdi_type = vhdutil.VDI_TYPE_VHD
+                    vdi = key[len(lvhdutil.LV_PREFIX[vdi_type]):]
                 elif key.startswith(lvhdutil.LV_PREFIX[vhdutil.VDI_TYPE_RAW]):
-                    type = vhdutil.VDI_TYPE_RAW
-                    vdi = key[len(lvhdutil.LV_PREFIX[type]):]
+                    vdi_type = vhdutil.VDI_TYPE_RAW
+                    vdi = key[len(lvhdutil.LV_PREFIX[vdi_type]):]
                 else:
                     continue
 
-            if type != None:
-                self.storageVDIs[vdi] = type
+            if vdi_type != None:
+                self.storageVDIs[vdi] = vdi_type
 
         # check if metadata volume exists
         try:
-- 
2.30.1

