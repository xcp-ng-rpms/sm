From c61652de4ff35fad31f2b66613062dea817042b0 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Wed, 20 Oct 2021 14:33:04 +0200
Subject: [PATCH 35/54] feat(LinstorVolumeManager): add a fallback to find
 controller uri (when len(hosts) >= 4)

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/linstor-manager         | 10 +++++++-
 drivers/linstorvolumemanager.py | 42 ++++++++++++++++++++++++---------
 2 files changed, 40 insertions(+), 12 deletions(-)

diff --git a/drivers/linstor-manager b/drivers/linstor-manager
index f12747f..afc4bfe 100755
--- a/drivers/linstor-manager
+++ b/drivers/linstor-manager
@@ -364,6 +364,13 @@ def lsof_resource(session, args):
         raise
 
 
+def has_controller_running(session, args):
+    (ret, stdout, stderr) = util.doexec([
+        'systemctl', 'is-active', '--quiet', 'linstor-controller'
+    ])
+    return str(ret == 0)
+
+
 if __name__ == '__main__':
     XenAPIPlugin.dispatch({
         'prepareSr': prepare_sr,
@@ -382,5 +389,6 @@ if __name__ == '__main__':
         'getKeyHash': get_key_hash,
         'getBlockBitmap': get_block_bitmap,
         'lockVdi': lock_vdi,
-        'lsofResource': lsof_resource
+        'lsofResource': lsof_resource,
+        'hasControllerRunning': has_controller_running
     })
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 553e2f5..821ef42 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -16,6 +16,7 @@
 #
 
 
+import distutils.util
 import errno
 import glob
 import json
@@ -41,11 +42,12 @@ REG_DRBDSETUP_IP = re.compile('[^\\s]+\\s+(.*):.*$')
 
 DRBD_BY_RES_PATH = '/dev/drbd/by-res/'
 
+PLUGIN = 'linstor-manager'
+
 
 # Check if a path is a DRBD resource and log the process name/pid
 # that opened it.
 def log_lsof_drbd(path):
-    PLUGIN = 'linstor-manager'
     PLUGIN_CMD = 'lsofResource'
 
     # Ignore if it's not a symlink to DRBD resource.
@@ -159,21 +161,39 @@ def get_remote_host_ip(node_name):
 
 
 def _get_controller_uri():
+    PLUGIN_CMD = 'hasControllerRunning'
+
+    # Try to find controller using drbdadm.
     (ret, stdout, stderr) = util.doexec([
         'drbdadm', 'status', DATABASE_VOLUME_NAME
     ])
-    if ret != 0:
-        return
+    if ret == 0:
+        # If we are here, the database device exists locally.
 
-    if stdout.startswith('{} role:Primary'.format(DATABASE_VOLUME_NAME)):
-        return 'linstor://localhost'
+        if stdout.startswith('{} role:Primary'.format(DATABASE_VOLUME_NAME)):
+            # Nice case, we have the controller running on this local host.
+            return 'linstor://localhost'
 
-    res = REG_DRBDADM_PRIMARY.search(stdout)
-    if res:
-        node_name = res.groups()[0]
-        ip = get_remote_host_ip(node_name)
-        if ip:
-            return 'linstor://' + ip
+        # Try to find the host using DRBD connections.
+        res = REG_DRBDADM_PRIMARY.search(stdout)
+        if res:
+            node_name = res.groups()[0]
+            ip = get_remote_host_ip(node_name)
+            if ip:
+                return 'linstor://' + ip
+
+    # Worst case: we use many hosts in the pool (>= 4), so we can't find the
+    # primary using drbdadm because we don't have all connections to the
+    # replicated volume. `drbdadm status xcp-persistent-database` returns
+    # 3 connections by default.
+    session = util.get_localAPI_session()
+    for host_ref, host_record in session.xenapi.host.get_all_records().items():
+        if distutils.util.strtobool(
+            session.xenapi.host.call_plugin(host_ref, PLUGIN, PLUGIN_CMD, {})
+        ):
+            return 'linstor://' + host_record['hostname']
+
+    # Not found, maybe we are trying to create the SR...
 
 
 def get_controller_uri():
-- 
2.36.0

