From d1e3ace3c5c16ba428c4151482f4065d09930621 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Tue, 14 Nov 2023 18:08:26 +0100
Subject: [PATCH 143/178] fix(LinstorSR): support different volume sizes in
 cleanup.py

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py      |  97 +++++------------------------
 drivers/cleanup.py        | 128 +++++++++++++++++++++++++++++++-------
 drivers/linstorvhdutil.py |  75 ++++++++++++++++++++++
 3 files changed, 194 insertions(+), 106 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index 3063abf..6802f49 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -134,19 +134,6 @@ OPS_EXCLUSIVE = [
 # ==============================================================================
 
 
-def compute_volume_size(virtual_size, image_type):
-    if image_type == vhdutil.VDI_TYPE_VHD:
-        # All LINSTOR VDIs have the metadata area preallocated for
-        # the maximum possible virtual size (for fast online VDI.resize).
-        meta_overhead = vhdutil.calcOverheadEmpty(LinstorVDI.MAX_SIZE)
-        bitmap_overhead = vhdutil.calcOverheadBitmap(virtual_size)
-        virtual_size += meta_overhead + bitmap_overhead
-    elif image_type != vhdutil.VDI_TYPE_RAW:
-        raise Exception('Invalid image type: {}'.format(image_type))
-
-    return LinstorVolumeManager.round_up_volume_size(virtual_size)
-
-
 def attach_thin(session, journaler, linstor, sr_uuid, vdi_uuid):
     volume_metadata = linstor.get_volume_metadata(vdi_uuid)
     image_type = volume_metadata.get(VDI_TYPE_TAG)
@@ -157,7 +144,7 @@ def attach_thin(session, journaler, linstor, sr_uuid, vdi_uuid):
 
     # If the virtual VHD size is lower than the LINSTOR volume size,
     # there is nothing to do.
-    vhd_size = compute_volume_size(
+    vhd_size = LinstorVhdUtil.compute_volume_size(
         # TODO: Replace pylint comment with this feature when possible:
         # https://github.com/PyCQA/pylint/pull/2926
         LinstorVhdUtil(session, linstor).get_size_virt(vdi_uuid),  # pylint: disable = E1120
@@ -168,9 +155,8 @@ def attach_thin(session, journaler, linstor, sr_uuid, vdi_uuid):
     volume_size = volume_info.virtual_size
 
     if vhd_size > volume_size:
-        inflate(
-            journaler, linstor, vdi_uuid, device_path,
-            vhd_size, volume_size
+        LinstorVhdUtil(session, linstor).inflate(
+            journaler, vdi_uuid, device_path, vhd_size, volume_size
         )
 
 
@@ -202,17 +188,16 @@ def detach_thin_impl(session, linstor, sr_uuid, vdi_uuid):
     util.retry(check_vbd_count, maxretry=10, period=1)
 
     device_path = linstor.get_device_path(vdi_uuid)
+    vhdutil_inst = LinstorVhdUtil(session, linstor)
     new_volume_size = LinstorVolumeManager.round_up_volume_size(
         # TODO: Replace pylint comment with this feature when possible:
         # https://github.com/PyCQA/pylint/pull/2926
-        LinstorVhdUtil(session, linstor).get_size_phys(vdi_uuid)  # pylint: disable = E1120
+        vhdutil_inst.get_size_phys(vdi_uuid)  # pylint: disable = E1120
     )
 
     volume_info = linstor.get_volume_info(vdi_uuid)
     old_volume_size = volume_info.virtual_size
-    deflate(
-        linstor, vdi_uuid, device_path, new_volume_size, old_volume_size
-    )
+    vhdutil_inst.deflate(vdi_uuid, device_path, new_volume_size, old_volume_size)
 
 
 def detach_thin(session, linstor, sr_uuid, vdi_uuid):
@@ -225,56 +210,6 @@ def detach_thin(session, linstor, sr_uuid, vdi_uuid):
         util.SMlog('Failed to detach properly VDI {}: {}'.format(vdi_uuid, e))
 
 
-def inflate(journaler, linstor, vdi_uuid, vdi_path, new_size, old_size):
-    # Only inflate if the LINSTOR volume capacity is not enough.
-    new_size = LinstorVolumeManager.round_up_volume_size(new_size)
-    if new_size <= old_size:
-        return
-
-    util.SMlog(
-        'Inflate {} (size={}, previous={})'
-        .format(vdi_uuid, new_size, old_size)
-    )
-
-    journaler.create(
-        LinstorJournaler.INFLATE, vdi_uuid, old_size
-    )
-    linstor.resize_volume(vdi_uuid, new_size)
-
-    result_size = linstor.get_volume_size(vdi_uuid)
-    if result_size < new_size:
-        util.SMlog(
-            'WARNING: Cannot inflate volume to {}B, result size: {}B'
-            .format(new_size, result_size)
-        )
-
-    if not util.zeroOut(
-        vdi_path, result_size - vhdutil.VHD_FOOTER_SIZE,
-        vhdutil.VHD_FOOTER_SIZE
-    ):
-        raise xs_errors.XenError(
-            'EIO',
-            opterr='Failed to zero out VHD footer {}'.format(vdi_path)
-        )
-
-    LinstorVhdUtil(None, linstor).set_size_phys(vdi_path, result_size, False)
-    journaler.remove(LinstorJournaler.INFLATE, vdi_uuid)
-
-
-def deflate(linstor, vdi_uuid, vdi_path, new_size, old_size):
-    new_size = LinstorVolumeManager.round_up_volume_size(new_size)
-    if new_size >= old_size:
-        return
-
-    util.SMlog(
-        'Deflate {} (new size={}, previous={})'
-        .format(vdi_uuid, new_size, old_size)
-    )
-
-    LinstorVhdUtil(None, linstor).set_size_phys(vdi_path, new_size)
-    # TODO: Change the LINSTOR volume size using linstor.resize_volume.
-
-
 IPS_XHA_CACHE = None
 
 
@@ -1390,7 +1325,7 @@ class LinstorSR(SR.SR):
             current_size - vhdutil.VHD_FOOTER_SIZE,
             vhdutil.VHD_FOOTER_SIZE
         )
-        deflate(self._linstor, vdi_uuid, vdi.path, old_size, current_size)
+        self._vhdutil.deflate(vdi_uuid, vdi.path, old_size, current_size)
 
     def _handle_interrupted_clone(
         self, vdi_uuid, clone_info, force_undo=False
@@ -1502,9 +1437,9 @@ class LinstorSR(SR.SR):
         # Inflate to the right size.
         if base_type == vhdutil.VDI_TYPE_VHD:
             vdi = self.vdi(vdi_uuid)
-            volume_size = compute_volume_size(vdi.size, vdi.vdi_type)
-            inflate(
-                self._journaler, self._linstor, vdi_uuid, vdi.path,
+            volume_size = LinstorVhdUtil.compute_volume_size(vdi.size, vdi.vdi_type)
+            self._vhdutil.inflate(
+                self._journaler, vdi_uuid, vdi.path,
                 volume_size, vdi.capacity
             )
             self.vdis[vdi_uuid] = vdi
@@ -1619,8 +1554,6 @@ class LinstorVDI(VDI.VDI):
     TYPE_RAW = 'raw'
     TYPE_VHD = 'vhd'
 
-    MAX_SIZE = 2 * 1024 * 1024 * 1024 * 1024  # Max VHD size.
-
     # Metadata size given to the "S" param of vhd-util create.
     # "-S size (MB) for metadata preallocation".
     # Increase the performance when resize is called.
@@ -1717,7 +1650,7 @@ class LinstorVDI(VDI.VDI):
 
         # 2. Compute size and check space available.
         size = vhdutil.validate_and_round_vhd_size(long(size))
-        volume_size = compute_volume_size(size, self.vdi_type)
+        volume_size = LinstorVhdUtil.compute_volume_size(size, self.vdi_type)
         util.SMlog(
             'LinstorVDI.create: type={}, vhd-size={}, volume-size={}'
             .format(self.vdi_type, size, volume_size)
@@ -1869,7 +1802,7 @@ class LinstorVDI(VDI.VDI):
             if (
                 self.vdi_type == vhdutil.VDI_TYPE_RAW or
                 not writable or
-                self.capacity >= compute_volume_size(self.size, self.vdi_type)
+                self.capacity >= LinstorVhdUtil.compute_volume_size(self.size, self.vdi_type)
             ):
                 need_inflate = False
 
@@ -1938,7 +1871,7 @@ class LinstorVDI(VDI.VDI):
 
         # The VDI is already deflated if the VHD image size + metadata is
         # equal to the LINSTOR volume size.
-        volume_size = compute_volume_size(self.size, self.vdi_type)
+        volume_size = LinstorVhdUtil.compute_volume_size(self.size, self.vdi_type)
         already_deflated = self.capacity <= volume_size
 
         if already_deflated:
@@ -2000,7 +1933,7 @@ class LinstorVDI(VDI.VDI):
 
         # Compute the virtual VHD and DRBD volume size.
         size = vhdutil.validate_and_round_vhd_size(long(size))
-        volume_size = compute_volume_size(size, self.vdi_type)
+        volume_size = LinstorVhdUtil.compute_volume_size(size, self.vdi_type)
         util.SMlog(
             'LinstorVDI.resize: type={}, vhd-size={}, volume-size={}'
             .format(self.vdi_type, size, volume_size)
@@ -2033,7 +1966,7 @@ class LinstorVDI(VDI.VDI):
             self._linstor.resize(self.uuid, new_volume_size)
         else:
             if new_volume_size != old_volume_size:
-                inflate(
+                self.sr._vhdutil.inflate(
                     self.sr._journaler, self._linstor, self.uuid, self.path,
                     new_volume_size, old_volume_size
                 )
diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index 1f89822..d2fb884 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -1383,8 +1383,6 @@ class LVHDVDI(VDI):
 class LinstorVDI(VDI):
     """Object representing a VDI in a LINSTOR SR"""
 
-    MAX_SIZE = 2 * 1024 * 1024 * 1024 * 1024  # Max VHD size.
-
     VOLUME_LOCK_TIMEOUT = 30
 
     def load(self, info=None):
@@ -1408,8 +1406,41 @@ class LinstorVDI(VDI):
         self.parentUuid = info.parentUuid
         self.sizeVirt = info.sizeVirt
         self._sizeVHD = info.sizePhys
+        self.drbd_size = self.sr._vhdutil.get_drbd_size(self.uuid)
         self.hidden = info.hidden
         self.scanError = False
+        self.vdi_type = vhdutil.VDI_TYPE_VHD
+
+    def getDriverName(self):
+        if self.raw:
+            return self.DRIVER_NAME_RAW
+        return self.DRIVER_NAME_VHD
+
+    def inflate(self, size):
+        if self.raw:
+            return
+        self.sr.lock()
+        try:
+            self.sr._vhdutil.inflate(self.sr.journaler, self.uuid, self.path, size, self.drbd_size)
+        finally:
+            self.sr.unlock()
+        self.drbd_size = self.sr._vhdutil.get_drbd_size(self.uuid)
+        self._sizeVHD = self.sr._vhdutil.get_size_phys(self.uuid)
+
+    def deflate(self):
+        if self.raw:
+            return
+        self.sr.lock()
+        try:
+            self.sr._vhdutil.deflate(self.uuid, self.path, self._sizeVHD, self.drbd_size)
+        finally:
+            self.sr.unlock()
+        self.drbd_size = self.sr._vhdutil.get_drbd_size(self.uuid)
+        self._sizeVHD = self.sr._vhdutil.get_size_phys(self.uuid)
+
+    def inflateFully(self):
+        if not self.raw:
+            self.inflate(LinstorVhdUtil.compute_volume_size(self.sizeVirt, self.vdi_type))
 
     def rename(self, uuid):
         Util.log('Renaming {} -> {} (path={})'.format(
@@ -1432,7 +1463,7 @@ class LinstorVDI(VDI):
         VDI.delete(self)
 
     def validate(self, fast=False):
-        if not self.sr._vhdutil.check(self.uuid, fast=fast):
+        if not self.raw and not self.sr._vhdutil.check(self.uuid, fast=fast):
             raise util.SMException('VHD {} corrupted'.format(self))
 
     def pause(self, failfast=False):
@@ -1444,18 +1475,6 @@ class LinstorVDI(VDI):
     def coalesce(self):
         # Note: We raise `SMException` here to skip the current coalesce in case of failure.
         # Using another exception we can't execute the next coalesce calls.
-        try:
-            drbd_size = self.sr._vhdutil.get_drbd_size(self.uuid)
-        except Exception as e:
-            raise util.SMException(
-                'VDI {} could not be coalesced because the DRBD block size cannot be read: {}'
-                .format(self.uuid, e))
-
-        if self._sizeVHD > drbd_size:
-            raise util.SMException(
-                'VDI {} could not be coalesced because VHD phys size > DRBD block size ({} > {})'
-                .format(self.uuid, self._sizeVHD, drbd_size))
-
         self.sr._vhdutil.force_coalesce(self.path)
 
     def getParent(self):
@@ -1505,6 +1524,22 @@ class LinstorVDI(VDI):
             Util.log("Failed to update %s with vhd-parent field %s" % \
                      (self.uuid, self.parentUuid))
 
+    def _doCoalesce(self):
+        try:
+            self._activateChain()
+            self.parent.validate()
+            self._inflateParentForCoalesce()
+            VDI._doCoalesce(self)
+        finally:
+            self.parent._sizeVHD = self.sr._vhdutil.get_size_phys(self.parent.uuid)
+            self.parent.deflate()
+
+    def _activateChain(self):
+        vdi = self
+        while vdi:
+            p = self.sr._linstor.get_device_path(vdi.uuid)
+            vdi = vdi.parent
+
     def _setHidden(self, hidden=True):
         HIDDEN_TAG = 'hidden'
 
@@ -1516,9 +1551,52 @@ class LinstorVDI(VDI):
         else:
             VDI._setHidden(self, hidden)
 
+    def _setSizeVirt(self, size):
+        jfile = self.uuid + '-jvhd'
+        self.sr._linstor.create_volume(
+            jfile, vhdutil.MAX_VHD_JOURNAL_SIZE, persistent=False, volume_name=jfile
+        )
+        try:
+            self.inflate(LinstorVhdUtil.compute_volume_size(size, self.vdi_type))
+            self.sr._vhdutil.set_size_virt(size, jfile)
+        finally:
+            try:
+                self.sr._linstor.destroy_volume(jfile)
+            except Exception:
+                # We can ignore it, in any case this volume is not persistent.
+                pass
+
     def _queryVHDBlocks(self):
         return self.sr._vhdutil.get_block_bitmap(self.uuid)
 
+    def _inflateParentForCoalesce(self):
+        if self.parent.raw:
+            return
+        inc = self._calcExtraSpaceForCoalescing()
+        if inc > 0:
+            self.parent.inflate(self.parent.drbd_size + inc)
+
+    def _calcExtraSpaceForCoalescing(self):
+        if self.parent.raw:
+            return 0
+        size_coalesced = LinstorVhdUtil.compute_volume_size(
+            self._getCoalescedSizeData(), self.vdi_type
+        )
+        Util.log("Coalesced size = %s" % Util.num2str(size_coalesced))
+        return size_coalesced - self.parent.drbd_size
+
+    def _calcExtraSpaceForLeafCoalescing(self):
+        assert self.drbd_size > 0
+        assert self._sizeVHD > 0
+        deflate_diff = self.drbd_size - LinstorVolumeManager.round_up_volume_size(self._sizeVHD)
+        assert deflate_diff >= 0
+        return self._calcExtraSpaceForCoalescing() - deflate_diff
+
+    def _calcExtraSpaceForSnapshotCoalescing(self):
+        assert self._sizeVHD > 0
+        return self._calcExtraSpaceForCoalescing() + \
+            LinstorVolumeManager.round_up_volume_size(self._sizeVHD)
+
 ################################################################################
 #
 # SR
@@ -3062,17 +3140,19 @@ class LinstorSR(SR):
 
         return all_vdi_info
 
-    # TODO: Maybe implement _liveLeafCoalesce/_prepareCoalesceLeaf/
-    # _finishCoalesceLeaf/_updateSlavesOnResize like LVM plugin.
+    def _prepareCoalesceLeaf(self, vdi):
+        vdi._activateChain()
+        vdi.deflate()
+        vdi._inflateParentForCoalesce()
+
+    def _finishCoalesceLeaf(self, parent):
+        if not parent.isSnapshot() or parent.isAttachedRW():
+            parent.inflateFully()
+        else:
+            parent.deflate()
 
     def _calcExtraSpaceNeeded(self, child, parent):
-        meta_overhead = vhdutil.calcOverheadEmpty(LinstorVDI.MAX_SIZE)
-        bitmap_overhead = vhdutil.calcOverheadBitmap(parent.sizeVirt)
-        virtual_size = LinstorVolumeManager.round_up_volume_size(
-            parent.sizeVirt + meta_overhead + bitmap_overhead
-        )
-        volume_size = self._linstor.get_volume_size(parent.uuid)
-        return virtual_size - volume_size
+        return self._linstor.compute_volume_size(parent.sizeVirt, parent.vdi_type) - parent.drbd_size
 
     def _hasValidDevicePath(self, uuid):
         try:
diff --git a/drivers/linstorvhdutil.py b/drivers/linstorvhdutil.py
index 3ce7ab9..239a10a 100644
--- a/drivers/linstorvhdutil.py
+++ b/drivers/linstorvhdutil.py
@@ -14,6 +14,8 @@
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
 
+from linstorjournaler import LinstorJournaler
+from linstorvolumemanager import LinstorVolumeManager
 import base64
 import distutils.util
 import errno
@@ -133,6 +135,8 @@ def linstormodifier():
 
 
 class LinstorVhdUtil:
+    MAX_SIZE = 2 * 1024 * 1024 * 1024 * 1024  # Max VHD size.
+
     def __init__(self, session, linstor):
         self._session = session
         self._linstor = linstor
@@ -225,6 +229,10 @@ class LinstorVhdUtil:
     def create(self, path, size, static, msize=0):
         return self._call_local_vhd_util_or_fail(vhdutil.create, path, size, static, msize)
 
+    @linstormodifier()
+    def set_size_virt(self, path, size, jfile):
+        return self._call_local_vhd_util_or_fail(vhdutil.setSizeVirt, path, size, jfile)
+
     @linstormodifier()
     def set_size_virt_fast(self, path, size):
         return self._call_local_vhd_util_or_fail(vhdutil.setSizeVirtFast, path, size)
@@ -253,6 +261,56 @@ class LinstorVhdUtil:
     def snapshot(self, path, parent, parentRaw, msize=0, checkEmpty=True):
         return self._call_local_vhd_util_or_fail(vhdutil.snapshot, path, parent, parentRaw, msize, checkEmpty)
 
+    def inflate(self, journaler, vdi_uuid, vdi_path, new_size, old_size):
+        # Only inflate if the LINSTOR volume capacity is not enough.
+        new_size = LinstorVolumeManager.round_up_volume_size(new_size)
+        if new_size <= old_size:
+            return
+
+        util.SMlog(
+            'Inflate {} (size={}, previous={})'
+            .format(vdi_uuid, new_size, old_size)
+        )
+
+        journaler.create(
+            LinstorJournaler.INFLATE, vdi_uuid, old_size
+        )
+        self._linstor.resize_volume(vdi_uuid, new_size)
+
+        # TODO: Replace pylint comment with this feature when possible:
+        # https://github.com/PyCQA/pylint/pull/2926
+        result_size = self.get_drbd_size(vdi_uuid)  # pylint: disable = E1120
+        if result_size < new_size:
+            util.SMlog(
+                'WARNING: Cannot inflate volume to {}B, result size: {}B'
+                .format(new_size, result_size)
+            )
+
+        if not util.zeroOut(
+            vdi_path, result_size - vhdutil.VHD_FOOTER_SIZE,
+            vhdutil.VHD_FOOTER_SIZE
+        ):
+            raise xs_errors.XenError(
+                'EIO',
+                opterr='Failed to zero out VHD footer {}'.format(vdi_path)
+            )
+
+        self.set_size_phys(vdi_path, result_size, False)
+        journaler.remove(LinstorJournaler.INFLATE, vdi_uuid)
+
+    def deflate(self, vdi_uuid, vdi_path, new_size, old_size):
+        new_size = LinstorVolumeManager.round_up_volume_size(new_size)
+        if new_size >= old_size:
+            return
+
+        util.SMlog(
+            'Deflate {} (new size={}, previous={})'
+            .format(vdi_uuid, new_size, old_size)
+        )
+
+        self.set_size_phys(vdi_path, new_size)
+        # TODO: Change the LINSTOR volume size using linstor.resize_volume.
+
     # --------------------------------------------------------------------------
     # Remote setters: write locally and try on another host in case of failure.
     # --------------------------------------------------------------------------
@@ -273,6 +331,23 @@ class LinstorVhdUtil:
     def force_repair(self, path):
         return self._call_vhd_util(vhdutil.repair, 'repair', path, use_parent=False)
 
+    # --------------------------------------------------------------------------
+    # Static helpers.
+    # --------------------------------------------------------------------------
+
+    @classmethod
+    def compute_volume_size(cls, virtual_size, image_type):
+        if image_type == vhdutil.VDI_TYPE_VHD:
+            # All LINSTOR VDIs have the metadata area preallocated for
+            # the maximum possible virtual size (for fast online VDI.resize).
+            meta_overhead = vhdutil.calcOverheadEmpty(cls.MAX_SIZE)
+            bitmap_overhead = vhdutil.calcOverheadBitmap(virtual_size)
+            virtual_size += meta_overhead + bitmap_overhead
+        elif image_type != vhdutil.VDI_TYPE_RAW:
+            raise Exception('Invalid image type: {}'.format(image_type))
+
+        return LinstorVolumeManager.round_up_volume_size(virtual_size)
+
     # --------------------------------------------------------------------------
     # Helpers.
     # --------------------------------------------------------------------------
