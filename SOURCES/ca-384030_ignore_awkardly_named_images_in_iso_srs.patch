CA-384030 Ignore awkardly named images in ISO SRs

From: Robin Newton <robin.newton@cloud.com>
    
* Use os.listdir rather than util.listdir for finding images in an SMB share.
  I don't really know why the latter exists, but I didn't want to get
  side-tracked by the question of whether it could be eliminated or (if not)
  how it should best handle non-ascii characters in filenames - especially as I
  doubt that's ever an issue outside of ISOSR.py.
* Refactor the identification of images so that finding and filtering are in a
  single function.
* When looking for image files in a mounted directory, ignore ones with
  problematic names. This covers non-utf-8 names (which will always be a
  problem, but that aren't likely to occur in this context), and names
  that have had their utf-8 encodings mangled by Python's filesystem
  encodings (which I'm anticipating will stop being a problem with Python
  3.7 and later).
* When an ISO SR is being created, look to see if there are image files
  with problematic names, but if there are create an alert message
  rather than refuse to create the SR.
    
Signed-off-by: Robin Newton <robin.newton@cloud.com>


diff --git a/drivers/ISOSR.py b/drivers/ISOSR.py
index 158ab1e..f5ed929 100755
--- a/drivers/ISOSR.py
+++ b/drivers/ISOSR.py
@@ -54,20 +54,84 @@ SMB_VERSION_3 = '3.0'
 NFSPORT = 2049
 
 
-def is_image_utf8_compatible(s):
+def list_images(path):
+    """
+    Finds the iso and img files in a given directory that have valid unicode
+    names. Returns a list of these, together with a count of number of image
+    files that had to be ignored due to encoding issues in their names.
+    """
     # pylint: disable=no-member
+
     regex = re.compile(r"\.iso$|\.img$", re.I)
-    if regex.search(s) is None:
-        return False
+    images = []
+    num_images_ignored = 0
 
-    # Check for extended characters
-    if type(s) == str:
-        try:
-            s.encode('utf-8')
-        except UnicodeEncodeError as e:
-            util.SMlog("WARNING: This string is not UTF-8 compatible.")
-            return False
-    return True
+    for filename in os.listdir(path):
+        if not regex.search(filename):
+            # Not an image file
+            pass
+        elif os.path.isdir(os.path.join(path, filename)):
+            util.SMlog("list_images: '%s' is a directory. Ignore"
+                       % loggable_filename(filename))
+        else:
+            try:
+                if is_consistent_utf8_filename(filename):
+                    images.append(filename)
+                else:
+                    num_images_ignored += 1
+                    util.SMlog("WARNING: ignoring image file '%s' due to"
+                               " encoding issues"
+                               % loggable_filename(filename))
+            except UnicodeDecodeError as e:
+                num_images_ignored += 1
+                util.SMlog("WARNING: ignoring image file '%s' as its name is"
+                           " not UTF-8 compatible"
+                           % loggable_filename(filename))
+
+    return images, num_images_ignored
+
+
+def loggable_filename(filename):
+    # Strip the 'b"' and '"' off the string representation of bytes
+    return str(os.fsencode(filename))[2:-1]
+
+
+def is_consistent_utf8_filename(filename):
+    """
+    Determines whether a filename, which is assumed to come from a filesystem
+    where names are UTF-8 encoded, is consistent in the sense that its name in
+    the form we'd like to use it (that is, as valid unicode) is the same as
+    the form it needs to take when passed to Python library functions (e.g.
+    open, os.stat).
+
+    Raises UnicodeDecodeError if the name on the filesystem isn't UTF-8
+    encoded.
+    """
+    # We generally expect that names of files in the mounted file system will
+    # be utf-8 encoded. That need not always be true - for example, mount.cifs
+    # provides an "iocharset" option to control this. But we make no attempt
+    # to cope with, say, latin-1, and so such a file name will cause an
+    # exception.
+    #
+    # Even if a file's name is utf-8 encoded, we might still have to reject it
+    # for being "inconsistent". That's because Python's filesystem encoding
+    # (see `sys.getfilesystemencoding`) might be ascii rather than utf-8, in
+    # which case non-ascii characters in file names will show up as "surrogate
+    # escapes" - which makes them technically not valid as unicode.
+    #
+    # Although it would be easy enough to recover the originally intended name
+    # for such a file, it would be awkward elsewhere in the code base either
+    # to have invalid unicode in file paths, or to have file paths that needed
+    # massaging before they could be used for actual file operations. Hence
+    # we say the name is inconsistent.
+    #
+    # From Python 3.7 onwards it looks like it should be much more likely that
+    # the filesystem encoding will be utf-8, which will hopefully mean that we
+    # would then get previously rejected image files showing up, and working
+    # without further code changes being necessary.
+
+    filename_bytes = os.fsencode(filename)
+    return filename == filename_bytes.decode("utf-8")
 
 
 def tools_iso_name(filename):
@@ -128,21 +192,9 @@ class ISOSR(SR.SR):
         if self.vdis:
             return
 
-        for name in filter(is_image_utf8_compatible,
-                util.listdir(self.path, quiet=True)):
-            fileName = self.path + "/" + name
-            if os.path.isdir(fileName):
-                util.SMlog("_loadvdis : %s is a directory. Ignore" % fileName)
-                continue
-
-            # CA-80254: Check for iso/img files whose name consists of extended
-            # characters.
-            try:
-                name.encode('ascii')
-            except UnicodeEncodeError:
-                raise xs_errors.XenError('CIFSExtendedCharsNotSupported', \
-                        opterr='The repository contains at least one file whose name consists of extended characters.')
+        image_names, _ = list_images(self.path)
 
+        for name in image_names:
             self.vdis[name] = ISOVDI(self, name)
             # Set the VDI UUID if the filename is of the correct form.
             # Otherwise, one will be generated later in VDI._db_introduce.
@@ -613,15 +665,15 @@ class ISOSR(SR.SR):
             smconfig['iso_type'] = self.dconf['type']
             self.session.xenapi.SR.set_sm_config(self.sr_ref, smconfig)
 
-        # CA-80254: Check for iso/img files whose name consists of extended
-        # characters.
-        for f in util.listdir(self.path, quiet=True):
-            if is_image_utf8_compatible(f):
-                try:
-                    f.encode('ascii')
-                except UnicodeEncodeError:
-                    raise xs_errors.XenError('CIFSExtendedCharsNotSupported',
-                            opterr='The repository contains at least one file whose name consists of extended characters.')
+        _, num_images_ignored = list_images(self.path)
+        if num_images_ignored > 0:
+            xapi = self.session.xenapi
+            xapi.message.create("DISK_IMAGES_IGNORED",
+                                "4",
+                                "SR",
+                                self.uuid,
+                                "Ignored disk image file(s) due to"
+                                " file name encoding issues")
 
         self.detach(sr_uuid)
 
diff --git a/tests/test_ISOSR.py b/tests/test_ISOSR.py
index 5b4f8dc..03a4961 100644
--- a/tests/test_ISOSR.py
+++ b/tests/test_ISOSR.py
@@ -5,6 +5,9 @@ import unittest
 import util
 import SR
 import errno
+import os
+import sys
+import tempfile
 import testlib
 
 
@@ -517,3 +520,191 @@ class TestISOSR_overSMB(unittest.TestCase):
         with self.assertRaises(SR.SROSError) as exp:
             smbsr.attach(None)
         self.assertEqual(exp.exception.errno, context.get_error_code("SMBMount"))
+
+
+class TestISOSR_functions(unittest.TestCase):
+    def test_is_consistent_utf8_filename(self):
+        with PatchFSEncoder() as fs_encoder:
+            # Expectations:
+            # - ascii filename should always show up as consistent (assuming the
+            #   file system encoding is either ascii or utf-8, which we do)
+            # - non-ascii utf-8 filenames are consistent when the file system
+            #   encoding is utf-8
+            # - non-utf-8 filenames should always cause an exception
+
+            simple_ascii = b"nothing fancy"
+            non_ascii_utf8 = b"snowman: \xe2\x98\x83"
+            non_utf8 = b"\xablatin-1\xbb"
+
+            cases = {
+                (simple_ascii, "utf-8"): True,
+                (simple_ascii, "ascii"): True,
+                (non_ascii_utf8, "utf-8"): True,
+                (non_ascii_utf8, "ascii"): False,
+                (non_utf8, "utf-8"): None,
+                (non_utf8, "ascii"): None
+            }
+
+            for filename_bytes, encoding in cases:
+                case_name = f"filename: {filename_bytes}, encoding '{encoding}'"
+                fs_encoder.set_encoding(encoding)
+                expectation = cases[filename_bytes, encoding]
+                name = os.fsdecode(filename_bytes)
+
+                if expectation is not None:
+                    self.assertEqual(ISOSR.is_consistent_utf8_filename(name),
+                                     expectation,
+                                     msg=case_name)
+                else:
+                    with self.assertRaises(UnicodeDecodeError, msg=case_name):
+                        ISOSR.is_consistent_utf8_filename(name)
+
+    def test_list_images(self):
+        with tempfile.TemporaryDirectory() as d:
+            # Given
+            should_find = {"ascii_name1.iso", "ascii_name2.img"}
+
+            shouldnt_find = {
+                "not_an_image.txt",
+                "misleadingly_named_directory.iso",
+                os.fsdecode(b"nom probl\xe9matique.iso")
+            }
+
+            # We anticipate that in Python 3.7 or later the fs encoding will
+            # be utf-8, which means these would be found.
+            might_find = {
+                os.fsdecode(b"\xf0\x9f\x8d\x8b.iso"),
+                os.fsdecode(b"nom_agr\xc3\xa9able.img")
+            }
+
+            for filename in should_find | shouldnt_find | might_find:
+                if "directory" in filename:
+                    os.mkdir(os.path.join(d, filename))
+                else:
+                    with open(os.path.join(d, filename), 'w'):
+                        pass
+
+            # When
+            found, num_ignored = ISOSR.list_images(d)
+
+            # Then
+            for filename in found:
+                self.assertTrue(os.path.isfile(os.path.join(d, filename)))
+            self.assertEqual(set(found) & shouldnt_find, set())
+            self.assertEqual(set(found) & should_find, should_find)
+            self.assertEqual(len(found) + num_ignored,
+                             len(should_find) + len(might_find) + 1)
+
+    @testlib.with_context
+    def test_list_images_filters_non_utf8_names(self, context):
+        with PatchFSEncoder() as fs_encoder:
+            # Given
+            images_dir = "/tmp/images"
+
+            fs_encoder.set_encoding("utf-8")
+
+            os.makedirs(images_dir)
+
+            for filename_bytes in (b"simple_ascii.iso",
+                                   b"g\xc3\xbcltigen_unicode.iso",
+                                   b"probl\xe9matique.iso"):
+                filename = os.fsdecode(filename_bytes)
+                with open(os.path.join(images_dir, filename), "w"):
+                    pass
+
+            # When
+            found, num_ignored = ISOSR.list_images(images_dir)
+
+            # Then
+            self.assertEqual(set(found),
+                             {"simple_ascii.iso", "g\u00fcltigen_unicode.iso"})
+            self.assertEqual(num_ignored, 1)
+
+    @testlib.with_context
+    def test_list_images_filters_non_ascii_names(self, context):
+        with PatchFSEncoder() as fs_encoder:
+            # Given
+
+            images_dir = "/tmp/images"
+
+            # This is the fs encoding in Python 3.6 when it's not set to anything
+            # else.
+            fs_encoder.set_encoding("ascii")
+
+            os.makedirs(images_dir)
+
+            for filename_bytes in (b"simple_ascii.iso",
+                                   b"g\xc3\xbcltigen_unicode.iso",
+                                   b"probl\xe9matique.iso"):
+                filename = os.fsdecode(filename_bytes)
+                with open(os.path.join(images_dir, filename), "w"):
+                    pass
+
+            # When
+            found, num_ignored = ISOSR.list_images(images_dir)
+
+            # Then
+            self.assertEqual(found, ["simple_ascii.iso"])
+            self.assertEqual(num_ignored, 2)
+
+    @mock.patch('util.SMlog', autospec=True)
+    @mock.patch('os.path.isdir', autospec=True)
+    @mock.patch('os.listdir', autospec=True)
+    @mock.patch('ISOSR.is_consistent_utf8_filename')
+    def test_list_images_reports_problem_filenames(self,
+                                                   mock_is_consistent,
+                                                   mock_listdir,
+                                                   mock_isdir,
+                                                   mock_SMlog):
+        # Given
+        images_dir = "aMountPoint"
+
+        mock_isdir.return_value = False
+        mock_listdir.return_value = ["bad.iso", "good.iso", "junk.iso"]
+        mock_is_consistent.side_effect = [
+            False,
+            True,
+            UnicodeDecodeError("utf-8", b'', 0, 0, "an error message")
+        ]
+
+        # When
+        found, num_ignored = ISOSR.list_images(images_dir)
+
+        # Then
+        self.assertEqual(found, ["good.iso"])
+        self.assertEqual(num_ignored, 2)
+
+        self.assertEqual(len(mock_SMlog.mock_calls), 2)
+
+        _, (log_message,), _ = mock_SMlog.mock_calls[0]
+        self.assertIn("'bad.iso'", log_message)
+
+        _, (log_message,), _ = mock_SMlog.mock_calls[1]
+        self.assertIn("'junk.iso'", log_message)
+
+
+class PatchFSEncoder:
+    def __init__(self, encoding="ascii"):
+        self.encoding = encoding
+        self.patch_fsencode = mock.patch("os.fsencode",
+                                         new=self.fake_fsencode)
+        self.patch_fsdecode = mock.patch("os.fsdecode",
+                                         new=self.fake_fsdecode)
+
+    def __enter__(self):
+        self.patch_fsencode.start()
+        self.patch_fsdecode.start()
+        return self
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        self.patch_fsencode.stop()
+        self.patch_fsdecode.stop()
+
+    def set_encoding(self, encoding):
+        self.encoding = encoding
+
+    def fake_fsencode(self, s):
+        return s.encode(self.encoding, "surrogateescape")
+
+    def fake_fsdecode(self, bs):
+        return bs.decode(self.encoding, "surrogateescape")
diff --git a/tests/testlib.py b/tests/testlib.py
index 9a18e7c..fe03779 100644
--- a/tests/testlib.py
+++ b/tests/testlib.py
@@ -130,6 +130,7 @@ class TestContext(object):
         self.patch('builtins.open', new=self.fake_open)
         self.patch('fcntl.fcntl', new=self.fake_fcntl)
         self.patch('os.path.exists', new=self.fake_exists)
+        self.patch('os.path.isdir', new=self.fake_isdir),
         self.patch('os.makedirs', new=self.fake_makedirs)
         self.patch('os.listdir', new=self.fake_listdir)
         self.patch('glob.glob', new=self.fake_glob)
@@ -237,6 +238,9 @@ class TestContext(object):
         self.log('not exists', fname)
         return False
 
+    def fake_isdir(self, fname):
+        return fname in self.get_created_directories()
+
     def fake_listdir(self, path):
         assert '*' not in path
         glob_pattern = path + '/*'
