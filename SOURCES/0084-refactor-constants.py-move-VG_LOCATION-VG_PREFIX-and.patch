From d9225728fb7fd323a3151668d070e0f4b7d0a9a8 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 23 Jan 2025 16:26:39 +0100
Subject: [PATCH] refactor(constants.py): move VG_LOCATION, VG_PREFIX and
 NS_PREFIX_LVM

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LVMSR.py          | 33 +++++++++++++++++----------------
 drivers/blktap2.py        |  3 ++-
 drivers/cleanup.py        | 22 ++++++++++++----------
 drivers/constants.py      |  9 +++++++++
 drivers/lvhd-thin         |  6 ++++--
 drivers/lvmanager.py      |  3 ++-
 drivers/lvmcache.py       |  4 +++-
 drivers/lvutil.py         |  3 +--
 drivers/tapdisk-pause     |  6 ++++--
 drivers/trim_util.py      |  6 ++++--
 drivers/verifyVHDsOnSR.py |  1 +
 tests/test_on_slave.py    | 18 ++++++++++--------
 12 files changed, 69 insertions(+), 45 deletions(-)

diff --git a/drivers/LVMSR.py b/drivers/LVMSR.py
index 908b1230..cd9e007a 100755
--- a/drivers/LVMSR.py
+++ b/drivers/LVMSR.py
@@ -41,6 +41,7 @@ import blktap2
 from journaler import Journaler
 from refcounter import RefCounter
 from ipc import IPCFlag
+from constants import NS_PREFIX_LVM, VG_LOCATION, VG_PREFIX
 from lvmanager import LVActivator
 from vditype import VdiType
 import XenAPI # pylint: disable=import-error
@@ -55,7 +56,7 @@ from xmlrpc.client import DateTime
 import glob
 from constants import CBTLOG_TAG
 from fairlock import Fairlock
-DEV_MAPPER_ROOT = os.path.join('/dev/mapper', lvhdutil.VG_PREFIX)
+DEV_MAPPER_ROOT = os.path.join('/dev/mapper', VG_PREFIX)
 
 geneology: Dict[str, List[str]] = {}
 CAPABILITIES = ["SR_PROBE", "SR_UPDATE", "SR_TRIM",
@@ -162,8 +163,8 @@ class LVMSR(SR.SR):
         self.lock = lock.Lock(lock.LOCK_TYPE_SR, self.uuid)
         self.sr_vditype = SR.DEFAULT_TAP
         self.uuid = sr_uuid
-        self.vgname = lvhdutil.VG_PREFIX + self.uuid
-        self.path = os.path.join(lvhdutil.VG_LOCATION, self.vgname)
+        self.vgname = VG_PREFIX + self.uuid
+        self.path = os.path.join(VG_LOCATION, self.vgname)
         self.mdpath = os.path.join(self.path, self.MDVOLUME_NAME)
         self.provision = self.PROVISIONING_DEFAULT
 
@@ -860,8 +861,8 @@ class LVMSR(SR.SR):
     @deviceCheck
     def probe(self) -> str:
         return lvutil.srlist_toxml(
-                lvutil.scan_srlist(lvhdutil.VG_PREFIX, self.dconf['device']),
-                lvhdutil.VG_PREFIX,
+                lvutil.scan_srlist(VG_PREFIX, self.dconf['device']),
+                VG_PREFIX,
                 ('metadata' in self.srcmd.params['sr_sm_config'] and \
                  self.srcmd.params['sr_sm_config']['metadata'] == 'true'))
 
@@ -990,7 +991,7 @@ class LVMSR(SR.SR):
         if base.readonly:
             self.lvmCache.setReadonly(base.name, False)
 
-        ns = lvhdutil.NS_PREFIX_LVM + self.uuid
+        ns = NS_PREFIX_LVM + self.uuid
         origRefcountBinary = RefCounter.check(origUuid, ns)[1]
         origRefcountNormal = 0
 
@@ -1248,7 +1249,7 @@ class LVMSR(SR.SR):
                 "action1": "refresh",
                 "lvName1": origLV,
                 "action2": "activate",
-                "ns2": lvhdutil.NS_PREFIX_LVM + self.uuid,
+                "ns2": NS_PREFIX_LVM + self.uuid,
                 "lvName2": baseLV,
                 "uuid2": baseUuid}
 
@@ -1288,7 +1289,7 @@ class LVMSR(SR.SR):
         args = {"vgName": self.vgname,
                 "action1": "cleanupLockAndRefcount",
                 "uuid1": baseUuid,
-                "ns1": lvhdutil.NS_PREFIX_LVM + self.uuid}
+                "ns1": NS_PREFIX_LVM + self.uuid}
 
         masterRef = util.get_this_host_ref(self.session)
         for hostRef in hostRefs:
@@ -1303,11 +1304,11 @@ class LVMSR(SR.SR):
 
     def _cleanup(self, skipLockCleanup=False):
         """delete stale refcounter, flag, and lock files"""
-        RefCounter.resetAll(lvhdutil.NS_PREFIX_LVM + self.uuid)
+        RefCounter.resetAll(NS_PREFIX_LVM + self.uuid)
         IPCFlag(self.uuid).clearAll()
         if not skipLockCleanup:
             lock.Lock.cleanupAll(self.uuid)
-            lock.Lock.cleanupAll(lvhdutil.NS_PREFIX_LVM + self.uuid)
+            lock.Lock.cleanupAll(NS_PREFIX_LVM + self.uuid)
 
     def _prepareTestMode(self):
         util.SMlog("Test mode: %s" % self.testMode)
@@ -1469,7 +1470,7 @@ class LVMVDI(VDI.VDI):
 
         try:
             self.sr.lvmCache.remove(self.lvname)
-            self.sr.lock.cleanup(vdi_uuid, lvhdutil.NS_PREFIX_LVM + sr_uuid)
+            self.sr.lock.cleanup(vdi_uuid, NS_PREFIX_LVM + sr_uuid)
             self.sr.lock.cleanupAll(vdi_uuid)
         except xs_errors.SRException as e:
             util.SMlog(
@@ -1786,7 +1787,7 @@ class LVMVDI(VDI.VDI):
             baseLV = lvhdutil.LV_PREFIX[self.vdi_type] + baseUuid
             self.sr.lvmCache.rename(self.lvname, baseLV)
             self.sr.lvActivator.replace(self.uuid, baseUuid, baseLV, False)
-            RefCounter.set(baseUuid, 1, 0, lvhdutil.NS_PREFIX_LVM + self.sr.uuid)
+            RefCounter.set(baseUuid, 1, 0, NS_PREFIX_LVM + self.sr.uuid)
             self.uuid = baseUuid
             self.lvname = baseLV
             self.path = os.path.join(self.sr.path, baseLV)
@@ -1861,7 +1862,7 @@ class LVMVDI(VDI.VDI):
         self.sr.lvmCache.create(snapLV, int(snapSizeLV))
         util.fistpoint.activate("LVHDRT_clone_vdi_after_lvcreate", self.sr.uuid)
         if isNew:
-            RefCounter.set(snapUuid, 1, 0, lvhdutil.NS_PREFIX_LVM + self.sr.uuid)
+            RefCounter.set(snapUuid, 1, 0, NS_PREFIX_LVM + self.sr.uuid)
         self.sr.lvActivator.add(snapUuid, snapLV, False)
         parentRaw = (self.vdi_type == VdiType.RAW)
         vhdutil.snapshot(snapPath, self.path, parentRaw, lvhdutil.MSIZE_MB)
@@ -1898,7 +1899,7 @@ class LVMVDI(VDI.VDI):
                 (not snapVDI2 or snap2Parent != self.uuid):
             util.SMlog("%s != %s != %s => deleting unused base %s" % \
                     (snapParent, self.uuid, snap2Parent, self.lvname))
-            RefCounter.put(self.uuid, False, lvhdutil.NS_PREFIX_LVM + self.sr.uuid)
+            RefCounter.put(self.uuid, False, NS_PREFIX_LVM + self.sr.uuid)
             self.sr.lvmCache.remove(self.lvname)
             self.sr.lvActivator.remove(self.uuid, False)
             if hostRefs:
@@ -1921,7 +1922,7 @@ class LVMVDI(VDI.VDI):
             # cannot affect the VDIs here because they cannot  possibly be
             # involved in coalescing at this point, and at the relinkSkip step
             # that activates the children, which takes the SR lock.)
-            ns = lvhdutil.NS_PREFIX_LVM + self.sr.uuid
+            ns = NS_PREFIX_LVM + self.sr.uuid
             (cnt, bcnt) = RefCounter.check(snapVDI.uuid, ns)
             RefCounter.set(self.uuid, bcnt + 1, 0, ns)
 
@@ -2124,7 +2125,7 @@ class LVMVDI(VDI.VDI):
     def _chainSetActive(self, active, binary, persistent=False):
         if binary:
             (count, bcount) = RefCounter.checkLocked(self.uuid,
-                lvhdutil.NS_PREFIX_LVM + self.sr.uuid)
+                NS_PREFIX_LVM + self.sr.uuid)
             if (active and bcount > 0) or (not active and bcount == 0):
                 return  # this is a redundant activation/deactivation call
 
diff --git a/drivers/blktap2.py b/drivers/blktap2.py
index d6af6032..68cad566 100755
--- a/drivers/blktap2.py
+++ b/drivers/blktap2.py
@@ -41,6 +41,7 @@ import json
 import xs_errors
 import XenAPI # pylint: disable=import-error
 import scsiutil
+from constants import NS_PREFIX_LVM
 from syslog import openlog, syslog
 from stat import *  # S_ISBLK(), ...
 from vditype import VdiType
@@ -1675,7 +1676,7 @@ class VDI(object):
             if hasattr(self.target.vdi.sr, 'DRIVER_TYPE') and \
                self.target.vdi.sr.DRIVER_TYPE == 'lvhd' and \
                VdiType.isCowImage(vdi_type):
-                lock = Lock("lvchange-p", lvhdutil.NS_PREFIX_LVM + sr_uuid)
+                lock = Lock("lvchange-p", NS_PREFIX_LVM + sr_uuid)
                 lock.acquire()
 
             # When we attach a static VDI for HA, we cannot communicate with
diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index 1da31ffd..3d22ef8d 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -53,6 +53,8 @@ from functools import reduce
 from time import monotonic as _time
 from vditype import VdiType, VdiTypeExtension, VDI_TYPE_TO_EXTENSION
 
+from constants import NS_PREFIX_LVM, VG_LOCATION, VG_PREFIX
+
 try:
     from linstorjournaler import LinstorJournaler
     from linstorvhdutil import LinstorVhdUtil
@@ -782,7 +784,7 @@ class VDI(object):
 
     def delete(self) -> None:
         "Physically delete the VDI"
-        lock.Lock.cleanup(self.uuid, lvhdutil.NS_PREFIX_LVM + self.sr.uuid)
+        lock.Lock.cleanup(self.uuid, NS_PREFIX_LVM + self.sr.uuid)
         lock.Lock.cleanupAll(self.uuid)
         self._clear()
 
@@ -1311,7 +1313,7 @@ class LVMVDI(VDI):
         if self.sr.lvActivator.get(oldUuid, False):
             self.sr.lvActivator.replace(oldUuid, self.uuid, self.fileName, False)
 
-        ns = lvhdutil.NS_PREFIX_LVM + self.sr.uuid
+        ns = NS_PREFIX_LVM + self.sr.uuid
         (cnt, bcnt) = RefCounter.check(oldUuid, ns)
         RefCounter.set(self.uuid, cnt, bcnt, ns)
         RefCounter.reset(oldUuid, ns)
@@ -1327,7 +1329,7 @@ class LVMVDI(VDI):
             self.sr.forgetVDI(self.uuid)
         finally:
             self.sr.unlock()
-        RefCounter.reset(self.uuid, lvhdutil.NS_PREFIX_LVM + self.sr.uuid)
+        RefCounter.reset(self.uuid, NS_PREFIX_LVM + self.sr.uuid)
         VDI.delete(self)
 
     @override
@@ -3031,8 +3033,8 @@ class LVMSR(SR):
 
     def __init__(self, uuid, xapi, createLock, force):
         SR.__init__(self, uuid, xapi, createLock, force)
-        self.vgName = "%s%s" % (lvhdutil.VG_PREFIX, self.uuid)
-        self.path = os.path.join(lvhdutil.VG_LOCATION, self.vgName)
+        self.vgName = "%s%s" % (VG_PREFIX, self.uuid)
+        self.path = os.path.join(VG_LOCATION, self.vgName)
 
         sr_ref = self.xapi.session.xenapi.SR.get_by_uuid(self.uuid)
         other_conf = self.xapi.session.xenapi.SR.get_other_config(sr_ref)
@@ -3158,7 +3160,7 @@ class LVMSR(SR):
         # this node is really the parent node) - minus 1 if it is online (since
         # non-leaf nodes increment their normal counts when they are online and
         # we are now a leaf, storing that 1 in the binary refcount).
-        ns = lvhdutil.NS_PREFIX_LVM + self.uuid
+        ns = NS_PREFIX_LVM + self.uuid
         cCnt, cBcnt = RefCounter.check(vdi.uuid, ns)
         pCnt, pBcnt = RefCounter.check(vdi.parent.uuid, ns)
         pCnt = pCnt - cBcnt
@@ -3224,7 +3226,7 @@ class LVMSR(SR):
             # refcount (best effort - assume that it had succeeded if the
             # second rename succeeded; if not, this adjustment will be wrong,
             # leading to a non-deactivation of the LV)
-            ns = lvhdutil.NS_PREFIX_LVM + self.uuid
+            ns = NS_PREFIX_LVM + self.uuid
             cCnt, cBcnt = RefCounter.check(child.uuid, ns)
             pCnt, pBcnt = RefCounter.check(parent.uuid, ns)
             pCnt = pCnt + cBcnt
@@ -3271,7 +3273,7 @@ class LVMSR(SR):
                 "lvName1": vdi.fileName,
                 "action2": "cleanupLockAndRefcount",
                 "uuid2": vdi.uuid,
-                "ns2": lvhdutil.NS_PREFIX_LVM + self.uuid}
+                "ns2": NS_PREFIX_LVM + self.uuid}
         onlineHosts = self.xapi.getOnlineHosts()
         abortFlag = IPCFlag(self.uuid)
         for pbdRecord in self.xapi.getAttachedPBDs():
@@ -3329,7 +3331,7 @@ class LVMSR(SR):
                 "lvName2": vdi.fileName,
                 "action3": "cleanupLockAndRefcount",
                 "uuid3": origParentUuid,
-                "ns3": lvhdutil.NS_PREFIX_LVM + self.uuid}
+                "ns3": NS_PREFIX_LVM + self.uuid}
         for slave in slaves:
             Util.log("Updating %s to %s on slave %s" % \
                     (oldNameLV, vdi.fileName,
@@ -4135,7 +4137,7 @@ def debug(sr_uuid, cmd, vdi_uuid):
         vdi._activate()
         print("VDI file: %s" % vdi.path)
     if cmd == "deactivate":
-        ns = lvhdutil.NS_PREFIX_LVM + sr.uuid
+        ns = NS_PREFIX_LVM + sr.uuid
         sr.lvmCache.deactivate(ns, vdi.uuid, vdi.fileName, False)
     if cmd == "inflate":
         vdi.inflateFully()
diff --git a/drivers/constants.py b/drivers/constants.py
index ed5ffc35..9ef79f33 100644
--- a/drivers/constants.py
+++ b/drivers/constants.py
@@ -1,4 +1,13 @@
+from sm_typing import Final
+
 EXT_PREFIX = 'XSLocalEXT-'
 CBT_BLOCK_SIZE = (64 * 1024)
 CBTLOG_TAG = "cbtlog"
 CBT_UTIL = "/usr/sbin/cbt-util"
+
+VG_LOCATION: Final = "/dev"
+VG_PREFIX: Final = "VG_XenStorage-"
+
+# Ref counting for VDI's: we need a ref count for LV activation/deactivation
+# on the master.
+NS_PREFIX_LVM: Final = "lvm-"
diff --git a/drivers/lvhd-thin b/drivers/lvhd-thin
index 8fdbbdd6..694c07fb 100755
--- a/drivers/lvhd-thin
+++ b/drivers/lvhd-thin
@@ -28,12 +28,14 @@ from journaler import Journaler
 import lvutil
 import os
 
+from constants import VG_PREFIX
+
 def attach(session, args):
     if util.is_master(session):
         os.environ['LVM_SYSTEM_DIR'] = lvutil.MASTER_LVM_CONF
     srUuid = args["srUuid"]
     vdiUuid = args["vdiUuid"]
-    vgName = "%s%s" % (lvhdutil.VG_PREFIX, srUuid)
+    vgName = "%s%s" % (VG_PREFIX, srUuid)
     lvmCache = LVMCache(vgName)
     journaler = Journaler(lvmCache)
     try:
@@ -48,7 +50,7 @@ def detach(session, args):
         os.environ['LVM_SYSTEM_DIR'] = lvutil.MASTER_LVM_CONF
     srUuid = args["srUuid"]
     vdiUuid = args["vdiUuid"]
-    vgName = "%s%s" % (lvhdutil.VG_PREFIX, srUuid)
+    vgName = "%s%s" % (VG_PREFIX, srUuid)
     lvmCache = LVMCache(vgName)
     try:
         lvhdutil.detachThin(session, lvmCache, args["srUuid"], args["vdiUuid"])
diff --git a/drivers/lvmanager.py b/drivers/lvmanager.py
index c819afa9..86f25b0b 100644
--- a/drivers/lvmanager.py
+++ b/drivers/lvmanager.py
@@ -20,6 +20,7 @@ import time
 import util
 import lvhdutil
 
+from constants import NS_PREFIX_LVM
 
 class LVManagerException(util.SMException):
     pass
@@ -42,7 +43,7 @@ class LVActivator:
     PERSISTENT = True
 
     def __init__(self, srUuid, lvmCache):
-        self.ns = lvhdutil.NS_PREFIX_LVM + srUuid
+        self.ns = NS_PREFIX_LVM + srUuid
         self.lvmCache = lvmCache
         self.lvActivations = dict()
         self.openFiles = dict()
diff --git a/drivers/lvmcache.py b/drivers/lvmcache.py
index 6e21568e..6731b210 100644
--- a/drivers/lvmcache.py
+++ b/drivers/lvmcache.py
@@ -20,6 +20,8 @@ import os
 import util
 import lvutil
 import lvhdutil
+
+from constants import NS_PREFIX_LVM
 from lock import Lock
 from refcounter import RefCounter
 
@@ -226,7 +228,7 @@ class LVMCache:
         path = self._getPath(lvName)
         if self.lvs[lvName].readonly != readonly:
             uuids = util.findall_uuid(path)
-            ns = lvhdutil.NS_PREFIX_LVM + uuids[0]
+            ns = NS_PREFIX_LVM + uuids[0]
             # Taking this lock is needed to avoid a race condition
             # with tap-ctl open (which is now taking the same lock)
             lock = Lock("lvchange-p", ns)
diff --git a/drivers/lvutil.py b/drivers/lvutil.py
index dfd9d5c5..5babe71a 100755
--- a/drivers/lvutil.py
+++ b/drivers/lvutil.py
@@ -26,8 +26,7 @@ from fairlock import Fairlock
 import util
 import xs_errors
 import xml.dom.minidom
-from lvhdutil import VG_LOCATION, VG_PREFIX
-from constants import EXT_PREFIX
+from constants import EXT_PREFIX, VG_LOCATION, VG_PREFIX
 import lvmcache
 import srmetadata
 
diff --git a/drivers/tapdisk-pause b/drivers/tapdisk-pause
index 40c6a71e..c63359fb 100755
--- a/drivers/tapdisk-pause
+++ b/drivers/tapdisk-pause
@@ -28,6 +28,8 @@ import XenAPI
 import lvhdutil
 import vhdutil
 import lvmcache
+
+from constants import NS_PREFIX_LVM, VG_PREFIX
 from vditype import VdiType
 
 try:
@@ -209,8 +211,8 @@ class Tapdisk:
             return str(False)
         if self.activate_parents:
             util.SMlog("Activating parents of %s" % self.vdi_uuid)
-            vg_name = lvhdutil.VG_PREFIX + self.sr_uuid
-            ns = lvhdutil.NS_PREFIX_LVM + self.sr_uuid
+            vg_name = VG_PREFIX + self.sr_uuid
+            ns = NS_PREFIX_LVM + self.sr_uuid
             lvm_cache = lvmcache.LVMCache(vg_name)
             lv_name = lvhdutil.LV_PREFIX[VdiType.VHD] + self.vdi_uuid
             vdi_list = vhdutil.getParentChain(lv_name,
diff --git a/drivers/trim_util.py b/drivers/trim_util.py
index a0edeaab..dc8b087e 100755
--- a/drivers/trim_util.py
+++ b/drivers/trim_util.py
@@ -25,6 +25,8 @@ import lvhdutil
 import vhdutil
 import lvutil
 
+from constants import VG_LOCATION, VG_PREFIX
+
 TRIM_LV_TAG = "_trim_lv"
 TRIM_CAP = "SR_TRIM"
 LOCK_RETRY_ATTEMPTS = 3
@@ -37,11 +39,11 @@ MASTER_LVM_CONF = '/etc/lvm/master'
 
 
 def _vg_by_sr_uuid(sr_uuid):
-    return lvhdutil.VG_PREFIX + sr_uuid
+    return VG_PREFIX + sr_uuid
 
 
 def _lvpath_by_vg_lv_name(vg_name, lv_name):
-    return os.path.join(lvhdutil.VG_LOCATION, vg_name, lv_name)
+    return os.path.join(VG_LOCATION, vg_name, lv_name)
 
 
 def to_xml(d):
diff --git a/drivers/verifyVHDsOnSR.py b/drivers/verifyVHDsOnSR.py
index e0a56f46..334e20a8 100755
--- a/drivers/verifyVHDsOnSR.py
+++ b/drivers/verifyVHDsOnSR.py
@@ -29,6 +29,7 @@ import vhdutil
 
 import VDI
 
+from constants import NS_PREFIX_LVM, VG_LOCATION, VG_PREFIX
 from lock import Lock
 from refcounter import RefCounter
 from vditype import VdiType
diff --git a/tests/test_on_slave.py b/tests/test_on_slave.py
index 3b28b1bf..5629db45 100644
--- a/tests/test_on_slave.py
+++ b/tests/test_on_slave.py
@@ -11,6 +11,8 @@ import util
 import vhdutil
 
 import on_slave
+
+from constants import NS_PREFIX_LVM
 from vditype import VdiType
 
 
@@ -185,7 +187,7 @@ class Test_on_slave_multi(unittest.TestCase):
         sr_uuid = str(uuid.uuid4())
         vdi_uuid = str(uuid.uuid4())
         vdi_fileName = "test-vdi.vhd"
-        lock_ref = lvhdutil.NS_PREFIX_LVM + sr_uuid
+        lock_ref = NS_PREFIX_LVM + sr_uuid
 
         args = {"vgName": vgName,
                 "action1": "deactivateNoRefcount",
@@ -234,7 +236,7 @@ class Test_on_slave_multi(unittest.TestCase):
         origParentUuid = str(uuid.uuid4())
         vdi_uuid = str(uuid.uuid4())
 
-        lock_ref = lvhdutil.NS_PREFIX_LVM + vdi_uuid
+        lock_ref = NS_PREFIX_LVM + vdi_uuid
 
         args = {"vgName": vgName,
                 "action1": "deactivateNoRefcount",
@@ -258,7 +260,7 @@ class Test_on_slave_multi(unittest.TestCase):
         vdi_uuid = str(uuid.uuid4())
         lv_name = 'test_lv'
 
-        lock_ref = lvhdutil.NS_PREFIX_LVM + sr_uuid
+        lock_ref = NS_PREFIX_LVM + sr_uuid
 
         args = {"vgName": vgName,
                 "action1": "activate",
@@ -289,7 +291,7 @@ class Test_on_slave_multi(unittest.TestCase):
         origParentUuid = str(uuid.uuid4())
         vdi_uuid = str(uuid.uuid4())
 
-        lock_ref = lvhdutil.NS_PREFIX_LVM + vdi_uuid
+        lock_ref = NS_PREFIX_LVM + vdi_uuid
 
         self.mock_lvmcache.deactivateNoRefcount.side_effect = util.CommandException(errno.EIO, 'activate')
 
@@ -318,7 +320,7 @@ class Test_on_slave_multi(unittest.TestCase):
         origParentUuid = str(uuid.uuid4())
         vdi_uuid = str(uuid.uuid4())
 
-        lock_ref = lvhdutil.NS_PREFIX_LVM + vdi_uuid
+        lock_ref = NS_PREFIX_LVM + vdi_uuid
 
         self.mock_lvmcache.activateNoRefcount.side_effect = util.CommandException(errno.EIO, 'activate')
 
@@ -344,7 +346,7 @@ class Test_on_slave_multi(unittest.TestCase):
         vdi_uuid = str(uuid.uuid4())
         lv_name = 'test_lv'
 
-        lock_ref = lvhdutil.NS_PREFIX_LVM + sr_uuid
+        lock_ref = NS_PREFIX_LVM + sr_uuid
 
         self.mock_lvmcache.activate.side_effect = util.CommandException(errno.EIO, 'activate')
 
@@ -374,7 +376,7 @@ class Test_on_slave_multi(unittest.TestCase):
         vdi_uuid = str(uuid.uuid4())
         lv_name = 'test_lv'
 
-        lock_ref = lvhdutil.NS_PREFIX_LVM + sr_uuid
+        lock_ref = NS_PREFIX_LVM + sr_uuid
 
         self.mock_lvmcache.activateNoRefcount.side_effect = util.CommandException(errno.EIO, 'activate')
 
@@ -405,7 +407,7 @@ class Test_on_slave_multi(unittest.TestCase):
         vdi_uuid = str(uuid.uuid4())
         lv_name = 'test_lv'
 
-        lock_ref = lvhdutil.NS_PREFIX_LVM + sr_uuid
+        lock_ref = NS_PREFIX_LVM + sr_uuid
 
         self.mock_lvmcache.deactivate.side_effect = util.CommandException(errno.EIO, 'activate')
 
