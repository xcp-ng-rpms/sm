From f5a1ae173fe0af8c91f125796f1785b6971d1405 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Mon, 17 Oct 2022 18:14:16 +0200
Subject: [PATCH 088/180] fix(linstorvolumemanager): robustify failed snapshots

- Ensure we can always rename a failed snap, so we must check if
  we have metadata in the KV-store. Otherwise an error is triggered
  because we are trying to copy a None object.
- If we can't delete a volume, rename it with a DELETED_ suffix,
  it's mandatory in specific cases to rollback snapshot transactions.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/linstorvolumemanager.py | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index d19effbe..44b247e8 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -951,7 +951,11 @@ class LinstorVolumeManager(object):
             volume_properties[self.PROP_UPDATING_UUID_SRC] = volume_uuid
 
             # 4. Copy the properties.
-            volume_properties[self.PROP_METADATA] = metadata
+            # Note: On new volumes, during clone for example, the metadata
+            # may be missing. So we must test it to avoid this error:
+            # "None has to be a str/unicode, but is <type 'NoneType'>"
+            if metadata:
+                volume_properties[self.PROP_METADATA] = metadata
             volume_properties[self.PROP_VOLUME_NAME] = volume_name
 
             # 5. Ok!
@@ -2289,6 +2293,16 @@ class LinstorVolumeManager(object):
                     'Cannot clean volume {}: {}'.format(volume_uuid, e)
                 )
 
+                # The volume can't be removed, maybe it's still in use,
+                # in this case rename it with the "DELETED_" prefix.
+                # This prefix is mandatory if it exists a snap transaction to
+                # rollback because the original VDI UUID can try to be renamed
+                # with the UUID we are trying to delete...
+                if not volume_uuid.startswith('DELETED_'):
+                    self.update_volume_uuid(
+                        volume_uuid, 'DELETED_' + volume_uuid, force=True
+                    )
+
         for dest_uuid, src_uuid in updating_uuid_volumes.items():
             dest_namespace = self._build_volume_namespace(dest_uuid)
 
