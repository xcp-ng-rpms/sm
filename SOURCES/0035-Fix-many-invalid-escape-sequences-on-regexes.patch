From 132f8c9b71b379501fdb9f990a603d24d8f1e9ad Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Fri, 11 Oct 2024 18:21:07 +0200
Subject: [PATCH] Fix many invalid escape sequences on regexes

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/util.py            | 4 ++--
 drivers/vhdutil.py         | 2 +-
 tests/test_storage_init.py | 4 ++--
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/util.py b/drivers/util.py
index ab6265fd..2efbcb18 100755
--- a/drivers/util.py
+++ b/drivers/util.py
@@ -1096,7 +1096,7 @@ def diskFromPartition(partition):
         return m.group(2)
 
     numlen = 0  # number of digit characters
-    m = re.match("\D+(\d+)", partition)
+    m = re.match(r"\D+(\d+)", partition)
     if m is not None:
         numlen = len(m.group(1))
 
@@ -1107,7 +1107,7 @@ def diskFromPartition(partition):
     # is it a mapper path?
     if partition.startswith("mapper"):
         if re.search("p[0-9]*$", partition):
-            numlen = len(re.match("\d+", partition[::-1]).group(0)) + 1
+            numlen = len(re.match(r"\d+", partition[::-1]).group(0)) + 1
             SMlog("Found mapper part, len %d" % numlen)
         else:
             numlen = 0
diff --git a/drivers/vhdutil.py b/drivers/vhdutil.py
index 6a71804c..8ac7b08d 100755
--- a/drivers/vhdutil.py
+++ b/drivers/vhdutil.py
@@ -206,7 +206,7 @@ def hasParent(path):
     cmd = [VHD_UTIL, "read", OPT_LOG_ERR, "-p", "-n", path]
     ret = ioretry(cmd)
     # pylint: disable=no-member
-    m = re.match(".*Disk type\s+: (\S+) hard disk.*", ret, flags=re.S)
+    m = re.match(r".*Disk type\s+: (\S+) hard disk.*", ret, flags=re.S)
     vhd_type = m.group(1)
     assert(vhd_type == "Differencing" or vhd_type == "Dynamic")
     return vhd_type == "Differencing"
diff --git a/tests/test_storage_init.py b/tests/test_storage_init.py
index 9b7138a4..d91d9089 100644
--- a/tests/test_storage_init.py
+++ b/tests/test_storage_init.py
@@ -355,7 +355,7 @@ sys.exit(resp.get("returncode", 0))
         combined_args = " ".join(sorted(args[1:]))
 
         if subcmd == "sm-list":
-            m = re.match("--minimal params=uuid type=(\S+)$", combined_args)
+            m = re.match(r"--minimal params=uuid type=(\S+)$", combined_args)
             if m:
                 sm_uuid = "uuid-for-sr-type-" + m.group(1)
                 return CmdResult(stdout=f"{sm_uuid}\n")
@@ -365,7 +365,7 @@ sys.exit(resp.get("returncode", 0))
                 if not self.created_srs:
                     return CmdResult()
 
-            m = re.match("--minimal params=uuid type=(\S+)$", combined_args)
+            m = re.match(r"--minimal params=uuid type=(\S+)$", combined_args)
             if m:
                 sr_type = m.group(1)
                 num_srs = len(self.created_srs[sr_type])
