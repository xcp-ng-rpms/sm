From a66785d388df43a7b698aa8485cef5ccd120358a Mon Sep 17 00:00:00 2001
From: Damien Thenot <damien.thenot@vates.tech>
Date: Tue, 22 Jul 2025 10:17:21 +0200
Subject: [PATCH] Fix unit tests with QCOW2 changes

Also add a fix to have phy vdi_type giving a raw cowutil
We also needed to patch pathlib.Path before any os.*

Signed-off-by: Damien Thenot <damien.thenot@vates.tech>
---
 drivers/blktap2.py     |  1 +
 drivers/cleanup.py     |  1 +
 drivers/cowutil.py     |  2 +-
 drivers/vditype.py     |  1 +
 tests/test_FileSR.py   |  7 ++++++-
 tests/test_blktap2.py  |  3 ++-
 tests/test_cleanup.py  | 13 ++++++++++---
 tests/test_on_slave.py |  4 ++--
 8 files changed, 24 insertions(+), 8 deletions(-)

diff --git a/drivers/blktap2.py b/drivers/blktap2.py
index 2f3036fd..ee4c3dc5 100755
--- a/drivers/blktap2.py
+++ b/drivers/blktap2.py
@@ -1683,6 +1683,7 @@ class VDI(object):
     def _check_journal_coalesce_chain(self, sr_uuid: str, vdi_uuid: str) -> bool:
         vdi_type = self.target.get_vdi_type()
         cowutil = getCowUtil(vdi_type)
+
         if not cowutil.isCoalesceableOnRemote(): #We only need to stop the coalesce in case of QCOW2
             return True
 
diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index 30f53b5b..1970ad7a 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -1505,6 +1505,7 @@ class LVMVDI(VDI):
     @override
     def _doCoalesce(self) -> None:
         """LVMVDI parents must first be activated, inflated, and made writable"""
+        was_ro = []
         try:
             self._activateChain()
             self.sr.lvmCache.setReadonly(self.parent.fileName, False)
diff --git a/drivers/cowutil.py b/drivers/cowutil.py
index 3c2aa463..9cae6e69 100755
--- a/drivers/cowutil.py
+++ b/drivers/cowutil.py
@@ -315,7 +315,7 @@ class CowUtil(ABC):
 # ------------------------------------------------------------------------------
 
 def getImageFormatFromVdiType(vdi_type: str) -> ImageFormat:
-    if vdi_type == VdiType.RAW:
+    if vdi_type == VdiType.RAW or vdi_type == VdiType.PHY:
         return ImageFormat.RAW
     if vdi_type == VdiType.VHD:
         return ImageFormat.VHD
diff --git a/drivers/vditype.py b/drivers/vditype.py
index dcae45c9..c7bdfe08 100644
--- a/drivers/vditype.py
+++ b/drivers/vditype.py
@@ -19,6 +19,7 @@ from sm_typing import Final
 # TODO: Use StrEnum in python 3.11.
 class VdiType(object):
     RAW = "aio"
+    PHY = "phy"
     VHD = "vhd"
     QCOW2 = "qcow2"
     ISO = "iso"
diff --git a/tests/test_FileSR.py b/tests/test_FileSR.py
index d0c08ae6..b25a1b77 100644
--- a/tests/test_FileSR.py
+++ b/tests/test_FileSR.py
@@ -49,6 +49,8 @@ class TestFileVDI(unittest.TestCase):
         endlog_patcher = mock.patch('FileSR.util.end_log_entry',
                                       autospec=True)
         self.mock_endlog = endlog_patcher.start()
+        pathlib_path_patcher = mock.patch("pathlib.Path", autospec=True)
+        self.mock_pathlib_path = pathlib_path_patcher.start()
         os_link_patcher = mock.patch('FileSR.os.link', autospec=True)
         self.mock_os_link = os_link_patcher.start()
         os_stat_patcher = mock.patch('FileSR.os.stat')
@@ -385,7 +387,10 @@ hidden: 0
         srcmd.cmd = "vdi_create"
         srcmd.dconf = {}
         srcmd.params = {
-            'command': 'vdi_create'
+            'command': 'vdi_create',
+            'vdi_sm_config': {
+                'image-format': 'vhd'
+            },
         }
         sr = FakeSharedFileSR(srcmd, sr_uuid)
         vdi = FileSR.FileVDI(sr, vdi_uuid)
diff --git a/tests/test_blktap2.py b/tests/test_blktap2.py
index e077a7b4..c791c9ae 100644
--- a/tests/test_blktap2.py
+++ b/tests/test_blktap2.py
@@ -231,7 +231,8 @@ class TestVDI(unittest.TestCase):
     @mock.patch('blktap2.VDI.BackendLink', autospec=True)
     @mock.patch('blktap2.VDI.NBDLink', autospec=True)
     @mock.patch('blktap2.Tapdisk')
-    def test_activate(self, mock_tapdisk, mock_nbd_link, mock_backend,
+    @mock.patch('blktap2.VDI._check_journal_coalesce_chain', autospec=True)
+    def test_activate(self, mock_checkjournalcoalesce, mock_tapdisk, mock_nbd_link, mock_backend,
                       mock_attach, mock_this_host, mock_sleep):
         """
         Test blktap2.VDI.activate, no cache, RW, success
diff --git a/tests/test_cleanup.py b/tests/test_cleanup.py
index 9fb58f20..953c6402 100644
--- a/tests/test_cleanup.py
+++ b/tests/test_cleanup.py
@@ -1491,8 +1491,9 @@ class TestSR(unittest.TestCase):
     @mock.patch('vhdutil.VhdUtil')
     @mock.patch('cleanup.journaler.Journaler', autospec=True)
     @mock.patch('cleanup.Util.runAbortable')
+    @mock.patch('cleanup.SR._create_running_file', autospec=True)
     def test_coalesce_success(
-            self, mock_abortable, mock_journaler, mock_vhdutil, mock_util,
+            self, mock_create_running_file, mock_abortable, mock_journaler, mock_vhdutil, mock_util,
             mock_unlink):
         """
         Non-leaf coalesce
@@ -1501,6 +1502,7 @@ class TestSR(unittest.TestCase):
 
         mock_abortable.side_effect = self.runAbortable
         mock_vhdutil.return_value.check.return_value = cowutil.CowUtil.CheckResult.Success
+        mock_vhdutil.return_value.isCoalesceableOnRemote.return_value = False
 
         sr_uuid = uuid4()
         sr = create_cleanup_sr(self.xapi_mock, uuid=str(sr_uuid))
@@ -1541,8 +1543,9 @@ class TestSR(unittest.TestCase):
     @mock.patch('vhdutil.VhdUtil')
     @mock.patch('cleanup.journaler.Journaler', autospec=True)
     @mock.patch('cleanup.Util.runAbortable')
+    @mock.patch('cleanup.SR._create_running_file', autospec=True)
     def test_coalesce_error(
-            self, mock_abortable, mock_journaler, mock_vhdutil, mock_util,
+            self, mock_running_file, mock_abortable, mock_journaler, mock_vhdutil, mock_util,
             mock_unlink):
         """
         Handle errors in coalesce
@@ -1552,6 +1555,7 @@ class TestSR(unittest.TestCase):
 
         self.xapi_mock.getConfigVDI.return_value = {}
 
+
         def run_abortable(func, ret, ns, abortTest, pollInterval, timeOut):
             raise util.SMException("Timed out")
 
@@ -1569,6 +1573,7 @@ class TestSR(unittest.TestCase):
         mock_journaler.get.return_value = None
 
         mock_vhdutil.return_value.getParent.return_value = vdis['parent'].path
+        mock_vhdutil.return_value.isCoalesceableOnRemote.return_value = False
 
         sr.coalesce(vdis['vdi'], False)
 
@@ -1580,8 +1585,9 @@ class TestSR(unittest.TestCase):
     @mock.patch('vhdutil.VhdUtil')
     @mock.patch('cleanup.journaler.Journaler', autospec=True)
     @mock.patch('cleanup.Util.runAbortable')
+    @mock.patch('cleanup.SR._create_running_file', autospec=True)
     def test_coalesce_error_raw_parent(
-            self, mock_abortable, mock_journaler, mock_vhdutil, mock_util,
+            self, mock_create_running_file, mock_abortable, mock_journaler, mock_vhdutil, mock_util,
             mock_unlink):
         """
         Handle errors in coalesce with raw parent
@@ -1609,6 +1615,7 @@ class TestSR(unittest.TestCase):
         mock_journaler.get.return_value = None
 
         mock_vhdutil.return_value.getParent.return_value = vdis['parent'].path
+        mock_vhdutil.return_value.isCoalesceableOnRemote.return_value = False
 
         sr.coalesce(vdis['vdi'], False)
 
diff --git a/tests/test_on_slave.py b/tests/test_on_slave.py
index 33792d8e..48f7e1bb 100644
--- a/tests/test_on_slave.py
+++ b/tests/test_on_slave.py
@@ -70,7 +70,7 @@ class Test_on_slave_is_open(unittest.TestCase):
 
     def test_is_open_lvm_success(self):
         """
-        LVM srs are uplifted to lvhd
+        LVM srs are uplifted to lvm
         """
         vdi_uuid = uuid.uuid4()
         mock_session = mock.MagicMock()
@@ -85,7 +85,7 @@ class Test_on_slave_is_open(unittest.TestCase):
                                        'vdiUuid': vdi_uuid,
                                        'srRef': 'opaqueref:sr_mine'
                                    })
-        self.mock_sr.driver.assert_called_once_with('lvhd')
+        self.mock_sr.driver.assert_called_once_with('lvm')
         self.assertEqual('True', is_open)
 
     def test_is_open_false(self):
