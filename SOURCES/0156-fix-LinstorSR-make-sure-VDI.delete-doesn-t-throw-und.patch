From a428724082121c6a61de9636efdeb3b0f2aead49 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 18 Jan 2024 11:18:11 +0100
Subject: [PATCH 156/180] fix(LinstorSR): make sure VDI.delete doesn't throw
 under specific conditions

If we can update the volume state in the KV-store, there is no reason to raise
in case of future failure for another reason. Why? Because the volume will be
deleted by the next GC execution.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py            |  9 ++++++++-
 drivers/linstorvolumemanager.py | 13 ++++++++++---
 2 files changed, 18 insertions(+), 4 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index fed1de2b..1e09e9bb 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -1760,7 +1760,14 @@ class LinstorVDI(VDI.VDI):
                 'Failed to remove the volume (maybe is leaf coalescing) '
                 'for {} err: {}'.format(self.uuid, e)
             )
-            raise xs_errors.XenError('VDIDelete', opterr=str(e))
+
+            try:
+                raise xs_errors.XenError('VDIDelete', opterr=str(e))
+            except LinstorVolumeManagerError as e:
+                if e.code != LinstorVolumeManagerError.ERR_VOLUME_DESTROY:
+                    raise xs_errors.XenError('VDIDelete', opterr=str(e))
+
+            return
 
         if self.uuid in self.sr.vdis:
             del self.sr.vdis[self.uuid]
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 32d15334..97e53725 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -272,7 +272,8 @@ def demote_drbd_resource(node_name, resource_name):
 class LinstorVolumeManagerError(Exception):
     ERR_GENERIC = 0,
     ERR_VOLUME_EXISTS = 1,
-    ERR_VOLUME_NOT_EXISTS = 2
+    ERR_VOLUME_NOT_EXISTS = 2,
+    ERR_VOLUME_DESTROY = 3
 
     def __init__(self, message, code=ERR_GENERIC):
         super(LinstorVolumeManagerError, self).__init__(message)
@@ -681,8 +682,14 @@ class LinstorVolumeManager(object):
         volume_properties = self._get_volume_properties(volume_uuid)
         volume_properties[self.PROP_NOT_EXISTS] = self.STATE_NOT_EXISTS
 
-        self._volumes.remove(volume_uuid)
-        self._destroy_volume(volume_uuid)
+        try:
+            self._volumes.remove(volume_uuid)
+            self._destroy_volume(volume_uuid)
+        except Exception as e:
+            raise LinstorVolumeManagerError(
+                str(e),
+                LinstorVolumeManagerError.ERR_VOLUME_DESTROY
+            )
 
     def lock_volume(self, volume_uuid, locked=True):
         """
