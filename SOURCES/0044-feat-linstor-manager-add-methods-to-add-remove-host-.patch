From 9b3251056ebd6e7b44c3049044add1a239731200 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Wed, 6 Apr 2022 17:53:02 +0200
Subject: [PATCH 44/54] feat(linstor-manager): add methods to add remove/host
 from LINSTOR SR

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py            |   6 +-
 drivers/linstor-manager         | 283 +++++++++++++++++++++++++++++++-
 drivers/linstorvolumemanager.py |  54 ++++++
 3 files changed, 338 insertions(+), 5 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index b7008fd..72a0114 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -401,7 +401,9 @@ class LinstorSR(SR.SR):
             self._ips = None
         else:
             self._ips = self.dconf['ips'].split(',')
-        self._redundancy = int(self.dconf['redundancy'] or 1)
+
+        if self.cmd == 'sr_create':
+            self._redundancy = int(self.dconf['redundancy']) or 1
         self._linstor = None  # Ensure that LINSTOR attribute exists.
         self._journaler = None
 
@@ -1004,7 +1006,7 @@ class LinstorSR(SR.SR):
         # ensures the displayed physical size is reachable by the user.
         self.physical_size = \
             self._linstor.min_physical_size * len(self._hosts) / \
-            self._redundancy
+            self._linstor.redundancy
 
         self.physical_utilisation = self._linstor.allocated_volume_size
 
diff --git a/drivers/linstor-manager b/drivers/linstor-manager
index 30230ad..7e34ce6 100755
--- a/drivers/linstor-manager
+++ b/drivers/linstor-manager
@@ -22,8 +22,7 @@ sys.path[0] = '/opt/xensource/sm/'
 
 import base64
 import distutils.util
-import time
-import subprocess
+import socket
 import XenAPIPlugin
 
 from linstorjournaler import LinstorJournaler
@@ -72,6 +71,9 @@ def update_minidrbdcluster_service(start):
     util.enable_and_start_service('minidrbdcluster', start)
 
 
+# ------------------------------------------------------------------------------
+
+
 def prepare_sr(session, args):
     try:
         update_all_ports(open=True)
@@ -338,6 +340,279 @@ def has_controller_running(session, args):
     return str(ret == 0)
 
 
+def add_host(session, args):
+    group_name = args['groupName']
+
+    # 1. Find SR and PBDs.
+    srs = dict()
+    for sr_ref, sr in session.xenapi.SR.get_all_records().items():
+        if sr.get('type') == 'linstor':
+            srs[sr_ref] = sr
+
+    pbds = dict()
+    for pbd_ref, pbd in session.xenapi.PBD.get_all_records().items():
+        device_config = pbd.get('device_config')
+        if (
+            device_config and
+            device_config.get('group-name') == group_name
+            and pbd['SR'] in srs
+        ):
+            pbds[pbd_ref] = pbd
+
+    # 2. Ensure there is at least one PBD and all PBDs are used in
+    # the same SR.
+    if not pbds:
+        raise Exception(
+            'Failed to find PBDs of group `{}`'.format(group_name)
+        )
+
+    sr_ref = None
+    for pbd in pbds.values():
+        if not sr_ref:
+            sr_ref = pbd['SR']
+        elif pbd['SR'] != sr_ref:
+            raise Exception(
+                'Group `{}` is used by many SRs!'.format(group_name)
+            )
+
+    # 3. Ensure node doesn't exist.
+    linstor = LinstorVolumeManager(
+        get_controller_uri(),
+        group_name,
+        logger=util.SMlog
+    )
+
+    node_name = socket.gethostname()
+    has_node = linstor.has_node(node_name)
+
+    pbd_id = 0
+    new_pbd_ref = None
+
+    try:
+        # 4. Enable services.
+        update_all_ports(open=True)
+        update_minidrbdcluster_service(start=True)
+        update_linstor_satellite_service(start=True)
+
+        # 5. Try to create local node.
+        if not has_node:
+            linstor.create_node(node_name, util.get_this_host_address(session))
+
+        # 6. Recreate PBDs.
+        # Use the redundancy given by Linstor instead of smapi config.
+        redundancy = linstor.redundancy
+        default_device_config = None
+        this_host = util.get_this_host_ref(session)
+        create_new_pbd = True
+
+        assert pbds
+        pbds = pbds.items()
+        for pbd_ref, pbd in pbds:
+            device_config = pbd['device_config']
+
+            hosts = filter(
+                lambda host: len(host.strip()),
+                device_config.get('hosts', []).split(',')
+            )
+            hosts.append(node_name)
+            hosts = ','.join(list(set(hosts)))
+
+            # Should be the same on all hosts.
+            provisioning = device_config['provisioning']
+
+            if not default_device_config:
+                default_device_config = {
+                    'group-name': group_name,
+                    'redundancy': redundancy,
+                    'hosts': hosts,
+                    'provisioning': provisioning
+                }
+
+            if pbd['currently_attached']:
+                session.xenapi.PBD.unplug(pbd_ref)
+            session.xenapi.PBD.destroy(pbd_ref)
+            pbd_id += 1
+
+            host = pbd['host']
+            if host == this_host:
+                create_new_pbd = False
+
+            pbd_ref = session.xenapi.PBD.create({
+                'host': host,
+                'SR': sr_ref,
+                'device_config': {
+                    'group-name': group_name,
+                    'redundancy': redundancy,
+                    'hosts': hosts,
+                    'provisioning': provisioning
+                }
+            })
+            try:
+                session.xenapi.PBD.plug(pbd_ref)
+            except Exception as e:
+                util.SMlog('Failed to replug PBD: {}'.format(e))
+
+        # 7. Create new PBD.
+        if create_new_pbd:
+            new_pbd_ref = session.xenapi.PBD.create({
+                'host': this_host,
+                'SR': sr_ref,
+                'device_config': default_device_config
+            })
+            try:
+                session.xenapi.PBD.plug(new_pbd_ref)
+            except Exception as e:
+                util.SMlog('Failed to plug new PBD: {}'.format(e))
+
+        return str(True)
+    except Exception as e:
+        stop_services = not has_node
+        if stop_services:
+            try:
+                linstor.destroy_node(node_name)
+            except Exception:
+                pass
+
+        for pbd_ref, pbd in pbds[:pbd_id]:
+            try:
+                session.xenapi.PBD.unplug(pbd_ref)
+            except Exception:
+                pass
+
+            try:
+                session.xenapi.PBD.destroy(pbd_ref)
+            except Exception:
+                pass
+
+            try:
+                device_config = pbd['device_config']
+                session.xenapi.PBD.create({
+                    'host': host,
+                    'SR': sr_ref,
+                    'device_config': {
+                        'group-name': group_name,
+                        'redundancy': redundancy,
+                        'hosts': device_config['hosts'],
+                        'provisioning': device_config['provisioning']
+                    }
+                })
+            except Exception as pbd_error:
+                util.SMlog('Failed to recreate PBD: {}'.format(pbd_error))
+                pass
+
+            try:
+                session.xenapi.PBD.plug(pbd_ref)
+            except Exception:
+                pass
+
+        if new_pbd_ref:
+            try:
+                session.xenapi.PBD.unplug(new_pbd_ref)
+            except Exception:
+                pass
+
+            try:
+                session.xenapi.PBD.destroy(new_pbd_ref)
+            except Exception:
+                pass
+
+        try:
+            # If we failed to remove the node, we don't stop services.
+            if stop_services and not linstor.has_node(node_name):
+                update_linstor_satellite_service(start=False)
+                update_minidrbdcluster_service(start=False)
+                update_all_ports(open=False)
+        except Exception:
+            pass
+
+        raise e
+
+
+def remove_host(session, args):
+    group_name = args['groupName']
+    force = args.get('force') or False
+
+    # 1. Find SRs and PBDs.
+    srs = dict()
+    for sr_ref, sr in session.xenapi.SR.get_all_records().items():
+        if sr.get('type') == 'linstor':
+            srs[sr_ref] = sr
+
+    pbds = dict()
+    for pbd_ref, pbd in session.xenapi.PBD.get_all_records().items():
+        device_config = pbd.get('device_config')
+        if (
+            device_config and
+            device_config.get('group-name') == group_name
+            and pbd['SR'] in srs
+        ):
+            pbds[pbd_ref] = pbd
+
+    # 2. Remove node.
+    linstor = LinstorVolumeManager(
+        get_controller_uri(),
+        group_name,
+        logger=util.SMlog
+    )
+
+    node_name = socket.gethostname()
+    if linstor.has_node(node_name):
+        linstor.destroy_node(node_name)
+        if linstor.has_node(node_name):
+            raise Exception('Failed to remove node! Unknown error.')
+
+    redundancy = linstor.redundancy
+    this_host = util.get_this_host_ref(session)
+
+    # 3. Update PBDs.
+    for pbd_ref, pbd in pbds.items():
+        host = pbd['host']
+        if host == this_host:
+            if pbd['currently_attached']:
+                session.xenapi.PBD.unplug(pbd_ref)
+            session.xenapi.PBD.destroy(pbd_ref)
+            continue
+
+        device_config = pbd['device_config']
+        hosts = device_config.get('hosts', []).split(',')
+        try:
+            hosts.remove(node_name)
+        except Exception as e:
+            continue
+        hosts = ','.join(list(set(hosts)))
+
+        if pbd['currently_attached']:
+            session.xenapi.PBD.unplug(pbd_ref)
+        session.xenapi.PBD.destroy(pbd_ref)
+
+        pbd_ref = session.xenapi.PBD.create({
+            'host': host,
+            'SR': pbd['SR'],
+            'device_config': {
+                'group-name': group_name,
+                'redundancy': redundancy,
+                'hosts': hosts,
+                'provisioning': device_config['provisioning']
+            }
+        })
+
+        try:
+            session.xenapi.PBD.plug(pbd_ref)
+        except Exception as e:
+            util.SMlog('Failed to replug PBD: {}'.format(e))
+
+    # 3. Stop services.
+    try:
+        update_linstor_satellite_service(start=False)
+        update_minidrbdcluster_service(start=False)
+        update_all_ports(open=False)
+    except Exception as e:
+        util.SMlog('Error while stopping services: {}'.format(e))
+        pass
+
+    return str('True')
+
+
 if __name__ == '__main__':
     XenAPIPlugin.dispatch({
         'prepareSr': prepare_sr,
@@ -357,5 +632,7 @@ if __name__ == '__main__':
         'getBlockBitmap': get_block_bitmap,
         'lockVdi': lock_vdi,
         'lsofResource': lsof_resource,
-        'hasControllerRunning': has_controller_running
+        'hasControllerRunning': has_controller_running,
+        'addHost': add_host,
+        'removeHost': remove_host
     })
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 2d5c63e..6c0d5aa 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -402,6 +402,15 @@ class LinstorVolumeManager(object):
         """
         return self._base_group_name
 
+    @property
+    def redundancy(self):
+        """
+        Give the used redundancy.
+        :return: The redundancy.
+        :rtype: int
+        """
+        return self._redundancy
+
     @property
     def volumes(self):
         """
@@ -1376,6 +1385,51 @@ class LinstorVolumeManager(object):
         """
         self._mark_resource_cache_as_dirty()
 
+    def has_node(self, node_name):
+        """
+        Check if a node exists in the LINSTOR database.
+        :rtype: bool
+        """
+        result = self._linstor.node_list()
+        error_str = self._get_error_str(result)
+        if error_str:
+            raise LinstorVolumeManagerError(
+                'Failed to list nodes using `{}`: {}'
+                .format(node_name, error_str)
+            )
+        return bool(result[0].node(node_name))
+
+    def create_node(self, node_name, ip):
+        """
+        Create a new node in the LINSTOR database.
+        :param str node_name: Node name to use.
+        :param str ip: Host IP to communicate.
+        """
+        result = self._linstor.node_create(
+            node_name,
+            linstor.consts.VAL_NODE_TYPE_CMBD,
+            ip
+        )
+        errors = self._filter_errors(result)
+        if errors:
+            error_str = self._get_error_str(errors)
+            raise LinstorVolumeManagerError(
+                'Failed to create node `{}`: {}'.format(node_name, error_str)
+            )
+
+    def destroy_node(self, node_name):
+        """
+        Destroy a node in the LINSTOR database.
+        :param str node_name: Node name to remove.
+        """
+        result = self._linstor.node_delete(node_name)
+        errors = self._filter_errors(result)
+        if errors:
+            error_str = self._get_error_str(errors)
+            raise LinstorVolumeManagerError(
+                'Failed to destroy node `{}`: {}'.format(node_name, error_str)
+            )
+
     @classmethod
     def create_sr(
         cls, group_name, node_names, ips, redundancy,
-- 
2.36.0

