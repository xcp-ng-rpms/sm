From 5c81a1abd8d7648eec51e6c2eb7235b2a46a0cf4 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 3 Mar 2022 15:02:17 +0100
Subject: [PATCH 41/54] fix(LinstorSR): find controller when XAPI unreachable
 (XHA)

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py            | 60 +++++++++++++++++++++++++++++----
 drivers/linstorvolumemanager.py | 34 ++++++++++++-------
 2 files changed, 74 insertions(+), 20 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index 5bdf676..a4f7afc 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -46,6 +46,7 @@ import traceback
 import util
 import VDI
 import vhdutil
+import xml.etree.ElementTree as xml_parser
 import xmlrpclib
 import xs_errors
 
@@ -56,6 +57,8 @@ from srmetadata import \
 
 HIDDEN_TAG = 'hidden'
 
+XHA_CONFIG_PATH = '/etc/xensource/xhad.conf'
+
 FORK_LOG_DAEMON = '/opt/xensource/libexec/fork-log-daemon'
 
 # ==============================================================================
@@ -248,6 +251,26 @@ def deflate(linstor, vdi_uuid, vdi_path, new_size, old_size):
     # TODO: Change the LINSTOR volume size using linstor.resize_volume.
 
 
+def get_ips_from_xha_config_file():
+    ips = []
+    try:
+        # Ensure there is no dirty read problem.
+        # For example if the HA is reloaded.
+        tree = util.retry(
+            lambda: xml_parser.parse(XHA_CONFIG_PATH),
+            maxretry=10,
+            period=1
+        )
+
+        for node in tree.getroot()[0]:
+            if node.tag == 'host':
+                for host_node in node:
+                    if host_node.tag == 'IPaddress':
+                        ips.append(host_node.text)
+    except:
+        pass
+    return ips
+
 # ==============================================================================
 
 # Usage example:
@@ -363,18 +386,41 @@ class LinstorSR(SR.SR):
                 if self.srcmd.cmd in (
                     'vdi_attach_from_config', 'vdi_detach_from_config'
                 ):
-                    # We must have a valid LINSTOR instance here without using
-                    # the XAPI.
+                    def create_linstor(uri, attempt_count=30):
+                        self._linstor = LinstorVolumeManager(
+                            uri,
+                            self._group_name,
+                            logger=util.SMlog,
+                            attempt_count=attempt_count
+                        )
+
                     controller_uri = get_controller_uri()
+                    if controller_uri:
+                        create_linstor(controller_uri)
+                    else:
+                        def connect():
+                            # We must have a valid LINSTOR instance here without using
+                            # the XAPI. Fallback with the HA config file.
+                            for ip in get_ips_from_xha_config_file():
+                                controller_uri = 'linstor://' + ip
+                                try:
+                                    util.SMlog('Connecting from config to LINSTOR controller using: {}'.format(ip))
+                                    create_linstor(controller_uri, attempt_count=0)
+                                    return controller_uri
+                                except:
+                                    pass
+
+                        controller_uri = util.retry(connect, maxretry=30, period=1)
+                        if not controller_uri:
+                            raise xs_errors.XenError(
+                                'SRUnavailable',
+                                opterr='No valid controller URI to attach/detach from config'
+                            )
+
                     self._journaler = LinstorJournaler(
                         controller_uri, self._group_name, logger=util.SMlog
                     )
 
-                    self._linstor = LinstorVolumeManager(
-                        controller_uri,
-                        self._group_name,
-                        logger=util.SMlog
-                    )
                 return wrapped_method(self, *args, **kwargs)
 
             if not self._is_master:
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index da98e0b..b4ee783 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -186,15 +186,16 @@ def _get_controller_uri():
     # primary using drbdadm because we don't have all connections to the
     # replicated volume. `drbdadm status xcp-persistent-database` returns
     # 3 connections by default.
-    session = util.get_localAPI_session()
-    for host_ref, host_record in session.xenapi.host.get_all_records().items():
-        if distutils.util.strtobool(
-            session.xenapi.host.call_plugin(host_ref, PLUGIN, PLUGIN_CMD, {})
-        ):
-            return 'linstor://' + host_record['hostname']
-
-    # Not found, maybe we are trying to create the SR...
-
+    try:
+        session = util.get_localAPI_session()
+        for host_ref, host_record in session.xenapi.host.get_all_records().items():
+            if distutils.util.strtobool(
+                session.xenapi.host.call_plugin(host_ref, PLUGIN, PLUGIN_CMD, {})
+            ):
+                return 'linstor://' + host_record['hostname']
+    except:
+        # Not found, maybe we are trying to create the SR...
+        pass
 
 def get_controller_uri():
     retries = 0
@@ -349,7 +350,8 @@ class LinstorVolumeManager(object):
     # --------------------------------------------------------------------------
 
     def __init__(
-        self, uri, group_name, repair=False, logger=default_logger.__func__
+        self, uri, group_name, repair=False, logger=default_logger.__func__,
+        attempt_count=30
     ):
         """
         Create a new LinstorVolumeManager object.
@@ -358,9 +360,12 @@ class LinstorVolumeManager(object):
         :param bool repair: If true we try to remove bad volumes due to a crash
         or unexpected behavior.
         :param function logger: Function to log messages.
+        :param int attempt_count: Number of attempts to join the controller.
         """
 
-        self._linstor = self._create_linstor_instance(uri)
+        self._linstor = self._create_linstor_instance(
+            uri, attempt_count=attempt_count
+        )
         self._base_group_name = group_name
 
         # Ensure group exists.
@@ -2169,7 +2174,9 @@ class LinstorVolumeManager(object):
         ])
 
     @classmethod
-    def _create_linstor_instance(cls, uri, keep_uri_unmodified=False):
+    def _create_linstor_instance(
+        cls, uri, keep_uri_unmodified=False, attempt_count=30
+    ):
         retry = False
 
         def connect(uri):
@@ -2193,7 +2200,8 @@ class LinstorVolumeManager(object):
 
         return util.retry(
             lambda: connect(uri),
-            maxretry=10,
+            maxretry=attempt_count,
+            period=1,
             exceptions=[
                 linstor.errors.LinstorNetworkError,
                 LinstorVolumeManagerError
-- 
2.36.0

