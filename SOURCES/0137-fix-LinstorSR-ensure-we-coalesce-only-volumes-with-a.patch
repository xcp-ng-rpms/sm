From 0c6aafb0f77e909ec94234e8b17756851bf6ddaf Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Mon, 23 Oct 2023 15:52:23 +0200
Subject: [PATCH 137/162] fix(LinstorSR): ensure we coalesce only volumes with
 a valid size

---
 drivers/cleanup.py        | 14 ++++++++++++++
 drivers/linstor-manager   | 15 +++++++++++++++
 drivers/linstorvhdutil.py | 21 ++++++++++++++++++---
 3 files changed, 47 insertions(+), 3 deletions(-)

diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index 8c37e15..d1611ba 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -1441,6 +1441,20 @@ class LinstorVDI(VDI):
         return super(LinstorVDI, self).pause(failfast)
 
     def coalesce(self):
+        # Note: We raise `SMException` here to skip the current coalesce in case of failure.
+        # Using another exception we can't execute the next coalesce calls.
+        try:
+            drbd_size = self.sr._vhdutil.get_drbd_size(self.uuid)
+        except Exception as e:
+            raise util.SMException(
+                'VDI {} could not be coalesced because the DRBD block size cannot be read: {}'
+                .format(self.uuid, e))
+
+        if self._sizeVHD > drbd_size:
+            raise util.SMException(
+                'VDI {} could not be coalesced because VHD phys size > DRBD block size ({} > {})'
+                .format(self.uuid, self._sizeVHD, drbd_size))
+
         self.sr._vhdutil.force_coalesce(self.path)
 
     def getParent(self):
diff --git a/drivers/linstor-manager b/drivers/linstor-manager
index 45201ee..9e5e1d6 100755
--- a/drivers/linstor-manager
+++ b/drivers/linstor-manager
@@ -485,6 +485,18 @@ def get_block_bitmap(session, args):
         raise
 
 
+def get_drbd_size(session, args):
+    try:
+        device_path = args['devicePath']
+        (ret, stdout, stderr) = util.doexec(['blockdev', '--getsize64', device_path])
+        if ret == 0:
+            return stdout.strip()
+        raise Exception('Failed to get DRBD size: {}'.format(stderr))
+    except Exception:
+        util.SMlog('linstor-manager:get_drbd_size error: {}'.format(stderr))
+        raise
+
+
 def set_parent(session, args):
     try:
         device_path = args['devicePath']
@@ -969,6 +981,9 @@ if __name__ == '__main__':
         'getKeyHash': get_key_hash,
         'getBlockBitmap': get_block_bitmap,
 
+        # Small helper to get the DRBD blockdev size.
+        'getDrbdSize': get_drbd_size,
+
         # Called by cleanup.py to coalesce when a primary
         # is opened on a non-local host.
         'setParent': set_parent,
diff --git a/drivers/linstorvhdutil.py b/drivers/linstorvhdutil.py
index 8b6985d..5f3ae08 100644
--- a/drivers/linstorvhdutil.py
+++ b/drivers/linstorvhdutil.py
@@ -38,7 +38,7 @@ def call_vhd_util_on_host(session, host_ref, method, device_path, args):
         util.SMlog('call-plugin ({} with {}) exception: {}'.format(
             method, args, e
         ))
-        raise
+        raise util.SMException(str(e))
 
     util.SMlog('call-plugin ({} with {}) returned: {}'.format(
         method, args, response
@@ -47,7 +47,7 @@ def call_vhd_util_on_host(session, host_ref, method, device_path, args):
     return response
 
 
-class LinstorCallException(Exception):
+class LinstorCallException(util.SMException):
     def __init__(self, cmd_err):
         self.cmd_err = cmd_err
 
@@ -207,6 +207,16 @@ class LinstorVhdUtil:
     def get_block_bitmap(self, vdi_uuid, response):
         return base64.b64decode(response)
 
+    @linstorhostcall('_get_drbd_size', 'getDrbdSize')
+    def get_drbd_size(self, vdi_uuid, response):
+        return int(response)
+
+    def _get_drbd_size(self, path):
+        (ret, stdout, stderr) = util.doexec(['blockdev', '--getsize64', path])
+        if ret == 0:
+            return int(stdout.strip())
+        raise util.SMException('Failed to get DRBD size: {}'.format(stderr))
+
     # --------------------------------------------------------------------------
     # Setters: only used locally.
     # --------------------------------------------------------------------------
@@ -308,7 +318,6 @@ class LinstorVhdUtil:
         else:
             e_str = str(e)
 
-        e_with_openers = None
         try:
             volume_uuid = self._linstor.get_volume_uuid_from_device_path(
                 device_path
@@ -326,6 +335,9 @@ class LinstorVhdUtil:
         raise e_wrapper  # pylint: disable = E0702
 
     def _call_local_vhd_util(self, local_method, device_path, *args, **kwargs):
+        if isinstance(local_method, str):
+            local_method = getattr(self, local_method)
+
         try:
             def local_call():
                 try:
@@ -355,6 +367,9 @@ class LinstorVhdUtil:
         # another host using the DRBD opener list. In the other case, if the parent is required,
         # we must check where this last one is open instead of the child.
 
+        if isinstance(local_method, str):
+            local_method = getattr(self, local_method)
+
         # A. Try to write locally...
         try:
             return self._call_local_vhd_util(local_method, device_path, *args, **kwargs)
-- 
2.43.0

