From 0940fe2bfcfc74d6252a07cf95d1f261bf77cfc8 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Wed, 24 Mar 2021 10:06:58 +0100
Subject: [PATCH 040/180] feat(LinstorSR): add optional ips parameter

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py            | 30 ++++++++++++++++++++-----
 drivers/linstorvolumemanager.py | 40 ++++++++++++++++++++++-----------
 2 files changed, 52 insertions(+), 18 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index 9f2be58..4b761b5 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -77,6 +77,7 @@ CAPABILITIES = [
 CONFIGURATION = [
     ['group-name', 'LVM group name'],
     ['hosts', 'host names to use'],
+    ['ips', 'ips to use (optional, defaults to management networks)'],
     ['redundancy', 'replication count'],
     ['provisioning', '"thin" or "thick" are accepted (optional, defaults to thin)'],
     ['monitor-db-quorum', 'disable controller when only one host is online (optional, defaults to true)']
@@ -325,6 +326,10 @@ class LinstorSR(SR.SR):
         self.sr_vditype = SR.DEFAULT_TAP
 
         self._hosts = list(set(self.dconf['hosts'].split(',')))
+        if 'ips' not in self.dconf or not self.dconf['ips']:
+            self._ips = None
+        else:
+            self._ips = self.dconf['ips'].split(',')
         self._redundancy = int(self.dconf['redundancy'] or 1)
         self._linstor = None  # Ensure that LINSTOR attribute exists.
         self._journaler = None
@@ -533,11 +538,26 @@ class LinstorSR(SR.SR):
             )
 
         ips = {}
-        for host in online_hosts:
-            record = self.session.xenapi.host.get_record(host)
-            hostname = record['hostname']
-            if hostname in self._hosts:
-                ips[hostname] = record['address']
+        if not self._ips:
+            for host in online_hosts:
+                record = self.session.xenapi.host.get_record(host)
+                hostname = record['hostname']
+                if hostname in self._hosts:
+                    ips[hostname] = record['address']
+        elif len(self._ips) != len(self._hosts):
+            raise xs_errors.XenError(
+                'LinstorSRCreate',
+                opterr='ips must be equal to host count'
+            )
+        else:
+            for host in online_hosts:
+                record = self.session.xenapi.host.get_record(host)
+                hostname = record['hostname']
+                try:
+                    index = self._hosts.index(hostname)
+                    ips[hostname] = self._ips[index]
+                except ValueError as e:
+                    pass
 
         if len(ips) != len(self._hosts):
             raise xs_errors.XenError(
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 3aaffdf..5c04d02 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -1313,22 +1313,36 @@ class LinstorVolumeManager(object):
 
         for node_name in node_names:
             ip = ips[node_name]
-            result = lin.node_create(
-                node_name,
-                linstor.consts.VAL_NODE_TYPE_CMBD,
-                ip
-            )
-            errors = cls._filter_errors(result)
-            if cls._check_errors(errors, [linstor.consts.FAIL_EXISTS_NODE]):
-                continue
 
-            if errors:
-                raise LinstorVolumeManagerError(
-                    'Failed to create node `{}` with ip `{}`: {}'.format(
-                        node_name, ip, cls._get_error_str(errors)
-                    )
+            while True:
+                # Try to create node.
+                result = lin.node_create(
+                    node_name,
+                    linstor.consts.VAL_NODE_TYPE_CMBD,
+                    ip
                 )
 
+                errors = cls._filter_errors(result)
+                if cls._check_errors(
+                    errors, [linstor.consts.FAIL_EXISTS_NODE]
+                ):
+                    # If it already exists, remove, then recreate.
+                    result = lin.node_delete(node_name)
+                    error_str = cls._get_error_str(result)
+                    if error_str:
+                        raise LinstorVolumeManagerError(
+                            'Failed to remove old node `{}`: {}'
+                            .format(node_name, error_str)
+                        )
+                elif not errors:
+                    break  # Created!
+                else:
+                    raise LinstorVolumeManagerError(
+                        'Failed to create node `{}` with ip `{}`: {}'.format(
+                            node_name, ip, cls._get_error_str(errors)
+                        )
+                    )
+
         driver_pool_name = group_name
         group_name = cls._build_group_name(group_name)
         pools = lin.storage_pool_list_raise(filter_by_stor_pools=[group_name])
-- 
2.46.0

