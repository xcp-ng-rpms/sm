From 4517b34462a3285630dc134de99eb84f6aa4fb58 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Mon, 20 Jul 2020 16:26:42 +0200
Subject: [PATCH 03/28] feat(drivers): add XFS driver

Originally-by: Ronan Abhamon <ronan.abhamon@vates.fr>

This version obtained through merge in
ff1bf65e57f1c7584748628a5731e40e8a041d51:

 git restore -SW -s ydi/forks/2.30.7/xfs drivers/EXTSR.py
 mv drivers/EXTSR.py drivers/XFSSR.py
 git restore -SW drivers/EXTSR.py

Signed-off-by: Yann Dirson <yann.dirson@vates.fr>
---
 Makefile           |   1 +
 drivers/XFSSR.py   | 249 +++++++++++++++++++++++++++++++++++++++++++++
 drivers/cleanup.py |   1 +
 3 files changed, 251 insertions(+)
 create mode 100755 drivers/XFSSR.py

diff --git a/Makefile b/Makefile
index 0750482..7cb6ba4 100755
--- a/Makefile
+++ b/Makefile
@@ -16,6 +16,7 @@ SM_DRIVERS += SMB
 SM_DRIVERS += LVHDoFCoE
 SM_DRIVERS += CephFS
 SM_DRIVERS += GlusterFS
+SM_DRIVERS += XFS
 
 SM_LIBS := SR
 SM_LIBS += SRCommand
diff --git a/drivers/XFSSR.py b/drivers/XFSSR.py
new file mode 100755
index 0000000..1dfde09
--- /dev/null
+++ b/drivers/XFSSR.py
@@ -0,0 +1,249 @@
+#!/usr/bin/python3
+#
+# Original work copyright (C) Citrix Systems Inc.
+# Modified work copyright (C) Vates SAS and XCP-ng community
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License as published
+# by the Free Software Foundation; version 2.1 only.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public License
+# along with this program; if not, write to the Free Software Foundation, Inc.,
+# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+#
+# XFSSR: Based on local-file storage repository, mounts xfs partition
+
+import SR
+from SR import deviceCheck
+import SRCommand
+import FileSR
+import util
+import lvutil
+import scsiutil
+
+import os
+import xs_errors
+import vhdutil
+from lock import Lock
+from constants import EXT_PREFIX
+
+CAPABILITIES = ["SR_PROBE", "SR_UPDATE", "SR_SUPPORTS_LOCAL_CACHING", \
+                "VDI_CREATE", "VDI_DELETE", "VDI_ATTACH", "VDI_DETACH", \
+                "VDI_UPDATE", "VDI_CLONE", "VDI_SNAPSHOT", "VDI_RESIZE", "VDI_MIRROR", \
+                "VDI_GENERATE_CONFIG", \
+                "VDI_RESET_ON_BOOT/2", "ATOMIC_PAUSE", "VDI_CONFIG_CBT",
+                "VDI_ACTIVATE", "VDI_DEACTIVATE", "THIN_PROVISIONING", "VDI_READ_CACHING"]
+
+CONFIGURATION = [['device', 'local device path (required) (e.g. /dev/sda3)']]
+
+DRIVER_INFO = {
+    'name': 'Local XFS VHD',
+    'description': 'SR plugin which represents disks as VHD files stored on a local XFS filesystem, created inside an LVM volume',
+    'vendor': 'Vates SAS',
+    'copyright': '(C) 2019 Vates SAS',
+    'driver_version': '1.0',
+    'required_api_version': '1.0',
+    'capabilities': CAPABILITIES,
+    'configuration': CONFIGURATION
+    }
+
+DRIVER_CONFIG = {"ATTACH_FROM_CONFIG_WITH_TAPDISK": True}
+
+
+class XFSSR(FileSR.FileSR):
+    """XFS Local file storage repository"""
+
+    DRIVER_TYPE = 'xfs'
+
+    def handles(srtype):
+        return srtype == XFSSR.DRIVER_TYPE
+    handles = staticmethod(handles)
+
+    def load(self, sr_uuid):
+        if not self._is_xfs_available():
+            raise xs_errors.XenError(
+                'SRUnavailable',
+                opterr='xfsprogs is not installed'
+            )
+
+        self.ops_exclusive = FileSR.OPS_EXCLUSIVE
+        self.lock = Lock(vhdutil.LOCK_TYPE_SR, self.uuid)
+        self.sr_vditype = SR.DEFAULT_TAP
+
+        self.path = os.path.join(SR.MOUNT_BASE, sr_uuid)
+        self.vgname = EXT_PREFIX + sr_uuid
+        self.remotepath = os.path.join("/dev", self.vgname, sr_uuid)
+        self.attached = self._checkmount()
+        self.driver_config = DRIVER_CONFIG
+
+    def delete(self, sr_uuid):
+        super(XFSSR, self).delete(sr_uuid)
+
+        # Check PVs match VG
+        try:
+            for dev in self.dconf['device'].split(','):
+                cmd = ["pvs", dev]
+                txt = util.pread2(cmd)
+                if txt.find(self.vgname) == -1:
+                    raise xs_errors.XenError('VolNotFound', \
+                          opterr='volume is %s' % self.vgname)
+        except util.CommandException as inst:
+            raise xs_errors.XenError('PVSfailed', \
+                  opterr='error is %d' % inst.code)
+
+        # Remove LV, VG and pv
+        try:
+            cmd = ["lvremove", "-f", self.remotepath]
+            util.pread2(cmd)
+
+            cmd = ["vgremove", self.vgname]
+            util.pread2(cmd)
+
+            for dev in self.dconf['device'].split(','):
+                cmd = ["pvremove", dev]
+                util.pread2(cmd)
+        except util.CommandException as inst:
+            raise xs_errors.XenError('LVMDelete', \
+                  opterr='errno is %d' % inst.code)
+
+    def attach(self, sr_uuid):
+        if not self._checkmount():
+            try:
+                #Activate LV
+                cmd = ['lvchange', '-ay', self.remotepath]
+                util.pread2(cmd)
+
+                # make a mountpoint:
+                if not os.path.isdir(self.path):
+                    os.makedirs(self.path)
+            except util.CommandException as inst:
+                raise xs_errors.XenError('LVMMount', \
+                      opterr='Unable to activate LV. Errno is %d' % inst.code)
+
+            try:
+                util.pread(["fsck", "-a", self.remotepath])
+            except util.CommandException as inst:
+                if inst.code == 1:
+                    util.SMlog("FSCK detected and corrected FS errors. Not fatal.")
+                else:
+                    raise xs_errors.XenError('LVMMount', \
+                         opterr='FSCK failed on %s. Errno is %d' % (self.remotepath, inst.code))
+
+            try:
+                util.pread(["mount", self.remotepath, self.path])
+            except util.CommandException as inst:
+                raise xs_errors.XenError('LVMMount', \
+                      opterr='Failed to mount FS. Errno is %d' % inst.code)
+
+        self.attached = True
+
+        #Update SCSIid string
+        scsiutil.add_serial_record(self.session, self.sr_ref, \
+                scsiutil.devlist_to_serialstring(self.dconf['device'].split(',')))
+
+        # Set the block scheduler
+        for dev in self.dconf['device'].split(','):
+            self.block_setscheduler(dev)
+
+    def detach(self, sr_uuid):
+        super(XFSSR, self).detach(sr_uuid)
+        try:
+            # deactivate SR
+            cmd = ["lvchange", "-an", self.remotepath]
+            util.pread2(cmd)
+        except util.CommandException as inst:
+            raise xs_errors.XenError('LVMUnMount', \
+                  opterr='lvm -an failed errno is %d' % inst.code)
+
+    @deviceCheck
+    def probe(self):
+        return lvutil.srlist_toxml(lvutil.scan_srlist(EXT_PREFIX, self.dconf['device']),
+                EXT_PREFIX)
+
+    @deviceCheck
+    def create(self, sr_uuid, size):
+        if self._checkmount():
+            raise xs_errors.XenError('SRExists')
+
+        # Check none of the devices already in use by other PBDs
+        if util.test_hostPBD_devs(self.session, sr_uuid, self.dconf['device']):
+            raise xs_errors.XenError('SRInUse')
+
+        # Check serial number entry in SR records
+        for dev in self.dconf['device'].split(','):
+            if util.test_scsiserial(self.session, dev):
+                raise xs_errors.XenError('SRInUse')
+
+        if not lvutil._checkVG(self.vgname):
+            lvutil.createVG(self.dconf['device'], self.vgname)
+
+        if lvutil._checkLV(self.remotepath):
+            raise xs_errors.XenError('SRExists')
+
+        try:
+            numdevs = len(self.dconf['device'].split(','))
+            cmd = ["lvcreate", "-n", sr_uuid]
+            if numdevs > 1:
+                lowest = -1
+                for dev in self.dconf['device'].split(','):
+                    stats = lvutil._getPVstats(dev)
+                    if lowest < 0  or stats['freespace'] < lowest:
+                        lowest = stats['freespace']
+                size_mb = (lowest // (1024 * 1024)) * numdevs
+
+                # Add stripe parameter to command
+                cmd += ["-i", str(numdevs), "-I", "2048"]
+            else:
+                stats = lvutil._getVGstats(self.vgname)
+                size_mb = stats['freespace'] // (1024 * 1024)
+            assert(size_mb > 0)
+            cmd += ["-L", str(size_mb), self.vgname]
+            text = util.pread(cmd)
+
+            cmd = ["lvchange", "-ay", self.remotepath]
+            text = util.pread(cmd)
+        except util.CommandException as inst:
+            raise xs_errors.XenError('LVMCreate', \
+                  opterr='lv operation, error %d' % inst.code)
+        except AssertionError:
+            raise xs_errors.XenError('SRNoSpace', \
+                  opterr='Insufficient space in VG %s' % self.vgname)
+
+        try:
+            util.pread2(["mkfs.xfs", self.remotepath])
+        except util.CommandException as inst:
+            raise xs_errors.XenError('LVMFilesystem', \
+                  opterr='mkfs failed error %d' % inst.code)
+
+        #Update serial number string
+        scsiutil.add_serial_record(self.session, self.sr_ref, \
+                  scsiutil.devlist_to_serialstring(self.dconf['device'].split(',')))
+
+    def vdi(self, uuid, loadLocked = False):
+        return XFSFileVDI(self, uuid)
+
+    @staticmethod
+    def _is_xfs_available():
+        import distutils.spawn
+        return distutils.spawn.find_executable('mkfs.xfs')
+
+
+class XFSFileVDI(FileSR.FileVDI):
+    def attach(self, sr_uuid, vdi_uuid):
+        if not hasattr(self, 'xenstore_data'):
+            self.xenstore_data = {}
+
+        self.xenstore_data['storage-type'] = XFSSR.DRIVER_TYPE
+
+        return super(XFSFileVDI, self).attach(sr_uuid, vdi_uuid)
+
+
+if __name__ == '__main__':
+    SRCommand.run(XFSSR, DRIVER_INFO)
+else:
+    SR.registerSR(XFSSR)
diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index d3dfc0e..57522b8 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -2889,6 +2889,7 @@ def normalizeType(type):
         type = SR.TYPE_LVHD
     if type in [
         "ext", "nfs", "ocfsoiscsi", "ocfsohba", "smb", "cephfs", "glusterfs",
+        "xfs"
     ]:
         type = SR.TYPE_FILE
     if not type in SR.TYPES:
-- 
2.46.0

