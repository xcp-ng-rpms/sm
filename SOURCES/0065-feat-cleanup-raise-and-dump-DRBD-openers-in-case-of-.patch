From 5d9ec7449370fc757375aff9ec4dac3ecb47e21a Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Thu, 21 Jul 2022 11:39:20 +0200
Subject: [PATCH 065/170] feat(cleanup): raise and dump DRBD openers in case of
 bad coalesce

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/cleanup.py              | 24 ++++++--------------
 drivers/linstor-manager         | 40 ++++++++++++++++++++++++++++++++-
 drivers/linstorvolumemanager.py | 24 ++++++++++++++++++++
 3 files changed, 70 insertions(+), 18 deletions(-)

diff --git a/drivers/cleanup.py b/drivers/cleanup.py
index 77b38c2..937296b 100755
--- a/drivers/cleanup.py
+++ b/drivers/cleanup.py
@@ -3074,27 +3074,17 @@ class LinstorSR(SR):
 
     def _checkSlaves(self, vdi):
         try:
-            states = self._linstor.get_usage_states(vdi.uuid)
-            for node_name, state in states.items():
-                self._checkSlave(node_name, vdi, state)
+            all_openers = self._linstor.get_volume_openers(vdi.uuid)
+            for openers in all_openers.itervalues():
+                for opener in openers.values():
+                    if opener['process-name'] != 'tapdisk':
+                        raise util.SMException(
+                            'VDI {} is in use: {}'.format(vdi.uuid, all_openers)
+                        )
         except LinstorVolumeManagerError as e:
             if e.code != LinstorVolumeManagerError.ERR_VOLUME_NOT_EXISTS:
                 raise
 
-    @staticmethod
-    def _checkSlave(node_name, vdi, state):
-        # If state is None, LINSTOR doesn't know the host state
-        # (bad connection?).
-        if state is None:
-            raise util.SMException(
-                'Unknown state for VDI {} on {}'.format(vdi.uuid, node_name)
-            )
-
-        if state:
-            raise util.SMException(
-                'VDI {} is in use on {}'.format(vdi.uuid, node_name)
-            )
-
 
 ################################################################################
 #
diff --git a/drivers/linstor-manager b/drivers/linstor-manager
index 2930a9e..81789e7 100755
--- a/drivers/linstor-manager
+++ b/drivers/linstor-manager
@@ -823,6 +823,43 @@ def destroy_drbd_volumes(session, args):
     return str(False)
 
 
+def get_drbd_openers(session, args):
+    try:
+        resource_name = args.get('resourceName')
+        volume = args.get('volume')
+        if not resource_name or volume is None:
+            raise Exception('Cannot get DRBD openers without resource name and/or volume.')
+
+        path = '/sys/kernel/debug/drbd/resources/{}/volumes/{}/openers'.format(
+            resource_name, volume
+        )
+
+        with open(path, 'r') as openers:
+            # Not a big cost, so read all lines directly.
+            lines = openers.readlines()
+
+        result = {}
+
+        opener_re = re.compile('(.*)\\s+([0-9]+)\\s+([0-9]+)')
+        for line in lines:
+            match = opener_re.match(line)
+            assert match
+
+            groups = match.groups()
+            process_name = groups[0]
+            pid = groups[1]
+            open_duration_ms = groups[2]
+            result[pid] = {
+                'process-name': process_name,
+                'open-duration': open_duration_ms
+            }
+
+        return json.dumps(result)
+    except Exception as e:
+        util.SMlog('linstor-manager:get_drbd_openers error: {}'.format(e))
+        raise
+
+
 if __name__ == '__main__':
     XenAPIPlugin.dispatch({
         'prepareSr': prepare_sr,
@@ -848,5 +885,6 @@ if __name__ == '__main__':
         'createSr': create_sr,
         'listDrbdVolumes': list_drbd_volumes,
         'destroyDrbdVolume': destroy_drbd_volume,
-        'destroyDrbdVolumes': destroy_drbd_volumes
+        'destroyDrbdVolumes': destroy_drbd_volumes,
+        'getDrbdOpeners': get_drbd_openers
     })
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 430e080..d17845b 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -1048,6 +1048,30 @@ class LinstorVolumeManager(object):
 
         return states
 
+    def get_volume_openers(self, volume_uuid):
+        """
+        Get openers of a volume.
+        :param str volume_uuid: The volume uuid to monitor.
+        :return: A dictionnary that contains openers.
+        :rtype: dict(str, obj)
+        """
+
+        PLUGIN_CMD = 'getDrbdOpeners'
+
+        openers = {}
+
+        session = util.get_localAPI_session()
+        hosts = session.xenapi.host.get_all_records()
+        for host_ref, host_record in hosts.items():
+            openers[host_record['hostname']] = json.loads(
+                session.xenapi.host.call_plugin(host_ref, PLUGIN, PLUGIN_CMD, {
+                    'resourceName': self.get_volume_name(volume_uuid),
+                    'volume': '0'
+                })
+            )
+
+        return openers
+
     def get_volumes_with_name(self):
         """
         Give a volume dictionnary that contains names actually owned.
-- 
2.44.0

