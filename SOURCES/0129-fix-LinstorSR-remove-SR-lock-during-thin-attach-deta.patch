From b2bd72ef2055bbef1a24167055ffab2ef6e21bf3 Mon Sep 17 00:00:00 2001
From: Ronan Abhamon <ronan.abhamon@vates.fr>
Date: Mon, 2 Oct 2023 16:48:49 +0200
Subject: [PATCH 129/170] fix(LinstorSR): remove SR lock during thin
 attach/detach

This lock is normally useless and can create a dead lock when thin mode is activated:
- A task try to deactivate a volume during a VM shutdown on a slave (so a VDI A is locked).
  Then a new task is created on the master host, we try to get the SR lock on the master.
- In parallel a tap-pause is asked from the master to the slave, the master SR lock is now locked.
  The tap-pause request is received on the slave, but we can't lock VDI A because it's already
  locked.

So to resume: a dead lock is only possible if we try to shutdown a VM with a particular VDI
and if we try to snapshot it in the same time.

Signed-off-by: Ronan Abhamon <ronan.abhamon@vates.fr>
---
 drivers/LinstorSR.py | 102 +++++++++++++++++++------------------------
 1 file changed, 45 insertions(+), 57 deletions(-)

diff --git a/drivers/LinstorSR.py b/drivers/LinstorSR.py
index a6ca884..ed41e77 100755
--- a/drivers/LinstorSR.py
+++ b/drivers/LinstorSR.py
@@ -148,32 +148,26 @@ def attach_thin(session, journaler, linstor, sr_uuid, vdi_uuid):
     if image_type == vhdutil.VDI_TYPE_RAW:
         return
 
-    lock = Lock(vhdutil.LOCK_TYPE_SR, sr_uuid)
-    try:
-        lock.acquire()
+    device_path = linstor.get_device_path(vdi_uuid)
+
+    # If the virtual VHD size is lower than the LINSTOR volume size,
+    # there is nothing to do.
+    vhd_size = compute_volume_size(
+        # TODO: Replace pylint comment with this feature when possible:
+        # https://github.com/PyCQA/pylint/pull/2926
+        LinstorVhdUtil(session, linstor).get_size_virt(vdi_uuid),  # pylint: disable = E1120
+        image_type
+    )
 
-        device_path = linstor.get_device_path(vdi_uuid)
+    volume_info = linstor.get_volume_info(vdi_uuid)
+    volume_size = volume_info.virtual_size
 
-        # If the virtual VHD size is lower than the LINSTOR volume size,
-        # there is nothing to do.
-        vhd_size = compute_volume_size(
-            # TODO: Replace pylint comment with this feature when possible:
-            # https://github.com/PyCQA/pylint/pull/2926
-            LinstorVhdUtil(session, linstor).get_size_virt(vdi_uuid),  # pylint: disable = E1120
-            image_type
+    if vhd_size > volume_size:
+        inflate(
+            journaler, linstor, vdi_uuid, device_path,
+            vhd_size, volume_size
         )
 
-        volume_info = linstor.get_volume_info(vdi_uuid)
-        volume_size = volume_info.virtual_size
-
-        if vhd_size > volume_size:
-            inflate(
-                journaler, linstor, vdi_uuid, device_path,
-                vhd_size, volume_size
-            )
-    finally:
-        lock.release()
-
 
 def detach_thin_impl(session, linstor, sr_uuid, vdi_uuid):
     volume_metadata = linstor.get_volume_metadata(vdi_uuid)
@@ -181,45 +175,39 @@ def detach_thin_impl(session, linstor, sr_uuid, vdi_uuid):
     if image_type == vhdutil.VDI_TYPE_RAW:
         return
 
-    lock = Lock(vhdutil.LOCK_TYPE_SR, sr_uuid)
-    try:
-        lock.acquire()
-
-        def check_vbd_count():
-            vdi_ref = session.xenapi.VDI.get_by_uuid(vdi_uuid)
-            vbds = session.xenapi.VBD.get_all_records_where(
-                'field "VDI" = "{}"'.format(vdi_ref)
-            )
+    def check_vbd_count():
+        vdi_ref = session.xenapi.VDI.get_by_uuid(vdi_uuid)
+        vbds = session.xenapi.VBD.get_all_records_where(
+            'field "VDI" = "{}"'.format(vdi_ref)
+        )
 
-            num_plugged = 0
-            for vbd_rec in vbds.values():
-                if vbd_rec['currently_attached']:
-                    num_plugged += 1
-                    if num_plugged > 1:
-                        raise xs_errors.XenError(
-                            'VDIUnavailable',
-                            opterr='Cannot deflate VDI {}, already used by '
-                            'at least 2 VBDs'.format(vdi_uuid)
-                        )
+        num_plugged = 0
+        for vbd_rec in vbds.values():
+            if vbd_rec['currently_attached']:
+                num_plugged += 1
+                if num_plugged > 1:
+                    raise xs_errors.XenError(
+                        'VDIUnavailable',
+                        opterr='Cannot deflate VDI {}, already used by '
+                        'at least 2 VBDs'.format(vdi_uuid)
+                    )
 
-        # We can have multiple VBDs attached to a VDI during a VM-template clone.
-        # So we use a timeout to ensure that we can detach the volume properly.
-        util.retry(check_vbd_count, maxretry=10, period=1)
+    # We can have multiple VBDs attached to a VDI during a VM-template clone.
+    # So we use a timeout to ensure that we can detach the volume properly.
+    util.retry(check_vbd_count, maxretry=10, period=1)
 
-        device_path = linstor.get_device_path(vdi_uuid)
-        new_volume_size = LinstorVolumeManager.round_up_volume_size(
-            # TODO: Replace pylint comment with this feature when possible:
-            # https://github.com/PyCQA/pylint/pull/2926
-            LinstorVhdUtil(session, linstor).get_size_phys(vdi_uuid)  # pylint: disable = E1120
-        )
+    device_path = linstor.get_device_path(vdi_uuid)
+    new_volume_size = LinstorVolumeManager.round_up_volume_size(
+        # TODO: Replace pylint comment with this feature when possible:
+        # https://github.com/PyCQA/pylint/pull/2926
+        LinstorVhdUtil(session, linstor).get_size_phys(vdi_uuid)  # pylint: disable = E1120
+    )
 
-        volume_info = linstor.get_volume_info(vdi_uuid)
-        old_volume_size = volume_info.virtual_size
-        deflate(
-            linstor, vdi_uuid, device_path, new_volume_size, old_volume_size
-        )
-    finally:
-        lock.release()
+    volume_info = linstor.get_volume_info(vdi_uuid)
+    old_volume_size = volume_info.virtual_size
+    deflate(
+        linstor, vdi_uuid, device_path, new_volume_size, old_volume_size
+    )
 
 
 def detach_thin(session, linstor, sr_uuid, vdi_uuid):
-- 
2.44.0

