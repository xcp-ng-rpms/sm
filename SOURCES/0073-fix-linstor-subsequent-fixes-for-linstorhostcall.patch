From 62ed4ad1a5da432780e3d8b9b41d3961648d5ede Mon Sep 17 00:00:00 2001
From: Mathieu Labourier <mathieu.labourier@vates.tech>
Date: Mon, 11 Aug 2025 16:06:38 +0200
Subject: [PATCH] fix(linstor): subsequent fixes for linstorhostcall

fix(linstor): prevent use of e before assignment in nested try-except
fix(linstor): use util.get_master_ref to get the master ref
fix(linstor): log host_ref instead UUID to prevent XAPI call
fix(log_failed_call): set error value for the call without an actual error
fix(linstorhostcall): use next iter instead of list conversion
cleanup(linstor): remove currently unused get_primary function

Signed-off-by: Mathieu Labourier <mathieu.labourier@vates.tech>
Co-authored-by: Damien Thenot <damien.thenot@vates.tech>
Co-authored-by: Ronan Abhamon <ronan.abhamon@vates.tech>
---
 drivers/linstorvhdutil.py       | 29 ++++++++++++++++++++---------
 drivers/linstorvolumemanager.py | 22 ++--------------------
 2 files changed, 22 insertions(+), 29 deletions(-)

diff --git a/drivers/linstorvhdutil.py b/drivers/linstorvhdutil.py
index cb5c670..d1777d9 100644
--- a/drivers/linstorvhdutil.py
+++ b/drivers/linstorvhdutil.py
@@ -31,21 +31,18 @@ MANAGER_PLUGIN = 'linstor-manager'
 
 
 def call_remote_method(session, host_ref, method, device_path, args):
-    host_rec = session.xenapi.host.get_record(host_ref)
-    host_uuid = host_rec['uuid']
-
     try:
         response = session.xenapi.host.call_plugin(
             host_ref, MANAGER_PLUGIN, method, args
         )
     except Exception as e:
         util.SMlog('call-plugin on {} ({} with {}) exception: {}'.format(
-            host_uuid, method, args, e
+            host_ref, method, args, e
         ))
         raise util.SMException(str(e))
 
     util.SMlog('call-plugin on {} ({} with {}) returned: {}'.format(
-        host_uuid, method, args, response
+        host_ref, method, args, response
     ))
 
     return response
@@ -85,7 +82,14 @@ def log_successful_call(target_host, device_path, vdi_uuid, remote_method, respo
 
 def log_failed_call(target_host, next_target, device_path, vdi_uuid, remote_method, e):
     util.SMlog(
-        'Failed to call method on {} for device {} ({}): {}. Trying accessing on {}... (cause: {})'.format(target_host, device_path, vdi_uuid, remote_method, next_target, e),
+        'Failed to call method on {} for device {} ({}): {}. Trying accessing on {}... (cause: {})'.format(
+            target_host,
+            device_path,
+            vdi_uuid,
+            remote_method,
+            next_target,
+            e
+        ),
         priority=util.LOG_DEBUG
     )
 
@@ -107,7 +111,7 @@ def linstorhostcall(local_method, remote_method):
             remote_args = {str(key): str(value) for key, value in remote_args.items()}
 
             try:
-                host_ref_attached = util.get_hosts_attached_on(self._session, [vdi_uuid])[0]
+                host_ref_attached = next(iter(util.get_hosts_attached_on(self._session, [vdi_uuid])))
                 if host_ref_attached:
                     response = call_remote_method(
                         self._session, host_ref_attached, remote_method, device_path, remote_args
@@ -118,7 +122,7 @@ def linstorhostcall(local_method, remote_method):
                 log_failed_call('attached node', 'master', device_path, vdi_uuid, remote_method, e)
 
             try:
-                master_ref = self._session.xenapi.pool.get_all_records().values()[0]['master']
+                master_ref = util.get_master_ref(self._session)
                 response = call_remote_method(self._session, master_ref, remote_method, device_path, remote_args)
                 log_successful_call('master', device_path, vdi_uuid, remote_method, response)
                 return response_parser(self, vdi_uuid, response)
@@ -136,7 +140,14 @@ def linstorhostcall(local_method, remote_method):
                 except Exception as remote_e:
                     self._raise_openers_exception(device_path, remote_e)
             else:
-                log_failed_call('primary', 'another node', device_path, vdi_uuid, remote_method, e)
+                log_failed_call(
+                    'primary',
+                    'another node',
+                    device_path,
+                    vdi_uuid,
+                    remote_method,
+                    'no primary'
+                )
 
                 try:
                     host = self._get_readonly_host(vdi_uuid, device_path, nodes)
diff --git a/drivers/linstorvolumemanager.py b/drivers/linstorvolumemanager.py
index 95d1f43..0db16e9 100755
--- a/drivers/linstorvolumemanager.py
+++ b/drivers/linstorvolumemanager.py
@@ -1058,7 +1058,7 @@ class LinstorVolumeManager(object):
 
             # 5. Ok!
             volume_properties[self.PROP_NOT_EXISTS] = self.STATE_EXISTS
-        except Exception as e:
+        except Exception as err:
             try:
                 # Clear the new volume properties in case of failure.
                 assert volume_properties.namespace == \
@@ -1070,7 +1070,7 @@ class LinstorVolumeManager(object):
                     .format(e)
                 )
             raise LinstorVolumeManagerError(
-                'Failed to copy volume properties: {}'.format(e)
+                'Failed to copy volume properties: {}'.format(err)
             )
 
         try:
@@ -1439,24 +1439,6 @@ class LinstorVolumeManager(object):
 
         return (node_names, in_use_by)
 
-    def get_primary(self, volume_uuid):
-        """
-        Find the node that opened a volume, i.e. the primary.
-        :rtype: str
-        """
-        volume_name = self.get_volume_name(volume_uuid)
-
-        resource_states = filter(
-            lambda resource_state: resource_state.name == volume_name,
-            self._get_resource_cache().resource_states
-        )
-
-        for resource_state in resource_states:
-            if resource_state.in_use:
-                return resource_state.node_name
-
-        return None
-
     def invalidate_resource_cache(self):
         """
         If resources are impacted by external commands like vhdutil,
